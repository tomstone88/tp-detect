/// <reference types="node" />

import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/**
 * Defines values for AccessLevel. \
 * {@link KnownAccessLevel} can be used interchangeably with AccessLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Read** \
 * **Write**
 */
export declare type AccessLevel = string;

/** A disk access SAS uri. */
export declare interface AccessUri {
    /**
     * A SAS uri for accessing a disk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accessSAS?: string;
    /**
     * A SAS uri for accessing a VM guest state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly securityDataAccessSAS?: string;
}

/** Enables or disables a capability on the virtual machine or virtual machine scale set. */
export declare interface AdditionalCapabilities {
    /** The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled. */
    ultraSSDEnabled?: boolean;
    /** The flag that enables or disables hibernation capability on the VM. */
    hibernationEnabled?: boolean;
}

/** Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied. */
export declare interface AdditionalUnattendContent {
    /** The pass name. Currently, the only allowable value is OobeSystem. */
    passName?: "OobeSystem";
    /** The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup. */
    componentName?: "Microsoft-Windows-Shell-Setup";
    /** Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon. */
    settingName?: SettingNames;
    /** Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted. */
    content?: string;
}

/**
 * Defines values for AggregatedReplicationState. \
 * {@link KnownAggregatedReplicationState} can be used interchangeably with AggregatedReplicationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **InProgress** \
 * **Completed** \
 * **Failed**
 */
export declare type AggregatedReplicationState = string;

/** The API entity reference. */
export declare interface ApiEntityReference {
    /** The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/... */
    id?: string;
}

/** Api error. */
export declare interface ApiError {
    /** The Api error details */
    details?: ApiErrorBase[];
    /** The Api inner error */
    innererror?: InnerError;
    /** The error code. */
    code?: string;
    /** The target of the particular error. */
    target?: string;
    /** The error message. */
    message?: string;
}

/** Api error base. */
export declare interface ApiErrorBase {
    /** The error code. */
    code?: string;
    /** The target of the particular error. */
    target?: string;
    /** The error message. */
    message?: string;
}

/** Contains the list of gallery applications that should be made available to the VM/VMSS */
export declare interface ApplicationProfile {
    /** Specifies the gallery applications that should be made available to the VM/VMSS */
    galleryApplications?: VMGalleryApplication[];
}

/**
 * Defines values for Architecture. \
 * {@link KnownArchitecture} can be used interchangeably with Architecture,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **x64** \
 * **Arm64**
 */
export declare type Architecture = string;

/**
 * Defines values for ArchitectureTypes. \
 * {@link KnownArchitectureTypes} can be used interchangeably with ArchitectureTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **x64** \
 * **Arm64**
 */
export declare type ArchitectureTypes = string;

/** The configuration parameters used for performing automatic OS upgrade. */
export declare interface AutomaticOSUpgradePolicy {
    /** Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. <br><br> If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true. */
    enableAutomaticOSUpgrade?: boolean;
    /** Whether OS image rollback feature should be disabled. Default value is false. */
    disableAutomaticRollback?: boolean;
    /** Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Default value is false. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS. */
    useRollingUpgradePolicy?: boolean;
}

/** Describes automatic OS upgrade properties on the image. */
export declare interface AutomaticOSUpgradeProperties {
    /** Specifies whether automatic OS upgrade is supported on the image. */
    automaticOSUpgradeSupported: boolean;
}

/** Specifies the configuration parameters for automatic repairs on the virtual machine scale set. */
export declare interface AutomaticRepairsPolicy {
    /** Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false. */
    enabled?: boolean;
    /** The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 10 minutes (PT10M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M). */
    gracePeriod?: string;
    /** Type of repair action (replace, restart, reimage) that will be used for repairing unhealthy virtual machines in the scale set. Default value is replace. */
    repairAction?: RepairAction;
}

/** Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Availability sets overview](https://docs.microsoft.com/azure/virtual-machines/availability-set-overview). <br><br> For more information on Azure planned maintenance, see [Maintenance and updates for Virtual Machines in Azure](https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates) <br><br> Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set. */
export declare interface AvailabilitySet extends Resource {
    /** Sku of the availability set, only name is required to be set. See AvailabilitySetSkuTypes for possible set of values. Use 'Aligned' for virtual machines with managed disks and 'Classic' for virtual machines with unmanaged disks. Default value is 'Classic'. */
    sku?: Sku;
    /** Update Domain count. */
    platformUpdateDomainCount?: number;
    /** Fault Domain count. */
    platformFaultDomainCount?: number;
    /** A list of references to all virtual machines in the availability set. */
    virtualMachines?: SubResource[];
    /** Specifies information about the proximity placement group that the availability set should be assigned to. <br><br>Minimum api-version: 2018-04-01. */
    proximityPlacementGroup?: SubResource;
    /**
     * The resource status information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statuses?: InstanceViewStatus[];
}

/** The List Availability Set operation response. */
export declare interface AvailabilitySetListResult {
    /** The list of availability sets */
    value: AvailabilitySet[];
    /** The URI to fetch the next page of AvailabilitySets. Call ListNext() with this URI to fetch the next page of AvailabilitySets. */
    nextLink?: string;
}

/** Interface representing a AvailabilitySets. */
export declare interface AvailabilitySets {
    /**
     * Lists all availability sets in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: AvailabilitySetsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<AvailabilitySet>;
    /**
     * Lists all availability sets in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: AvailabilitySetsListOptionalParams): PagedAsyncIterableIterator<AvailabilitySet>;
    /**
     * Lists all available virtual machine sizes that can be used to create a new virtual machine in an
     * existing availability set.
     * @param resourceGroupName The name of the resource group.
     * @param availabilitySetName The name of the availability set.
     * @param options The options parameters.
     */
    listAvailableSizes(resourceGroupName: string, availabilitySetName: string, options?: AvailabilitySetsListAvailableSizesOptionalParams): PagedAsyncIterableIterator<VirtualMachineSize>;
    /**
     * Create or update an availability set.
     * @param resourceGroupName The name of the resource group.
     * @param availabilitySetName The name of the availability set.
     * @param parameters Parameters supplied to the Create Availability Set operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, availabilitySetName: string, parameters: AvailabilitySet, options?: AvailabilitySetsCreateOrUpdateOptionalParams): Promise<AvailabilitySetsCreateOrUpdateResponse>;
    /**
     * Update an availability set.
     * @param resourceGroupName The name of the resource group.
     * @param availabilitySetName The name of the availability set.
     * @param parameters Parameters supplied to the Update Availability Set operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, availabilitySetName: string, parameters: AvailabilitySetUpdate, options?: AvailabilitySetsUpdateOptionalParams): Promise<AvailabilitySetsUpdateResponse>;
    /**
     * Delete an availability set.
     * @param resourceGroupName The name of the resource group.
     * @param availabilitySetName The name of the availability set.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, availabilitySetName: string, options?: AvailabilitySetsDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves information about an availability set.
     * @param resourceGroupName The name of the resource group.
     * @param availabilitySetName The name of the availability set.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, availabilitySetName: string, options?: AvailabilitySetsGetOptionalParams): Promise<AvailabilitySetsGetResponse>;
}

/** Optional parameters. */
export declare interface AvailabilitySetsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type AvailabilitySetsCreateOrUpdateResponse = AvailabilitySet;

/** Optional parameters. */
export declare interface AvailabilitySetsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AvailabilitySetsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AvailabilitySetsGetResponse = AvailabilitySet;

/**
 * Defines values for AvailabilitySetSkuTypes. \
 * {@link KnownAvailabilitySetSkuTypes} can be used interchangeably with AvailabilitySetSkuTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Classic** \
 * **Aligned**
 */
export declare type AvailabilitySetSkuTypes = string;

/** Optional parameters. */
export declare interface AvailabilitySetsListAvailableSizesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAvailableSizes operation. */
export declare type AvailabilitySetsListAvailableSizesResponse = VirtualMachineSizeListResult;

/** Optional parameters. */
export declare interface AvailabilitySetsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply to the operation. Allowed values are 'instanceView'. */
    expand?: string;
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type AvailabilitySetsListBySubscriptionNextResponse = AvailabilitySetListResult;

/** Optional parameters. */
export declare interface AvailabilitySetsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply to the operation. Allowed values are 'instanceView'. */
    expand?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type AvailabilitySetsListBySubscriptionResponse = AvailabilitySetListResult;

/** Optional parameters. */
export declare interface AvailabilitySetsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AvailabilitySetsListNextResponse = AvailabilitySetListResult;

/** Optional parameters. */
export declare interface AvailabilitySetsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AvailabilitySetsListResponse = AvailabilitySetListResult;

/** Optional parameters. */
export declare interface AvailabilitySetsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type AvailabilitySetsUpdateResponse = AvailabilitySet;

/** Specifies information about the availability set that the virtual machine should be assigned to. Only tags may be updated. */
export declare interface AvailabilitySetUpdate extends UpdateResource {
    /** Sku of the availability set */
    sku?: Sku;
    /** Update Domain count. */
    platformUpdateDomainCount?: number;
    /** Fault Domain count. */
    platformFaultDomainCount?: number;
    /** A list of references to all virtual machines in the availability set. */
    virtualMachines?: SubResource[];
    /** Specifies information about the proximity placement group that the availability set should be assigned to. <br><br>Minimum api-version: 2018-04-01. */
    proximityPlacementGroup?: SubResource;
    /**
     * The resource status information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statuses?: InstanceViewStatus[];
}

/** Describes the properties of an virtual machine instance view for available patch summary. */
export declare interface AvailablePatchSummary {
    /**
     * The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: PatchOperationStatus;
    /**
     * The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly assessmentActivityId?: string;
    /**
     * The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rebootPending?: boolean;
    /**
     * The number of critical or security patches that have been detected as available and not yet installed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly criticalAndSecurityPatchCount?: number;
    /**
     * The number of all available patches excluding critical and security.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly otherPatchCount?: number;
    /**
     * The UTC timestamp when the operation began.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The UTC timestamp when the operation began.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedTime?: Date;
    /**
     * The errors that were encountered during execution of the operation. The details array contains the list of them.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ApiError;
}

/** Specifies the billing related details of a Azure Spot VM or VMSS. <br><br>Minimum api-version: 2019-03-01. */
export declare interface BillingProfile {
    /** Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01. */
    maxPrice?: number;
}

/** Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor. */
export declare interface BootDiagnostics {
    /** Whether boot diagnostics should be enabled on the Virtual Machine. */
    enabled?: boolean;
    /** Uri of the storage account to use for placing the console output and screenshot. <br><br>If storageUri is not specified while enabling boot diagnostics, managed storage will be used. */
    storageUri?: string;
}

/** The instance view of a virtual machine boot diagnostics. */
export declare interface BootDiagnosticsInstanceView {
    /**
     * The console screenshot blob URI. <br><br>NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly consoleScreenshotBlobUri?: string;
    /**
     * The serial console log blob Uri. <br><br>NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serialConsoleLogBlobUri?: string;
    /**
     * The boot diagnostics status information for the VM. <br><br> NOTE: It will be set only if there are errors encountered in enabling boot diagnostics.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: InstanceViewStatus;
}

/** Defines values for CachingTypes. */
export declare type CachingTypes = "None" | "ReadOnly" | "ReadWrite";

/** Specifies information about the capacity reservation. */
export declare interface CapacityReservation extends Resource {
    /** SKU of the resource for which capacity needs be reserved. The SKU name and capacity is required to be set. Currently VM Skus with the capability called 'CapacityReservationSupported' set to true are supported. Refer to List Microsoft.Compute SKUs in a region (https://docs.microsoft.com/rest/api/compute/resourceskus/list) for supported values. */
    sku: Sku;
    /** Availability Zone to use for this capacity reservation. The zone has to be single value and also should be part for the list of zones specified during the capacity reservation group creation. The zone can be assigned only during creation. If not provided, the reservation supports only non-zonal deployments. If provided, enforces VM/VMSS using this capacity reservation to be in same zone. */
    zones?: string[];
    /**
     * A unique id generated and assigned to the capacity reservation by the platform which does not change throughout the lifetime of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reservationId?: string;
    /**
     * Specifies the value of fault domain count that Capacity Reservation supports for requested VM size.<br>NOTE: The fault domain count specified for a resource (like virtual machines scale set) must be less than or equal to this value if it deploys using capacity reservation.<br><br>Minimum api-version: 2022-08-01.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly platformFaultDomainCount?: number;
    /**
     * A list of all virtual machine resource ids that are associated with the capacity reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly virtualMachinesAssociated?: SubResourceReadOnly[];
    /**
     * The date time when the capacity reservation was last updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningTime?: Date;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The Capacity reservation instance view.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: CapacityReservationInstanceView;
    /**
     * Specifies the time at which the Capacity Reservation resource was created.<br><br>Minimum api-version: 2021-11-01.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeCreated?: Date;
}

/** Specifies information about the capacity reservation group that the capacity reservations should be assigned to. <br><br> Currently, a capacity reservation can only be added to a capacity reservation group at creation time. An existing capacity reservation cannot be added or moved to another capacity reservation group. */
export declare interface CapacityReservationGroup extends Resource {
    /** Availability Zones to use for this capacity reservation group. The zones can be assigned only during creation. If not provided, the group supports only regional resources in the region. If provided, enforces each capacity reservation in the group to be in one of the zones. */
    zones?: string[];
    /**
     * A list of all capacity reservation resource ids that belong to capacity reservation group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capacityReservations?: SubResourceReadOnly[];
    /**
     * A list of references to all virtual machines associated to the capacity reservation group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly virtualMachinesAssociated?: SubResourceReadOnly[];
    /**
     * The capacity reservation group instance view which has the list of instance views for all the capacity reservations that belong to the capacity reservation group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: CapacityReservationGroupInstanceView;
}

export declare interface CapacityReservationGroupInstanceView {
    /**
     * List of instance view of the capacity reservations under the capacity reservation group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capacityReservations?: CapacityReservationInstanceViewWithName[];
}

/**
 * Defines values for CapacityReservationGroupInstanceViewTypes. \
 * {@link KnownCapacityReservationGroupInstanceViewTypes} can be used interchangeably with CapacityReservationGroupInstanceViewTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **instanceView**
 */
export declare type CapacityReservationGroupInstanceViewTypes = string;

/** The List capacity reservation group with resource group response. */
export declare interface CapacityReservationGroupListResult {
    /** The list of capacity reservation groups */
    value: CapacityReservationGroup[];
    /** The URI to fetch the next page of capacity reservation groups. Call ListNext() with this URI to fetch the next page of capacity reservation groups. */
    nextLink?: string;
}

/** Interface representing a CapacityReservationGroups. */
export declare interface CapacityReservationGroups {
    /**
     * Lists all of the capacity reservation groups in the specified resource group. Use the nextLink
     * property in the response to get the next page of capacity reservation groups.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: CapacityReservationGroupsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<CapacityReservationGroup>;
    /**
     * Lists all of the capacity reservation groups in the subscription. Use the nextLink property in the
     * response to get the next page of capacity reservation groups.
     * @param options The options parameters.
     */
    listBySubscription(options?: CapacityReservationGroupsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<CapacityReservationGroup>;
    /**
     * The operation to create or update a capacity reservation group. When updating a capacity reservation
     * group, only tags may be modified. Please refer to https://aka.ms/CapacityReservation for more
     * details.
     * @param resourceGroupName The name of the resource group.
     * @param capacityReservationGroupName The name of the capacity reservation group.
     * @param parameters Parameters supplied to the Create capacity reservation Group.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, capacityReservationGroupName: string, parameters: CapacityReservationGroup, options?: CapacityReservationGroupsCreateOrUpdateOptionalParams): Promise<CapacityReservationGroupsCreateOrUpdateResponse>;
    /**
     * The operation to update a capacity reservation group. When updating a capacity reservation group,
     * only tags may be modified.
     * @param resourceGroupName The name of the resource group.
     * @param capacityReservationGroupName The name of the capacity reservation group.
     * @param parameters Parameters supplied to the Update capacity reservation Group operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, capacityReservationGroupName: string, parameters: CapacityReservationGroupUpdate, options?: CapacityReservationGroupsUpdateOptionalParams): Promise<CapacityReservationGroupsUpdateResponse>;
    /**
     * The operation to delete a capacity reservation group. This operation is allowed only if all the
     * associated resources are disassociated from the reservation group and all capacity reservations
     * under the reservation group have also been deleted. Please refer to
     * https://aka.ms/CapacityReservation for more details.
     * @param resourceGroupName The name of the resource group.
     * @param capacityReservationGroupName The name of the capacity reservation group.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, capacityReservationGroupName: string, options?: CapacityReservationGroupsDeleteOptionalParams): Promise<void>;
    /**
     * The operation that retrieves information about a capacity reservation group.
     * @param resourceGroupName The name of the resource group.
     * @param capacityReservationGroupName The name of the capacity reservation group.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, capacityReservationGroupName: string, options?: CapacityReservationGroupsGetOptionalParams): Promise<CapacityReservationGroupsGetResponse>;
}

/** Optional parameters. */
export declare interface CapacityReservationGroupsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type CapacityReservationGroupsCreateOrUpdateResponse = CapacityReservationGroup;

/** Optional parameters. */
export declare interface CapacityReservationGroupsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface CapacityReservationGroupsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. 'InstanceView' will retrieve the list of instance views of the capacity reservations under the capacity reservation group which is a snapshot of the runtime properties of a capacity reservation that is managed by the platform and can change outside of control plane operations. */
    expand?: CapacityReservationGroupInstanceViewTypes;
}

/** Contains response data for the get operation. */
export declare type CapacityReservationGroupsGetResponse = CapacityReservationGroup;

/** Optional parameters. */
export declare interface CapacityReservationGroupsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. Based on the expand param(s) specified we return Virtual Machine or ScaleSet VM Instance or both resource Ids which are associated to capacity reservation group in the response. */
    expand?: ExpandTypesForGetCapacityReservationGroups;
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type CapacityReservationGroupsListByResourceGroupNextResponse = CapacityReservationGroupListResult;

/** Optional parameters. */
export declare interface CapacityReservationGroupsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. Based on the expand param(s) specified we return Virtual Machine or ScaleSet VM Instance or both resource Ids which are associated to capacity reservation group in the response. */
    expand?: ExpandTypesForGetCapacityReservationGroups;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type CapacityReservationGroupsListByResourceGroupResponse = CapacityReservationGroupListResult;

/** Optional parameters. */
export declare interface CapacityReservationGroupsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. Based on the expand param(s) specified we return Virtual Machine or ScaleSet VM Instance or both resource Ids which are associated to capacity reservation group in the response. */
    expand?: ExpandTypesForGetCapacityReservationGroups;
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type CapacityReservationGroupsListBySubscriptionNextResponse = CapacityReservationGroupListResult;

/** Optional parameters. */
export declare interface CapacityReservationGroupsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. Based on the expand param(s) specified we return Virtual Machine or ScaleSet VM Instance or both resource Ids which are associated to capacity reservation group in the response. */
    expand?: ExpandTypesForGetCapacityReservationGroups;
}

/** Contains response data for the listBySubscription operation. */
export declare type CapacityReservationGroupsListBySubscriptionResponse = CapacityReservationGroupListResult;

/** Optional parameters. */
export declare interface CapacityReservationGroupsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type CapacityReservationGroupsUpdateResponse = CapacityReservationGroup;

/** Specifies information about the capacity reservation group. Only tags can be updated. */
export declare interface CapacityReservationGroupUpdate extends UpdateResource {
    /**
     * A list of all capacity reservation resource ids that belong to capacity reservation group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capacityReservations?: SubResourceReadOnly[];
    /**
     * A list of references to all virtual machines associated to the capacity reservation group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly virtualMachinesAssociated?: SubResourceReadOnly[];
    /**
     * The capacity reservation group instance view which has the list of instance views for all the capacity reservations that belong to the capacity reservation group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: CapacityReservationGroupInstanceView;
}

/** The instance view of a capacity reservation that provides as snapshot of the runtime properties of the capacity reservation that is managed by the platform and can change outside of control plane operations. */
export declare interface CapacityReservationInstanceView {
    /** Unutilized capacity of the capacity reservation. */
    utilizationInfo?: CapacityReservationUtilization;
    /** The resource status information. */
    statuses?: InstanceViewStatus[];
}

/**
 * Defines values for CapacityReservationInstanceViewTypes. \
 * {@link KnownCapacityReservationInstanceViewTypes} can be used interchangeably with CapacityReservationInstanceViewTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **instanceView**
 */
export declare type CapacityReservationInstanceViewTypes = string;

/** The instance view of a capacity reservation that includes the name of the capacity reservation. It is used for the response to the instance view of a capacity reservation group. */
export declare interface CapacityReservationInstanceViewWithName extends CapacityReservationInstanceView {
    /**
     * The name of the capacity reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
}

/** The list capacity reservation operation response. */
export declare interface CapacityReservationListResult {
    /** The list of capacity reservations */
    value: CapacityReservation[];
    /** The URI to fetch the next page of capacity reservations. Call ListNext() with this URI to fetch the next page of capacity reservations. */
    nextLink?: string;
}

/** The parameters of a capacity reservation Profile. */
export declare interface CapacityReservationProfile {
    /** Specifies the capacity reservation group resource id that should be used for allocating the virtual machine or scaleset vm instances provided enough capacity has been reserved. Please refer to https://aka.ms/CapacityReservation for more details. */
    capacityReservationGroup?: SubResource;
}

/** Interface representing a CapacityReservations. */
export declare interface CapacityReservations {
    /**
     * Lists all of the capacity reservations in the specified capacity reservation group. Use the nextLink
     * property in the response to get the next page of capacity reservations.
     * @param resourceGroupName The name of the resource group.
     * @param capacityReservationGroupName The name of the capacity reservation group.
     * @param options The options parameters.
     */
    listByCapacityReservationGroup(resourceGroupName: string, capacityReservationGroupName: string, options?: CapacityReservationsListByCapacityReservationGroupOptionalParams): PagedAsyncIterableIterator<CapacityReservation>;
    /**
     * The operation to create or update a capacity reservation. Please note some properties can be set
     * only during capacity reservation creation. Please refer to https://aka.ms/CapacityReservation for
     * more details.
     * @param resourceGroupName The name of the resource group.
     * @param capacityReservationGroupName The name of the capacity reservation group.
     * @param capacityReservationName The name of the capacity reservation.
     * @param parameters Parameters supplied to the Create capacity reservation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, capacityReservationGroupName: string, capacityReservationName: string, parameters: CapacityReservation, options?: CapacityReservationsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<CapacityReservationsCreateOrUpdateResponse>, CapacityReservationsCreateOrUpdateResponse>>;
    /**
     * The operation to create or update a capacity reservation. Please note some properties can be set
     * only during capacity reservation creation. Please refer to https://aka.ms/CapacityReservation for
     * more details.
     * @param resourceGroupName The name of the resource group.
     * @param capacityReservationGroupName The name of the capacity reservation group.
     * @param capacityReservationName The name of the capacity reservation.
     * @param parameters Parameters supplied to the Create capacity reservation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, capacityReservationGroupName: string, capacityReservationName: string, parameters: CapacityReservation, options?: CapacityReservationsCreateOrUpdateOptionalParams): Promise<CapacityReservationsCreateOrUpdateResponse>;
    /**
     * The operation to update a capacity reservation.
     * @param resourceGroupName The name of the resource group.
     * @param capacityReservationGroupName The name of the capacity reservation group.
     * @param capacityReservationName The name of the capacity reservation.
     * @param parameters Parameters supplied to the Update capacity reservation operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, capacityReservationGroupName: string, capacityReservationName: string, parameters: CapacityReservationUpdate, options?: CapacityReservationsUpdateOptionalParams): Promise<PollerLike<PollOperationState<CapacityReservationsUpdateResponse>, CapacityReservationsUpdateResponse>>;
    /**
     * The operation to update a capacity reservation.
     * @param resourceGroupName The name of the resource group.
     * @param capacityReservationGroupName The name of the capacity reservation group.
     * @param capacityReservationName The name of the capacity reservation.
     * @param parameters Parameters supplied to the Update capacity reservation operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, capacityReservationGroupName: string, capacityReservationName: string, parameters: CapacityReservationUpdate, options?: CapacityReservationsUpdateOptionalParams): Promise<CapacityReservationsUpdateResponse>;
    /**
     * The operation to delete a capacity reservation. This operation is allowed only when all the
     * associated resources are disassociated from the capacity reservation. Please refer to
     * https://aka.ms/CapacityReservation for more details.
     * @param resourceGroupName The name of the resource group.
     * @param capacityReservationGroupName The name of the capacity reservation group.
     * @param capacityReservationName The name of the capacity reservation.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, capacityReservationGroupName: string, capacityReservationName: string, options?: CapacityReservationsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to delete a capacity reservation. This operation is allowed only when all the
     * associated resources are disassociated from the capacity reservation. Please refer to
     * https://aka.ms/CapacityReservation for more details.
     * @param resourceGroupName The name of the resource group.
     * @param capacityReservationGroupName The name of the capacity reservation group.
     * @param capacityReservationName The name of the capacity reservation.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, capacityReservationGroupName: string, capacityReservationName: string, options?: CapacityReservationsDeleteOptionalParams): Promise<void>;
    /**
     * The operation that retrieves information about the capacity reservation.
     * @param resourceGroupName The name of the resource group.
     * @param capacityReservationGroupName The name of the capacity reservation group.
     * @param capacityReservationName The name of the capacity reservation.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, capacityReservationGroupName: string, capacityReservationName: string, options?: CapacityReservationsGetOptionalParams): Promise<CapacityReservationsGetResponse>;
}

/** Optional parameters. */
export declare interface CapacityReservationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CapacityReservationsCreateOrUpdateResponse = CapacityReservation;

/** Optional parameters. */
export declare interface CapacityReservationsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CapacityReservationsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. 'InstanceView' retrieves a snapshot of the runtime properties of the capacity reservation that is managed by the platform and can change outside of control plane operations. */
    expand?: CapacityReservationInstanceViewTypes;
}

/** Contains response data for the get operation. */
export declare type CapacityReservationsGetResponse = CapacityReservation;

/** Optional parameters. */
export declare interface CapacityReservationsListByCapacityReservationGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByCapacityReservationGroupNext operation. */
export declare type CapacityReservationsListByCapacityReservationGroupNextResponse = CapacityReservationListResult;

/** Optional parameters. */
export declare interface CapacityReservationsListByCapacityReservationGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByCapacityReservationGroup operation. */
export declare type CapacityReservationsListByCapacityReservationGroupResponse = CapacityReservationListResult;

/** Optional parameters. */
export declare interface CapacityReservationsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type CapacityReservationsUpdateResponse = CapacityReservation;

/** Specifies information about the capacity reservation. Only tags and sku.capacity can be updated. */
export declare interface CapacityReservationUpdate extends UpdateResource {
    /** SKU of the resource for which capacity needs be reserved. The SKU name and capacity is required to be set. Currently VM Skus with the capability called 'CapacityReservationSupported' set to true are supported. Refer to List Microsoft.Compute SKUs in a region (https://docs.microsoft.com/rest/api/compute/resourceskus/list) for supported values. */
    sku?: Sku;
    /**
     * A unique id generated and assigned to the capacity reservation by the platform which does not change throughout the lifetime of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reservationId?: string;
    /**
     * Specifies the value of fault domain count that Capacity Reservation supports for requested VM size.<br>NOTE: The fault domain count specified for a resource (like virtual machines scale set) must be less than or equal to this value if it deploys using capacity reservation.<br><br>Minimum api-version: 2022-08-01.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly platformFaultDomainCount?: number;
    /**
     * A list of all virtual machine resource ids that are associated with the capacity reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly virtualMachinesAssociated?: SubResourceReadOnly[];
    /**
     * The date time when the capacity reservation was last updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningTime?: Date;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The Capacity reservation instance view.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: CapacityReservationInstanceView;
    /**
     * Specifies the time at which the Capacity Reservation resource was created.<br><br>Minimum api-version: 2021-11-01.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeCreated?: Date;
}

/** Represents the capacity reservation utilization in terms of resources allocated. */
export declare interface CapacityReservationUtilization {
    /**
     * The value provides the current capacity of the VM size which was reserved successfully and for which the customer is getting billed.<br><br>Minimum api-version: 2022-08-01.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentCapacity?: number;
    /**
     * A list of all virtual machines resource ids allocated against the capacity reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly virtualMachinesAllocated?: SubResourceReadOnly[];
}

/** An error response from the Compute service. */
export declare interface CloudError {
    /** Api error. */
    error?: ApiError;
}

/** Describes the cloud service. */
export declare interface CloudService {
    /**
     * Resource Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource location. */
    location: string;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Cloud service properties */
    properties?: CloudServiceProperties;
    /** The system meta data relating to this resource. */
    systemData?: SystemData;
}

/** Describes a cloud service extension profile. */
export declare interface CloudServiceExtensionProfile {
    /** List of extensions for the cloud service. */
    extensions?: Extension[];
}

/** Extension Properties. */
export declare interface CloudServiceExtensionProperties {
    /** The name of the extension handler publisher. */
    publisher?: string;
    /** Specifies the type of the extension. */
    type?: string;
    /** Specifies the version of the extension. Specifies the version of the extension. If this element is not specified or an asterisk (*) is used as the value, the latest version of the extension is used. If the value is specified with a major version number and an asterisk as the minor version number (X.), the latest minor version of the specified major version is selected. If a major version number and a minor version number are specified (X.Y), the specific extension version is selected. If a version is specified, an auto-upgrade is performed on the role instance. */
    typeHandlerVersion?: string;
    /** Explicitly specify whether platform can automatically upgrade typeHandlerVersion to higher minor versions when they become available. */
    autoUpgradeMinorVersion?: boolean;
    /** Public settings for the extension. For JSON extensions, this is the JSON settings for the extension. For XML Extension (like RDP), this is the XML setting for the extension. */
    settings?: any;
    /** Protected settings for the extension which are encrypted before sent to the role instance. */
    protectedSettings?: any;
    /** Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance. */
    protectedSettingsFromKeyVault?: CloudServiceVaultAndSecretReference;
    /**
     * Tag to force apply the provided public and protected settings.
     * Changing the tag value allows for re-running the extension without changing any of the public or protected settings.
     * If forceUpdateTag is not changed, updates to public or protected settings would still be applied by the handler.
     * If neither forceUpdateTag nor any of public or protected settings change, extension would flow to the role instance with the same sequence-number, and
     * it is up to handler implementation whether to re-run it or not
     */
    forceUpdateTag?: string;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** Optional list of roles to apply this extension. If property is not specified or '*' is specified, extension is applied to all roles in the cloud service. */
    rolesAppliedTo?: string[];
}

/** InstanceView of CloudService as a whole */
export declare interface CloudServiceInstanceView {
    /** Instance view statuses. */
    roleInstance?: InstanceViewStatusesSummary;
    /**
     * The version of the SDK that was used to generate the package for the cloud service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sdkVersion?: string;
    /**
     * Specifies a list of unique identifiers generated internally for the cloud service. <br /><br /> NOTE: If you are using Azure Diagnostics extension, this property can be used as 'DeploymentId' for querying details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateIds?: string[];
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly statuses?: ResourceInstanceViewStatus[];
}

/** The list operation result. */
export declare interface CloudServiceListResult {
    /** The list of resources. */
    value: CloudService[];
    /** The URI to fetch the next page of resources. Use this to get the next page of resources. Do this till nextLink is null to fetch all the resources. */
    nextLink?: string;
}

/** Network Profile for the cloud service. */
export declare interface CloudServiceNetworkProfile {
    /** List of Load balancer configurations. Cloud service can have up to two load balancer configurations, corresponding to a Public Load Balancer and an Internal Load Balancer. */
    loadBalancerConfigurations?: LoadBalancerConfiguration[];
    /**
     * Slot type for the cloud service.
     * Possible values are <br /><br />**Production**<br /><br />**Staging**<br /><br />
     * If not specified, the default value is Production.
     */
    slotType?: CloudServiceSlotType;
    /** The id reference of the cloud service containing the target IP with which the subject cloud service can perform a swap. This property cannot be updated once it is set. The swappable cloud service referred by this id must be present otherwise an error will be thrown. */
    swappableCloudService?: SubResource;
}

/** Interface representing a CloudServiceOperatingSystems. */
export declare interface CloudServiceOperatingSystems {
    /**
     * Gets a list of all guest operating system versions available to be specified in the XML service
     * configuration (.cscfg) for a cloud service. Use nextLink property in the response to get the next
     * page of OS versions. Do this till nextLink is null to fetch all the OS versions.
     * @param location Name of the location that the OS versions pertain to.
     * @param options The options parameters.
     */
    listOSVersions(location: string, options?: CloudServiceOperatingSystemsListOSVersionsOptionalParams): PagedAsyncIterableIterator<OSVersion>;
    /**
     * Gets a list of all guest operating system families available to be specified in the XML service
     * configuration (.cscfg) for a cloud service. Use nextLink property in the response to get the next
     * page of OS Families. Do this till nextLink is null to fetch all the OS Families.
     * @param location Name of the location that the OS families pertain to.
     * @param options The options parameters.
     */
    listOSFamilies(location: string, options?: CloudServiceOperatingSystemsListOSFamiliesOptionalParams): PagedAsyncIterableIterator<OSFamily>;
    /**
     * Gets properties of a guest operating system version that can be specified in the XML service
     * configuration (.cscfg) for a cloud service.
     * @param location Name of the location that the OS version pertains to.
     * @param osVersionName Name of the OS version.
     * @param options The options parameters.
     */
    getOSVersion(location: string, osVersionName: string, options?: CloudServiceOperatingSystemsGetOSVersionOptionalParams): Promise<CloudServiceOperatingSystemsGetOSVersionResponse>;
    /**
     * Gets properties of a guest operating system family that can be specified in the XML service
     * configuration (.cscfg) for a cloud service.
     * @param location Name of the location that the OS family pertains to.
     * @param osFamilyName Name of the OS family.
     * @param options The options parameters.
     */
    getOSFamily(location: string, osFamilyName: string, options?: CloudServiceOperatingSystemsGetOSFamilyOptionalParams): Promise<CloudServiceOperatingSystemsGetOSFamilyResponse>;
}

/** Optional parameters. */
export declare interface CloudServiceOperatingSystemsGetOSFamilyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getOSFamily operation. */
export declare type CloudServiceOperatingSystemsGetOSFamilyResponse = OSFamily;

/** Optional parameters. */
export declare interface CloudServiceOperatingSystemsGetOSVersionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getOSVersion operation. */
export declare type CloudServiceOperatingSystemsGetOSVersionResponse = OSVersion;

/** Optional parameters. */
export declare interface CloudServiceOperatingSystemsListOSFamiliesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOSFamiliesNext operation. */
export declare type CloudServiceOperatingSystemsListOSFamiliesNextResponse = OSFamilyListResult;

/** Optional parameters. */
export declare interface CloudServiceOperatingSystemsListOSFamiliesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOSFamilies operation. */
export declare type CloudServiceOperatingSystemsListOSFamiliesResponse = OSFamilyListResult;

/** Optional parameters. */
export declare interface CloudServiceOperatingSystemsListOSVersionsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOSVersionsNext operation. */
export declare type CloudServiceOperatingSystemsListOSVersionsNextResponse = OSVersionListResult;

/** Optional parameters. */
export declare interface CloudServiceOperatingSystemsListOSVersionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOSVersions operation. */
export declare type CloudServiceOperatingSystemsListOSVersionsResponse = OSVersionListResult;

/** Describes the OS profile for the cloud service. */
export declare interface CloudServiceOsProfile {
    /** Specifies set of certificates that should be installed onto the role instances. */
    secrets?: CloudServiceVaultSecretGroup[];
}

/** Cloud service properties */
export declare interface CloudServiceProperties {
    /**
     * Specifies a URL that refers to the location of the service package in the Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage account.
     * This is a write-only property and is not returned in GET calls.
     */
    packageUrl?: string;
    /** Specifies the XML service configuration (.cscfg) for the cloud service. */
    configuration?: string;
    /**
     * Specifies a URL that refers to the location of the service configuration in the Blob service. The service package URL  can be Shared Access Signature (SAS) URI from any storage account.
     * This is a write-only property and is not returned in GET calls.
     */
    configurationUrl?: string;
    /**
     * (Optional) Indicates whether to start the cloud service immediately after it is created. The default value is `true`.
     * If false, the service model is still deployed, but the code is not run immediately. Instead, the service is PoweredOff until you call Start, at which time the service will be started. A deployed service still incurs charges, even if it is poweredoff.
     */
    startCloudService?: boolean;
    /**
     * (Optional) Indicates whether the role sku properties (roleProfile.roles.sku) specified in the model/template should override the role instance count and vm size specified in the .cscfg and .csdef respectively.
     * The default value is `false`.
     */
    allowModelOverride?: boolean;
    /**
     * Update mode for the cloud service. Role instances are allocated to update domains when the service is deployed. Updates can be initiated manually in each update domain or initiated automatically in all update domains.
     * Possible Values are <br /><br />**Auto**<br /><br />**Manual** <br /><br />**Simultaneous**<br /><br />
     * If not specified, the default value is Auto. If set to Manual, PUT UpdateDomain must be called to apply the update. If set to Auto, the update is automatically applied to each update domain in sequence.
     */
    upgradeMode?: CloudServiceUpgradeMode;
    /** Describes the role profile for the cloud service. */
    roleProfile?: CloudServiceRoleProfile;
    /** Describes the OS profile for the cloud service. */
    osProfile?: CloudServiceOsProfile;
    /** Network Profile for the cloud service. */
    networkProfile?: CloudServiceNetworkProfile;
    /** Describes a cloud service extension profile. */
    extensionProfile?: CloudServiceExtensionProfile;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique identifier for the cloud service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueId?: string;
}

/** Describes a role of the cloud service. */
export declare interface CloudServiceRole {
    /**
     * Resource id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Resource location
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /** Describes the cloud service role sku. */
    sku?: CloudServiceRoleSku;
    /** The cloud service role properties. */
    properties?: CloudServiceRoleProperties;
}

/** Interface representing a CloudServiceRoleInstances. */
export declare interface CloudServiceRoleInstances {
    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get
     * the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRoleInstancesListOptionalParams): PagedAsyncIterableIterator<RoleInstance>;
    /**
     * Deletes a role instance from a cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginDelete(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRoleInstancesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a role instance from a cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginDeleteAndWait(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRoleInstancesDeleteOptionalParams): Promise<void>;
    /**
     * Gets a role instance from a cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    get(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRoleInstancesGetOptionalParams): Promise<CloudServiceRoleInstancesGetResponse>;
    /**
     * Retrieves information about the run-time state of a role instance in a cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    getInstanceView(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRoleInstancesGetInstanceViewOptionalParams): Promise<CloudServiceRoleInstancesGetInstanceViewResponse>;
    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud
     * service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginRestart(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRoleInstancesRestartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud
     * service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginRestartAndWait(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRoleInstancesRestartOptionalParams): Promise<void>;
    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web
     * roles or worker roles.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginReimage(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRoleInstancesReimageOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web
     * roles or worker roles.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginReimageAndWait(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRoleInstancesReimageOptionalParams): Promise<void>;
    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web
     * roles or worker roles and initializes the storage resources that are used by them. If you do not
     * want to initialize storage resources, you can use Reimage Role Instance.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginRebuild(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRoleInstancesRebuildOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web
     * roles or worker roles and initializes the storage resources that are used by them. If you do not
     * want to initialize storage resources, you can use Reimage Role Instance.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginRebuildAndWait(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRoleInstancesRebuildOptionalParams): Promise<void>;
    /**
     * Gets a remote desktop file for a role instance in a cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    getRemoteDesktopFile(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRoleInstancesGetRemoteDesktopFileOptionalParams): Promise<CloudServiceRoleInstancesGetRemoteDesktopFileResponse>;
}

/** Optional parameters. */
export declare interface CloudServiceRoleInstancesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CloudServiceRoleInstancesGetInstanceViewOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getInstanceView operation. */
export declare type CloudServiceRoleInstancesGetInstanceViewResponse = RoleInstanceView;

/** Optional parameters. */
export declare interface CloudServiceRoleInstancesGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply to the operation. 'UserData' is not supported for cloud services. */
    expand?: InstanceViewTypes;
}

/** Optional parameters. */
export declare interface CloudServiceRoleInstancesGetRemoteDesktopFileOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getRemoteDesktopFile operation. */
export declare type CloudServiceRoleInstancesGetRemoteDesktopFileResponse = {
    /**
     * BROWSER ONLY
     *
     * The response body as a browser Blob.
     * Always `undefined` in node.js.
     */
    blobBody?: Promise<Blob>;
    /**
     * NODEJS ONLY
     *
     * The response body as a node.js Readable stream.
     * Always `undefined` in the browser.
     */
    readableStreamBody?: NodeJS.ReadableStream;
};

/** Contains response data for the get operation. */
export declare type CloudServiceRoleInstancesGetResponse = RoleInstance;

/** Optional parameters. */
export declare interface CloudServiceRoleInstancesListNextOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply to the operation. 'UserData' is not supported for cloud services. */
    expand?: InstanceViewTypes;
}

/** Contains response data for the listNext operation. */
export declare type CloudServiceRoleInstancesListNextResponse = RoleInstanceListResult;

/** Optional parameters. */
export declare interface CloudServiceRoleInstancesListOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply to the operation. 'UserData' is not supported for cloud services. */
    expand?: InstanceViewTypes;
}

/** Contains response data for the list operation. */
export declare type CloudServiceRoleInstancesListResponse = RoleInstanceListResult;

/** Optional parameters. */
export declare interface CloudServiceRoleInstancesRebuildOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CloudServiceRoleInstancesReimageOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CloudServiceRoleInstancesRestartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** The list operation result. */
export declare interface CloudServiceRoleListResult {
    /** The list of resources. */
    value: CloudServiceRole[];
    /** The URI to fetch the next page of resources. Use this to get the next page of resources. Do this till nextLink is null to fetch all the resources. */
    nextLink?: string;
}

/** Describes the role profile for the cloud service. */
export declare interface CloudServiceRoleProfile {
    /** List of roles for the cloud service. */
    roles?: CloudServiceRoleProfileProperties[];
}

/** Describes the role properties. */
export declare interface CloudServiceRoleProfileProperties {
    /** Resource name. */
    name?: string;
    /** Describes the cloud service role sku. */
    sku?: CloudServiceRoleSku;
}

/** The cloud service role properties. */
export declare interface CloudServiceRoleProperties {
    /**
     * Specifies the ID which uniquely identifies a cloud service role.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueId?: string;
}

/** Interface representing a CloudServiceRoles. */
export declare interface CloudServiceRoles {
    /**
     * Gets a list of all roles in a cloud service. Use nextLink property in the response to get the next
     * page of roles. Do this till nextLink is null to fetch all the roles.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRolesListOptionalParams): PagedAsyncIterableIterator<CloudServiceRole>;
    /**
     * Gets a role from a cloud service.
     * @param roleName Name of the role.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    get(roleName: string, resourceGroupName: string, cloudServiceName: string, options?: CloudServiceRolesGetOptionalParams): Promise<CloudServiceRolesGetResponse>;
}

/** Optional parameters. */
export declare interface CloudServiceRolesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CloudServiceRolesGetResponse = CloudServiceRole;

/** Describes the cloud service role sku. */
export declare interface CloudServiceRoleSku {
    /** The sku name. NOTE: If the new SKU is not supported on the hardware the cloud service is currently on, you need to delete and recreate the cloud service or move back to the old sku. */
    name?: string;
    /** Specifies the tier of the cloud service. Possible Values are <br /><br /> **Standard** <br /><br /> **Basic** */
    tier?: string;
    /** Specifies the number of role instances in the cloud service. */
    capacity?: number;
}

/** Optional parameters. */
export declare interface CloudServiceRolesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type CloudServiceRolesListNextResponse = CloudServiceRoleListResult;

/** Optional parameters. */
export declare interface CloudServiceRolesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type CloudServiceRolesListResponse = CloudServiceRoleListResult;

/** Interface representing a CloudServices. */
export declare interface CloudServices {
    /**
     * Gets a list of all cloud services in the subscription, regardless of the associated resource group.
     * Use nextLink property in the response to get the next page of Cloud Services. Do this till nextLink
     * is null to fetch all the Cloud Services.
     * @param options The options parameters.
     */
    listAll(options?: CloudServicesListAllOptionalParams): PagedAsyncIterableIterator<CloudService>;
    /**
     * Gets a list of all cloud services under a resource group. Use nextLink property in the response to
     * get the next page of Cloud Services. Do this till nextLink is null to fetch all the Cloud Services.
     * @param resourceGroupName Name of the resource group.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: CloudServicesListOptionalParams): PagedAsyncIterableIterator<CloudService>;
    /**
     * Create or update a cloud service. Please note some properties can be set only during cloud service
     * creation.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<CloudServicesCreateOrUpdateResponse>, CloudServicesCreateOrUpdateResponse>>;
    /**
     * Create or update a cloud service. Please note some properties can be set only during cloud service
     * creation.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesCreateOrUpdateOptionalParams): Promise<CloudServicesCreateOrUpdateResponse>;
    /**
     * Update a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesUpdateOptionalParams): Promise<PollerLike<PollOperationState<CloudServicesUpdateResponse>, CloudServicesUpdateResponse>>;
    /**
     * Update a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesUpdateOptionalParams): Promise<CloudServicesUpdateResponse>;
    /**
     * Deletes a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesDeleteOptionalParams): Promise<void>;
    /**
     * Display information about a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesGetOptionalParams): Promise<CloudServicesGetResponse>;
    /**
     * Gets the status of a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    getInstanceView(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesGetInstanceViewOptionalParams): Promise<CloudServicesGetInstanceViewResponse>;
    /**
     * Starts the cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Starts the cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesStartOptionalParams): Promise<void>;
    /**
     * Power off the cloud service. Note that resources are still attached and you are getting charged for
     * the resources.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginPowerOff(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesPowerOffOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Power off the cloud service. Note that resources are still attached and you are getting charged for
     * the resources.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginPowerOffAndWait(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesPowerOffOptionalParams): Promise<void>;
    /**
     * Restarts one or more role instances in a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesRestartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Restarts one or more role instances in a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesRestartOptionalParams): Promise<void>;
    /**
     * Reimage asynchronous operation reinstalls the operating system on instances of web roles or worker
     * roles.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginReimage(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesReimageOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Reimage asynchronous operation reinstalls the operating system on instances of web roles or worker
     * roles.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginReimageAndWait(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesReimageOptionalParams): Promise<void>;
    /**
     * Rebuild Role Instances reinstalls the operating system on instances of web roles or worker roles and
     * initializes the storage resources that are used by them. If you do not want to initialize storage
     * resources, you can use Reimage Role Instances.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginRebuild(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesRebuildOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Rebuild Role Instances reinstalls the operating system on instances of web roles or worker roles and
     * initializes the storage resources that are used by them. If you do not want to initialize storage
     * resources, you can use Reimage Role Instances.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginRebuildAndWait(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesRebuildOptionalParams): Promise<void>;
    /**
     * Deletes role instances in a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginDeleteInstances(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesDeleteInstancesOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes role instances in a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    beginDeleteInstancesAndWait(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesDeleteInstancesOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface CloudServicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** The cloud service object. */
    parameters?: CloudService;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CloudServicesCreateOrUpdateResponse = CloudService;

/** Optional parameters. */
export declare interface CloudServicesDeleteInstancesOptionalParams extends coreClient.OperationOptions {
    /** List of cloud service role instance names. */
    parameters?: RoleInstances;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CloudServicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CloudServicesGetInstanceViewOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getInstanceView operation. */
export declare type CloudServicesGetInstanceViewResponse = CloudServiceInstanceView;

/** Optional parameters. */
export declare interface CloudServicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CloudServicesGetResponse = CloudService;

/** Optional parameters. */
export declare interface CloudServicesListAllNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAllNext operation. */
export declare type CloudServicesListAllNextResponse = CloudServiceListResult;

/** Optional parameters. */
export declare interface CloudServicesListAllOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAll operation. */
export declare type CloudServicesListAllResponse = CloudServiceListResult;

/** Optional parameters. */
export declare interface CloudServicesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type CloudServicesListNextResponse = CloudServiceListResult;

/** Optional parameters. */
export declare interface CloudServicesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type CloudServicesListResponse = CloudServiceListResult;

/**
 * Defines values for CloudServiceSlotType. \
 * {@link KnownCloudServiceSlotType} can be used interchangeably with CloudServiceSlotType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Production** \
 * **Staging**
 */
export declare type CloudServiceSlotType = string;

/** Optional parameters. */
export declare interface CloudServicesPowerOffOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CloudServicesRebuildOptionalParams extends coreClient.OperationOptions {
    /** List of cloud service role instance names. */
    parameters?: RoleInstances;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CloudServicesReimageOptionalParams extends coreClient.OperationOptions {
    /** List of cloud service role instance names. */
    parameters?: RoleInstances;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CloudServicesRestartOptionalParams extends coreClient.OperationOptions {
    /** List of cloud service role instance names. */
    parameters?: RoleInstances;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CloudServicesStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Interface representing a CloudServicesUpdateDomain. */
export declare interface CloudServicesUpdateDomain {
    /**
     * Gets a list of all update domains in a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The options parameters.
     */
    listUpdateDomains(resourceGroupName: string, cloudServiceName: string, options?: CloudServicesUpdateDomainListUpdateDomainsOptionalParams): PagedAsyncIterableIterator<UpdateDomain>;
    /**
     * Updates the role instances in the specified update domain.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are
     *                     identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of
     *                     1, and so on.
     * @param options The options parameters.
     */
    beginWalkUpdateDomain(resourceGroupName: string, cloudServiceName: string, updateDomain: number, options?: CloudServicesUpdateDomainWalkUpdateDomainOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Updates the role instances in the specified update domain.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are
     *                     identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of
     *                     1, and so on.
     * @param options The options parameters.
     */
    beginWalkUpdateDomainAndWait(resourceGroupName: string, cloudServiceName: string, updateDomain: number, options?: CloudServicesUpdateDomainWalkUpdateDomainOptionalParams): Promise<void>;
    /**
     * Gets the specified update domain of a cloud service. Use nextLink property in the response to get
     * the next page of update domains. Do this till nextLink is null to fetch all the update domains.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are
     *                     identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of
     *                     1, and so on.
     * @param options The options parameters.
     */
    getUpdateDomain(resourceGroupName: string, cloudServiceName: string, updateDomain: number, options?: CloudServicesUpdateDomainGetUpdateDomainOptionalParams): Promise<CloudServicesUpdateDomainGetUpdateDomainResponse>;
}

/** Optional parameters. */
export declare interface CloudServicesUpdateDomainGetUpdateDomainOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getUpdateDomain operation. */
export declare type CloudServicesUpdateDomainGetUpdateDomainResponse = UpdateDomain;

/** Optional parameters. */
export declare interface CloudServicesUpdateDomainListUpdateDomainsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listUpdateDomainsNext operation. */
export declare type CloudServicesUpdateDomainListUpdateDomainsNextResponse = UpdateDomainListResult;

/** Optional parameters. */
export declare interface CloudServicesUpdateDomainListUpdateDomainsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listUpdateDomains operation. */
export declare type CloudServicesUpdateDomainListUpdateDomainsResponse = UpdateDomainListResult;

/** Optional parameters. */
export declare interface CloudServicesUpdateDomainWalkUpdateDomainOptionalParams extends coreClient.OperationOptions {
    /** The update domain object. */
    parameters?: UpdateDomain;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CloudServicesUpdateOptionalParams extends coreClient.OperationOptions {
    /** The cloud service object. */
    parameters?: CloudServiceUpdate;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type CloudServicesUpdateResponse = CloudService;

export declare interface CloudServiceUpdate {
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/**
 * Defines values for CloudServiceUpgradeMode. \
 * {@link KnownCloudServiceUpgradeMode} can be used interchangeably with CloudServiceUpgradeMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Auto** \
 * **Manual** \
 * **Simultaneous**
 */
export declare type CloudServiceUpgradeMode = string;

/** Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance. */
export declare interface CloudServiceVaultAndSecretReference {
    /** The ARM Resource ID of the Key Vault */
    sourceVault?: SubResource;
    /** Secret URL which contains the protected settings of the extension */
    secretUrl?: string;
}

/** Describes a single certificate reference in a Key Vault, and where the certificate should reside on the role instance. */
export declare interface CloudServiceVaultCertificate {
    /** This is the URL of a certificate that has been uploaded to Key Vault as a secret. */
    certificateUrl?: string;
}

/** Describes a set of certificates which are all in the same Key Vault. */
export declare interface CloudServiceVaultSecretGroup {
    /** The relative URL of the Key Vault containing all of the certificates in VaultCertificates. */
    sourceVault?: SubResource;
    /** The list of key vault references in SourceVault which contain certificates. */
    vaultCertificates?: CloudServiceVaultCertificate[];
}

/** Interface representing a CommunityGalleries. */
export declare interface CommunityGalleries {
    /**
     * Get a community gallery by gallery public name.
     * @param location Resource location.
     * @param publicGalleryName The public name of the community gallery.
     * @param options The options parameters.
     */
    get(location: string, publicGalleryName: string, options?: CommunityGalleriesGetOptionalParams): Promise<CommunityGalleriesGetResponse>;
}

/** Optional parameters. */
export declare interface CommunityGalleriesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CommunityGalleriesGetResponse = CommunityGallery;

/** Specifies information about the Community Gallery that you want to create or update. */
export declare interface CommunityGallery extends PirCommunityGalleryResource {
}

/** Specifies information about the gallery image definition that you want to create or update. */
export declare interface CommunityGalleryImage extends PirCommunityGalleryResource {
    /** This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux** */
    osType?: OperatingSystemTypes;
    /** This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'. */
    osState?: OperatingSystemStateTypes;
    /** The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. */
    endOfLifeDate?: Date;
    /** This is the gallery image definition identifier. */
    identifier?: GalleryImageIdentifier;
    /** The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. */
    recommended?: RecommendedMachineConfiguration;
    /** Describes the disallowed disk types. */
    disallowed?: Disallowed;
    /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
    hyperVGeneration?: HyperVGeneration;
    /** A list of gallery image features. */
    features?: GalleryImageFeature[];
    /** Describes the gallery image definition purchase plan. This is used by marketplace images. */
    purchasePlan?: ImagePurchasePlan;
    /** The architecture of the image. Applicable to OS disks only. */
    architecture?: Architecture;
    /** Privacy statement uri for the current community gallery image. */
    privacyStatementUri?: string;
    /** End-user license agreement for the current community gallery image. */
    eula?: string;
}

/** The List Community Gallery Images operation response. */
export declare interface CommunityGalleryImageList {
    /** A list of community gallery images. */
    value: CommunityGalleryImage[];
    /** The uri to fetch the next page of community gallery images. Call ListNext() with this to fetch the next page of community gallery images. */
    nextLink?: string;
}

/** Interface representing a CommunityGalleryImages. */
export declare interface CommunityGalleryImages {
    /**
     * List community gallery images inside a gallery.
     * @param location Resource location.
     * @param publicGalleryName The public name of the community gallery.
     * @param options The options parameters.
     */
    list(location: string, publicGalleryName: string, options?: CommunityGalleryImagesListOptionalParams): PagedAsyncIterableIterator<CommunityGalleryImage>;
    /**
     * Get a community gallery image.
     * @param location Resource location.
     * @param publicGalleryName The public name of the community gallery.
     * @param galleryImageName The name of the community gallery image definition.
     * @param options The options parameters.
     */
    get(location: string, publicGalleryName: string, galleryImageName: string, options?: CommunityGalleryImagesGetOptionalParams): Promise<CommunityGalleryImagesGetResponse>;
}

/** Optional parameters. */
export declare interface CommunityGalleryImagesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CommunityGalleryImagesGetResponse = CommunityGalleryImage;

/** Optional parameters. */
export declare interface CommunityGalleryImagesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type CommunityGalleryImagesListNextResponse = CommunityGalleryImageList;

/** Optional parameters. */
export declare interface CommunityGalleryImagesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type CommunityGalleryImagesListResponse = CommunityGalleryImageList;

/** Specifies information about the gallery image version that you want to create or update. */
export declare interface CommunityGalleryImageVersion extends PirCommunityGalleryResource {
    /** The published date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. */
    publishedDate?: Date;
    /** The end of life date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. */
    endOfLifeDate?: Date;
    /** If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version. */
    excludeFromLatest?: boolean;
    /** Describes the storage profile of the image version. */
    storageProfile?: SharedGalleryImageVersionStorageProfile;
}

/** The List Community Gallery Image versions operation response. */
export declare interface CommunityGalleryImageVersionList {
    /** A list of community gallery image versions. */
    value: CommunityGalleryImageVersion[];
    /** The uri to fetch the next page of community gallery image versions. Call ListNext() with this to fetch the next page of community gallery image versions. */
    nextLink?: string;
}

/** Interface representing a CommunityGalleryImageVersions. */
export declare interface CommunityGalleryImageVersions {
    /**
     * List community gallery image versions inside an image.
     * @param location Resource location.
     * @param publicGalleryName The public name of the community gallery.
     * @param galleryImageName The name of the community gallery image definition.
     * @param options The options parameters.
     */
    list(location: string, publicGalleryName: string, galleryImageName: string, options?: CommunityGalleryImageVersionsListOptionalParams): PagedAsyncIterableIterator<CommunityGalleryImageVersion>;
    /**
     * Get a community gallery image version.
     * @param location Resource location.
     * @param publicGalleryName The public name of the community gallery.
     * @param galleryImageName The name of the community gallery image definition.
     * @param galleryImageVersionName The name of the community gallery image version. Needs to follow
     *                                semantic version name pattern: The allowed characters are digit and period. Digits must be within
     *                                the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param options The options parameters.
     */
    get(location: string, publicGalleryName: string, galleryImageName: string, galleryImageVersionName: string, options?: CommunityGalleryImageVersionsGetOptionalParams): Promise<CommunityGalleryImageVersionsGetResponse>;
}

/** Optional parameters. */
export declare interface CommunityGalleryImageVersionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CommunityGalleryImageVersionsGetResponse = CommunityGalleryImageVersion;

/** Optional parameters. */
export declare interface CommunityGalleryImageVersionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type CommunityGalleryImageVersionsListNextResponse = CommunityGalleryImageVersionList;

/** Optional parameters. */
export declare interface CommunityGalleryImageVersionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type CommunityGalleryImageVersionsListResponse = CommunityGalleryImageVersionList;

/** Information of community gallery if current gallery is shared to community */
export declare interface CommunityGalleryInfo {
    /** The link to the publisher website. Visible to all users. */
    publisherUri?: string;
    /** Community gallery publisher support email. The email address of the publisher. Visible to all users. */
    publisherContact?: string;
    /** End-user license agreement for community gallery image. */
    eula?: string;
    /** The prefix of the gallery name that will be displayed publicly. Visible to all users. */
    publicNamePrefix?: string;
    /**
     * Contains info about whether community gallery sharing is enabled.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly communityGalleryEnabled?: boolean;
    /**
     * Community gallery public name list.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicNames?: string[];
}

export declare class ComputeManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the ComputeManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.
     *                       The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ComputeManagementClientOptionalParams);
    operations: Operations;
    usageOperations: UsageOperations;
    virtualMachineSizes: VirtualMachineSizes;
    virtualMachineScaleSets: VirtualMachineScaleSets;
    virtualMachineScaleSetExtensions: VirtualMachineScaleSetExtensions;
    virtualMachineScaleSetRollingUpgrades: VirtualMachineScaleSetRollingUpgrades;
    virtualMachineScaleSetVMExtensions: VirtualMachineScaleSetVMExtensions;
    virtualMachineScaleSetVMs: VirtualMachineScaleSetVMs;
    virtualMachineExtensions: VirtualMachineExtensions;
    virtualMachines: VirtualMachines;
    virtualMachineImages: VirtualMachineImages;
    virtualMachineImagesEdgeZone: VirtualMachineImagesEdgeZone;
    virtualMachineExtensionImages: VirtualMachineExtensionImages;
    availabilitySets: AvailabilitySets;
    proximityPlacementGroups: ProximityPlacementGroups;
    dedicatedHostGroups: DedicatedHostGroups;
    dedicatedHosts: DedicatedHosts;
    sshPublicKeys: SshPublicKeys;
    images: Images;
    restorePointCollections: RestorePointCollections;
    restorePoints: RestorePoints;
    capacityReservationGroups: CapacityReservationGroups;
    capacityReservations: CapacityReservations;
    logAnalytics: LogAnalytics;
    virtualMachineRunCommands: VirtualMachineRunCommands;
    virtualMachineScaleSetVMRunCommands: VirtualMachineScaleSetVMRunCommands;
    disks: Disks;
    diskAccesses: DiskAccesses;
    diskEncryptionSets: DiskEncryptionSets;
    diskRestorePointOperations: DiskRestorePointOperations;
    snapshots: Snapshots;
    resourceSkus: ResourceSkus;
    galleries: Galleries;
    galleryImages: GalleryImages;
    galleryImageVersions: GalleryImageVersions;
    galleryApplications: GalleryApplications;
    galleryApplicationVersions: GalleryApplicationVersions;
    gallerySharingProfile: GallerySharingProfile;
    sharedGalleries: SharedGalleries;
    sharedGalleryImages: SharedGalleryImages;
    sharedGalleryImageVersions: SharedGalleryImageVersions;
    communityGalleries: CommunityGalleries;
    communityGalleryImages: CommunityGalleryImages;
    communityGalleryImageVersions: CommunityGalleryImageVersions;
    cloudServiceRoleInstances: CloudServiceRoleInstances;
    cloudServiceRoles: CloudServiceRoles;
    cloudServices: CloudServices;
    cloudServicesUpdateDomain: CloudServicesUpdateDomain;
    cloudServiceOperatingSystems: CloudServiceOperatingSystems;
}

/** Optional parameters. */
export declare interface ComputeManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** The List Compute Operation operation response. */
export declare interface ComputeOperationListResult {
    /**
     * The list of compute operations
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ComputeOperationValue[];
}

/** Describes the properties of a Compute Operation value. */
export declare interface ComputeOperationValue {
    /**
     * The origin of the compute operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: string;
    /**
     * The name of the compute operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The display name of the compute operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * The display name of the resource the operation applies to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * The description of the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * The resource provider for the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
}

/**
 * Defines values for ConfidentialVMEncryptionType. \
 * {@link KnownConfidentialVMEncryptionType} can be used interchangeably with ConfidentialVMEncryptionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EncryptedVMGuestStateOnlyWithPmk** \
 * **EncryptedWithPmk** \
 * **EncryptedWithCmk**
 */
export declare type ConfidentialVMEncryptionType = string;

/**
 * Defines values for ConsistencyModeTypes. \
 * {@link KnownConsistencyModeTypes} can be used interchangeably with ConsistencyModeTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CrashConsistent** \
 * **FileSystemConsistent** \
 * **ApplicationConsistent**
 */
export declare type ConsistencyModeTypes = string;

/** Indicates the error details if the background copy of a resource created via the CopyStart operation fails. */
export declare interface CopyCompletionError {
    /** Indicates the error code if the background copy of a resource created via the CopyStart operation fails. */
    errorCode: CopyCompletionErrorReason;
    /** Indicates the error message if the background copy of a resource created via the CopyStart operation fails. */
    errorMessage: string;
}

/**
 * Defines values for CopyCompletionErrorReason. \
 * {@link KnownCopyCompletionErrorReason} can be used interchangeably with CopyCompletionErrorReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CopySourceNotFound**: Indicates that the source snapshot was deleted while the background copy of the resource created via CopyStart operation was in progress.
 */
export declare type CopyCompletionErrorReason = string;

/** Data used when creating a disk. */
export declare interface CreationData {
    /** This enumerates the possible sources of a disk's creation. */
    createOption: DiskCreateOption;
    /** Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk. */
    storageAccountId?: string;
    /** Disk source information for PIR or user images. */
    imageReference?: ImageDiskReference;
    /** Required if creating from a Gallery Image. The id/sharedGalleryImageId/communityGalleryImageId of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk. */
    galleryImageReference?: ImageDiskReference;
    /** If createOption is Import, this is the URI of a blob to be imported into a managed disk. */
    sourceUri?: string;
    /** If createOption is Copy, this is the ARM id of the source snapshot or disk. */
    sourceResourceId?: string;
    /**
     * If this field is set, this is the unique id identifying the source of this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceUniqueId?: string;
    /** If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer). */
    uploadSizeBytes?: number;
    /** Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default. */
    logicalSectorSize?: number;
    /** If createOption is ImportSecure, this is the URI of a blob to be imported into VM guest state. */
    securityDataUri?: string;
    /** Set this flag to true to get a boost on the performance target of the disk deployed, see here on the respective performance target. This flag can only be set on disk creation time and cannot be disabled after enabled. */
    performancePlus?: boolean;
}

/**
 * Defines values for DataAccessAuthMode. \
 * {@link KnownDataAccessAuthMode} can be used interchangeably with DataAccessAuthMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureActiveDirectory**: When export\/upload URL is used, the system checks if the user has an identity in Azure Active Directory and has necessary permissions to export\/upload the data. Please refer to aka.ms\/DisksAzureADAuth. \
 * **None**: No additional authentication would be performed when accessing export\/upload URL.
 */
export declare type DataAccessAuthMode = string;

/** Describes a data disk. */
export declare interface DataDisk {
    /** Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. */
    lun: number;
    /** The disk name. */
    name?: string;
    /** The virtual hard disk. */
    vhd?: VirtualHardDisk;
    /** The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist. */
    image?: VirtualHardDisk;
    /** Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage** */
    caching?: CachingTypes;
    /** Specifies whether writeAccelerator should be enabled or disabled on the disk. */
    writeAcceleratorEnabled?: boolean;
    /** Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described. */
    createOption: DiskCreateOptionTypes;
    /** Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023 */
    diskSizeGB?: number;
    /** The managed disk parameters. */
    managedDisk?: ManagedDiskParameters;
    /** Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset */
    toBeDetached?: boolean;
    /**
     * Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly diskIopsReadWrite?: number;
    /**
     * Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly diskMBpsReadWrite?: number;
    /** Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported values: **ForceDetach**. <br><br> detachOption: **ForceDetach** is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected failure from the virtual machine and the disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed when using this detach behavior. <br><br> This feature is still in preview mode and is not supported for VirtualMachineScaleSet. To force-detach a data disk update toBeDetached to 'true' along with setting detachOption: 'ForceDetach'. */
    detachOption?: DiskDetachOptionTypes;
    /** Specifies whether data disk should be deleted or detached upon VM deletion.<br><br> Possible values: <br><br> **Delete** If this value is used, the data disk is deleted when VM is deleted.<br><br> **Detach** If this value is used, the data disk is retained after VM is deleted.<br><br> The default value is set to **detach** */
    deleteOption?: DiskDeleteOptionTypes;
}

/** Contains the data disk images information. */
export declare interface DataDiskImage {
    /**
     * Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lun?: number;
}

/** Contains encryption settings for a data disk image. */
export declare interface DataDiskImageEncryption extends DiskImageEncryption {
    /** This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine. */
    lun: number;
}

/** Specifies information about the Dedicated host. */
export declare interface DedicatedHost extends Resource {
    /** SKU of the dedicated host for Hardware Generation and VM family. Only name is required to be set. List Microsoft.Compute SKUs for a list of possible values. */
    sku: Sku;
    /** Fault domain of the dedicated host within a dedicated host group. */
    platformFaultDomain?: number;
    /** Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided. */
    autoReplaceOnFailure?: boolean;
    /**
     * A unique id generated and assigned to the dedicated host by the platform. <br><br> Does not change throughout the lifetime of the host.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostId?: string;
    /**
     * A list of references to all virtual machines in the Dedicated Host.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly virtualMachines?: SubResourceReadOnly[];
    /** Specifies the software license type that will be applied to the VMs deployed on the dedicated host. <br><br> Possible values are: <br><br> **None** <br><br> **Windows_Server_Hybrid** <br><br> **Windows_Server_Perpetual** <br><br> Default: **None** */
    licenseType?: DedicatedHostLicenseTypes;
    /**
     * The date when the host was first provisioned.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningTime?: Date;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The dedicated host instance view.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: DedicatedHostInstanceView;
    /**
     * Specifies the time at which the Dedicated Host resource was created.<br><br>Minimum api-version: 2021-11-01.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeCreated?: Date;
}

/** Represents the dedicated host unutilized capacity in terms of a specific VM size. */
export declare interface DedicatedHostAllocatableVM {
    /** VM size in terms of which the unutilized capacity is represented. */
    vmSize?: string;
    /** Maximum number of VMs of size vmSize that can fit in the dedicated host's remaining capacity. */
    count?: number;
}

/** Dedicated host unutilized capacity. */
export declare interface DedicatedHostAvailableCapacity {
    /** The unutilized capacity of the dedicated host represented in terms of each VM size that is allowed to be deployed to the dedicated host. */
    allocatableVMs?: DedicatedHostAllocatableVM[];
}

/** Specifies information about the dedicated host group that the dedicated hosts should be assigned to. <br><br> Currently, a dedicated host can only be added to a dedicated host group at creation time. An existing dedicated host cannot be added to another dedicated host group. */
export declare interface DedicatedHostGroup extends Resource {
    /** Availability Zone to use for this host group. Only single zone is supported. The zone can be assigned only during creation. If not provided, the group supports all zones in the region. If provided, enforces each host in the group to be in the same zone. */
    zones?: string[];
    /** Number of fault domains that the host group can span. */
    platformFaultDomainCount?: number;
    /**
     * A list of references to all dedicated hosts in the dedicated host group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hosts?: SubResourceReadOnly[];
    /**
     * The dedicated host group instance view, which has the list of instance view of the dedicated hosts under the dedicated host group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: DedicatedHostGroupInstanceView;
    /** Specifies whether virtual machines or virtual machine scale sets can be placed automatically on the dedicated host group. Automatic placement means resources are allocated on dedicated hosts, that are chosen by Azure, under the dedicated host group. The value is defaulted to 'false' when not provided. <br><br>Minimum api-version: 2020-06-01. */
    supportAutomaticPlacement?: boolean;
    /** Enables or disables a capability on the dedicated host group.<br><br>Minimum api-version: 2022-03-01. */
    additionalCapabilities?: DedicatedHostGroupPropertiesAdditionalCapabilities;
}

export declare interface DedicatedHostGroupInstanceView {
    /** List of instance view of the dedicated hosts under the dedicated host group. */
    hosts?: DedicatedHostInstanceViewWithName[];
}

/** The List Dedicated Host Group with resource group response. */
export declare interface DedicatedHostGroupListResult {
    /** The list of dedicated host groups */
    value: DedicatedHostGroup[];
    /** The URI to fetch the next page of Dedicated Host Groups. Call ListNext() with this URI to fetch the next page of Dedicated Host Groups. */
    nextLink?: string;
}

/** Enables or disables a capability on the dedicated host group.<br><br>Minimum api-version: 2022-03-01. */
export declare interface DedicatedHostGroupPropertiesAdditionalCapabilities {
    /** The flag that enables or disables a capability to have UltraSSD Enabled Virtual Machines on Dedicated Hosts of the Dedicated Host Group. For the Virtual Machines to be UltraSSD Enabled, UltraSSDEnabled flag for the resource needs to be set true as well. The value is defaulted to 'false' when not provided. Please refer to https://docs.microsoft.com/en-us/azure/virtual-machines/disks-enable-ultra-ssd for more details on Ultra SSD feature. <br><br>NOTE: The ultraSSDEnabled setting can only be enabled for Host Groups that are created as zonal. <br><br>Minimum api-version: 2022-03-01. */
    ultraSSDEnabled?: boolean;
}

/** Interface representing a DedicatedHostGroups. */
export declare interface DedicatedHostGroups {
    /**
     * Lists all of the dedicated host groups in the specified resource group. Use the nextLink property in
     * the response to get the next page of dedicated host groups.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DedicatedHostGroupsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<DedicatedHostGroup>;
    /**
     * Lists all of the dedicated host groups in the subscription. Use the nextLink property in the
     * response to get the next page of dedicated host groups.
     * @param options The options parameters.
     */
    listBySubscription(options?: DedicatedHostGroupsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<DedicatedHostGroup>;
    /**
     * Create or update a dedicated host group. For details of Dedicated Host and Dedicated Host Groups
     * please see [Dedicated Host Documentation] (https://go.microsoft.com/fwlink/?linkid=2082596)
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param parameters Parameters supplied to the Create Dedicated Host Group.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, hostGroupName: string, parameters: DedicatedHostGroup, options?: DedicatedHostGroupsCreateOrUpdateOptionalParams): Promise<DedicatedHostGroupsCreateOrUpdateResponse>;
    /**
     * Update an dedicated host group.
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param parameters Parameters supplied to the Update Dedicated Host Group operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, hostGroupName: string, parameters: DedicatedHostGroupUpdate, options?: DedicatedHostGroupsUpdateOptionalParams): Promise<DedicatedHostGroupsUpdateResponse>;
    /**
     * Delete a dedicated host group.
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, hostGroupName: string, options?: DedicatedHostGroupsDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves information about a dedicated host group.
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hostGroupName: string, options?: DedicatedHostGroupsGetOptionalParams): Promise<DedicatedHostGroupsGetResponse>;
}

/** Optional parameters. */
export declare interface DedicatedHostGroupsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type DedicatedHostGroupsCreateOrUpdateResponse = DedicatedHostGroup;

/** Optional parameters. */
export declare interface DedicatedHostGroupsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DedicatedHostGroupsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. 'InstanceView' will retrieve the list of instance views of the dedicated hosts under the dedicated host group. 'UserData' is not supported for dedicated host group. */
    expand?: InstanceViewTypes;
}

/** Contains response data for the get operation. */
export declare type DedicatedHostGroupsGetResponse = DedicatedHostGroup;

/** Optional parameters. */
export declare interface DedicatedHostGroupsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type DedicatedHostGroupsListByResourceGroupNextResponse = DedicatedHostGroupListResult;

/** Optional parameters. */
export declare interface DedicatedHostGroupsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type DedicatedHostGroupsListByResourceGroupResponse = DedicatedHostGroupListResult;

/** Optional parameters. */
export declare interface DedicatedHostGroupsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type DedicatedHostGroupsListBySubscriptionNextResponse = DedicatedHostGroupListResult;

/** Optional parameters. */
export declare interface DedicatedHostGroupsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type DedicatedHostGroupsListBySubscriptionResponse = DedicatedHostGroupListResult;

/** Optional parameters. */
export declare interface DedicatedHostGroupsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type DedicatedHostGroupsUpdateResponse = DedicatedHostGroup;

/** Specifies information about the dedicated host group that the dedicated host should be assigned to. Only tags may be updated. */
export declare interface DedicatedHostGroupUpdate extends UpdateResource {
    /** Availability Zone to use for this host group. Only single zone is supported. The zone can be assigned only during creation. If not provided, the group supports all zones in the region. If provided, enforces each host in the group to be in the same zone. */
    zones?: string[];
    /** Number of fault domains that the host group can span. */
    platformFaultDomainCount?: number;
    /**
     * A list of references to all dedicated hosts in the dedicated host group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hosts?: SubResourceReadOnly[];
    /**
     * The dedicated host group instance view, which has the list of instance view of the dedicated hosts under the dedicated host group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: DedicatedHostGroupInstanceView;
    /** Specifies whether virtual machines or virtual machine scale sets can be placed automatically on the dedicated host group. Automatic placement means resources are allocated on dedicated hosts, that are chosen by Azure, under the dedicated host group. The value is defaulted to 'false' when not provided. <br><br>Minimum api-version: 2020-06-01. */
    supportAutomaticPlacement?: boolean;
    /** Enables or disables a capability on the dedicated host group.<br><br>Minimum api-version: 2022-03-01. */
    additionalCapabilities?: DedicatedHostGroupPropertiesAdditionalCapabilities;
}

/** The instance view of a dedicated host. */
export declare interface DedicatedHostInstanceView {
    /**
     * Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly assetId?: string;
    /** Unutilized capacity of the dedicated host. */
    availableCapacity?: DedicatedHostAvailableCapacity;
    /** The resource status information. */
    statuses?: InstanceViewStatus[];
}

/** The instance view of a dedicated host that includes the name of the dedicated host. It is used for the response to the instance view of a dedicated host group. */
export declare interface DedicatedHostInstanceViewWithName extends DedicatedHostInstanceView {
    /**
     * The name of the dedicated host.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
}

/** Defines values for DedicatedHostLicenseTypes. */
export declare type DedicatedHostLicenseTypes = "None" | "Windows_Server_Hybrid" | "Windows_Server_Perpetual";

/** The list dedicated host operation response. */
export declare interface DedicatedHostListResult {
    /** The list of dedicated hosts */
    value: DedicatedHost[];
    /** The URI to fetch the next page of dedicated hosts. Call ListNext() with this URI to fetch the next page of dedicated hosts. */
    nextLink?: string;
}

/** Interface representing a DedicatedHosts. */
export declare interface DedicatedHosts {
    /**
     * Lists all of the dedicated hosts in the specified dedicated host group. Use the nextLink property in
     * the response to get the next page of dedicated hosts.
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param options The options parameters.
     */
    listByHostGroup(resourceGroupName: string, hostGroupName: string, options?: DedicatedHostsListByHostGroupOptionalParams): PagedAsyncIterableIterator<DedicatedHost>;
    /**
     * Create or update a dedicated host .
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param hostName The name of the dedicated host .
     * @param parameters Parameters supplied to the Create Dedicated Host.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, hostGroupName: string, hostName: string, parameters: DedicatedHost, options?: DedicatedHostsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DedicatedHostsCreateOrUpdateResponse>, DedicatedHostsCreateOrUpdateResponse>>;
    /**
     * Create or update a dedicated host .
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param hostName The name of the dedicated host .
     * @param parameters Parameters supplied to the Create Dedicated Host.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, hostGroupName: string, hostName: string, parameters: DedicatedHost, options?: DedicatedHostsCreateOrUpdateOptionalParams): Promise<DedicatedHostsCreateOrUpdateResponse>;
    /**
     * Update an dedicated host .
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param hostName The name of the dedicated host .
     * @param parameters Parameters supplied to the Update Dedicated Host operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, hostGroupName: string, hostName: string, parameters: DedicatedHostUpdate, options?: DedicatedHostsUpdateOptionalParams): Promise<PollerLike<PollOperationState<DedicatedHostsUpdateResponse>, DedicatedHostsUpdateResponse>>;
    /**
     * Update an dedicated host .
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param hostName The name of the dedicated host .
     * @param parameters Parameters supplied to the Update Dedicated Host operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, hostGroupName: string, hostName: string, parameters: DedicatedHostUpdate, options?: DedicatedHostsUpdateOptionalParams): Promise<DedicatedHostsUpdateResponse>;
    /**
     * Delete a dedicated host.
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param hostName The name of the dedicated host.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, hostGroupName: string, hostName: string, options?: DedicatedHostsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a dedicated host.
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param hostName The name of the dedicated host.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, hostGroupName: string, hostName: string, options?: DedicatedHostsDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves information about a dedicated host.
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param hostName The name of the dedicated host.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hostGroupName: string, hostName: string, options?: DedicatedHostsGetOptionalParams): Promise<DedicatedHostsGetResponse>;
    /**
     * Restart the dedicated host. The operation will complete successfully once the dedicated host has
     * restarted and is running. To determine the health of VMs deployed on the dedicated host after the
     * restart check the Resource Health Center in the Azure Portal. Please refer to
     * https://docs.microsoft.com/azure/service-health/resource-health-overview for more details.
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param hostName The name of the dedicated host.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName: string, hostGroupName: string, hostName: string, options?: DedicatedHostsRestartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Restart the dedicated host. The operation will complete successfully once the dedicated host has
     * restarted and is running. To determine the health of VMs deployed on the dedicated host after the
     * restart check the Resource Health Center in the Azure Portal. Please refer to
     * https://docs.microsoft.com/azure/service-health/resource-health-overview for more details.
     * @param resourceGroupName The name of the resource group.
     * @param hostGroupName The name of the dedicated host group.
     * @param hostName The name of the dedicated host.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName: string, hostGroupName: string, hostName: string, options?: DedicatedHostsRestartOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface DedicatedHostsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DedicatedHostsCreateOrUpdateResponse = DedicatedHost;

/** Optional parameters. */
export declare interface DedicatedHostsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DedicatedHostsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. 'InstanceView' will retrieve the list of instance views of the dedicated host. 'UserData' is not supported for dedicated host. */
    expand?: InstanceViewTypes;
}

/** Contains response data for the get operation. */
export declare type DedicatedHostsGetResponse = DedicatedHost;

/** Optional parameters. */
export declare interface DedicatedHostsListByHostGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHostGroupNext operation. */
export declare type DedicatedHostsListByHostGroupNextResponse = DedicatedHostListResult;

/** Optional parameters. */
export declare interface DedicatedHostsListByHostGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHostGroup operation. */
export declare type DedicatedHostsListByHostGroupResponse = DedicatedHostListResult;

/** Optional parameters. */
export declare interface DedicatedHostsRestartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DedicatedHostsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type DedicatedHostsUpdateResponse = DedicatedHost;

/** Specifies information about the dedicated host. Only tags, autoReplaceOnFailure and licenseType may be updated. */
export declare interface DedicatedHostUpdate extends UpdateResource {
    /** Fault domain of the dedicated host within a dedicated host group. */
    platformFaultDomain?: number;
    /** Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided. */
    autoReplaceOnFailure?: boolean;
    /**
     * A unique id generated and assigned to the dedicated host by the platform. <br><br> Does not change throughout the lifetime of the host.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostId?: string;
    /**
     * A list of references to all virtual machines in the Dedicated Host.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly virtualMachines?: SubResourceReadOnly[];
    /** Specifies the software license type that will be applied to the VMs deployed on the dedicated host. <br><br> Possible values are: <br><br> **None** <br><br> **Windows_Server_Hybrid** <br><br> **Windows_Server_Perpetual** <br><br> Default: **None** */
    licenseType?: DedicatedHostLicenseTypes;
    /**
     * The date when the host was first provisioned.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningTime?: Date;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The dedicated host instance view.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: DedicatedHostInstanceView;
    /**
     * Specifies the time at which the Dedicated Host resource was created.<br><br>Minimum api-version: 2021-11-01.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeCreated?: Date;
}

/**
 * Defines values for DeleteOptions. \
 * {@link KnownDeleteOptions} can be used interchangeably with DeleteOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Delete** \
 * **Detach**
 */
export declare type DeleteOptions = string;

/** Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15. */
export declare interface DiagnosticsProfile {
    /** Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br>**NOTE**: If storageUri is being specified then ensure that the storage account is in the same region and subscription as the VM. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor. */
    bootDiagnostics?: BootDiagnostics;
}

/**
 * Defines values for DiffDiskOptions. \
 * {@link KnownDiffDiskOptions} can be used interchangeably with DiffDiskOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Local**
 */
export declare type DiffDiskOptions = string;

/**
 * Defines values for DiffDiskPlacement. \
 * {@link KnownDiffDiskPlacement} can be used interchangeably with DiffDiskPlacement,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CacheDisk** \
 * **ResourceDisk**
 */
export declare type DiffDiskPlacement = string;

/** Describes the parameters of ephemeral disk settings that can be specified for operating system disk. <br><br> NOTE: The ephemeral disk settings can only be specified for managed disk. */
export declare interface DiffDiskSettings {
    /** Specifies the ephemeral disk settings for operating system disk. */
    option?: DiffDiskOptions;
    /** Specifies the ephemeral disk placement for operating system disk.<br><br> Possible values are: <br><br> **CacheDisk** <br><br> **ResourceDisk** <br><br> Default: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** is used.<br><br> Refer to VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk. */
    placement?: DiffDiskPlacement;
}

/** Describes the disallowed disk types. */
export declare interface Disallowed {
    /** A list of disk types. */
    diskTypes?: string[];
}

/** Specifies the disallowed configuration for a virtual machine image. */
export declare interface DisallowedConfiguration {
    /** VM disk types which are disallowed. */
    vmDiskType?: VmDiskTypes;
}

/** Disk resource. */
export declare interface Disk extends Resource {
    /**
     * A relative URI containing the ID of the VM that has the disk attached.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managedBy?: string;
    /**
     * List of relative URIs containing the IDs of the VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managedByExtended?: string[];
    /** The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS. */
    sku?: DiskSku;
    /** The Logical zone list for Disk. */
    zones?: string[];
    /** The extended location where the disk will be created. Extended location cannot be changed. */
    extendedLocation?: ExtendedLocation;
    /**
     * The time when the disk was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeCreated?: Date;
    /** The Operating System type. */
    osType?: OperatingSystemTypes;
    /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
    hyperVGeneration?: HyperVGeneration;
    /** Purchase plan information for the the image from which the OS disk was created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer, product: WindowsServer} */
    purchasePlan?: PurchasePlanAutoGenerated;
    /** List of supported capabilities for the image from which the OS disk was created. */
    supportedCapabilities?: SupportedCapabilities;
    /** Disk source information. CreationData information cannot be changed after the disk has been created. */
    creationData?: CreationData;
    /** If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size. */
    diskSizeGB?: number;
    /**
     * The size of the disk in bytes. This field is read only.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly diskSizeBytes?: number;
    /**
     * Unique Guid identifying the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueId?: string;
    /** Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot. */
    encryptionSettingsCollection?: EncryptionSettingsCollection;
    /**
     * The disk provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes. */
    diskIopsReadWrite?: number;
    /** The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10. */
    diskMBpsReadWrite?: number;
    /** The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes. */
    diskIopsReadOnly?: number;
    /** The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10. */
    diskMBpsReadOnly?: number;
    /**
     * The state of the disk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly diskState?: DiskState;
    /** Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys. */
    encryption?: Encryption;
    /** The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time. */
    maxShares?: number;
    /**
     * Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly shareInfo?: ShareInfoElement[];
    /** Policy for accessing the disk via network. */
    networkAccessPolicy?: NetworkAccessPolicy;
    /** ARM id of the DiskAccess resource for using private endpoints on disks. */
    diskAccessId?: string;
    /**
     * Latest time when bursting was last enabled on a disk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly burstingEnabledTime?: Date;
    /** Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks. */
    tier?: string;
    /** Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks. */
    burstingEnabled?: boolean;
    /**
     * Properties of the disk for which update is pending.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly propertyUpdatesInProgress?: PropertyUpdatesInProgress;
    /** Indicates the OS on a disk supports hibernation. */
    supportsHibernation?: boolean;
    /** Contains the security related information for the resource. */
    securityProfile?: DiskSecurityProfile;
    /** Percentage complete for the background copy when a resource is created via the CopyStart operation. */
    completionPercent?: number;
    /** Policy for controlling export on the disk. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Additional authentication requirements when exporting or uploading to a disk or snapshot. */
    dataAccessAuthMode?: DataAccessAuthMode;
    /** Setting this property to true improves reliability and performance of data disks that are frequently (more than 5 times a day) by detached from one virtual machine and attached to another. This property should not be set for disks that are not detached and attached frequently as it causes the disks to not align with the fault domain of the virtual machine. */
    optimizedForFrequentAttach?: boolean;
}

/** disk access resource. */
export declare interface DiskAccess extends Resource {
    /** The extended location where the disk access will be created. Extended location cannot be changed. */
    extendedLocation?: ExtendedLocation;
    /**
     * A readonly collection of private endpoint connections created on the disk. Currently only one endpoint connection is supported.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
    /**
     * The disk access resource provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The time when the disk access was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeCreated?: Date;
}

/** Interface representing a DiskAccesses. */
export declare interface DiskAccesses {
    /**
     * Lists all the disk access resources under a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DiskAccessesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<DiskAccess>;
    /**
     * Lists all the disk access resources under a subscription.
     * @param options The options parameters.
     */
    list(options?: DiskAccessesListOptionalParams): PagedAsyncIterableIterator<DiskAccess>;
    /**
     * List information about private endpoint connections under a disk access resource
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    listPrivateEndpointConnections(resourceGroupName: string, diskAccessName: string, options?: DiskAccessesListPrivateEndpointConnectionsOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Creates or updates a disk access resource
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param diskAccess disk access object supplied in the body of the Put disk access operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, diskAccessName: string, diskAccess: DiskAccess, options?: DiskAccessesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DiskAccessesCreateOrUpdateResponse>, DiskAccessesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a disk access resource
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param diskAccess disk access object supplied in the body of the Put disk access operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, diskAccessName: string, diskAccess: DiskAccess, options?: DiskAccessesCreateOrUpdateOptionalParams): Promise<DiskAccessesCreateOrUpdateResponse>;
    /**
     * Updates (patches) a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param diskAccess disk access object supplied in the body of the Patch disk access operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, diskAccessName: string, diskAccess: DiskAccessUpdate, options?: DiskAccessesUpdateOptionalParams): Promise<PollerLike<PollOperationState<DiskAccessesUpdateResponse>, DiskAccessesUpdateResponse>>;
    /**
     * Updates (patches) a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param diskAccess disk access object supplied in the body of the Patch disk access operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, diskAccessName: string, diskAccess: DiskAccessUpdate, options?: DiskAccessesUpdateOptionalParams): Promise<DiskAccessesUpdateResponse>;
    /**
     * Gets information about a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, diskAccessName: string, options?: DiskAccessesGetOptionalParams): Promise<DiskAccessesGetResponse>;
    /**
     * Deletes a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, diskAccessName: string, options?: DiskAccessesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, diskAccessName: string, options?: DiskAccessesDeleteOptionalParams): Promise<void>;
    /**
     * Gets the private link resources possible under disk access resource
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    getPrivateLinkResources(resourceGroupName: string, diskAccessName: string, options?: DiskAccessesGetPrivateLinkResourcesOptionalParams): Promise<DiskAccessesGetPrivateLinkResourcesResponse>;
    /**
     * Approve or reject a private endpoint connection under disk access resource, this can't be used to
     * create a new private endpoint connection.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param privateEndpointConnection private endpoint connection object supplied in the body of the Put
     *                                  private endpoint connection operation.
     * @param options The options parameters.
     */
    beginUpdateAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: DiskAccessesUpdateAPrivateEndpointConnectionOptionalParams): Promise<PollerLike<PollOperationState<DiskAccessesUpdateAPrivateEndpointConnectionResponse>, DiskAccessesUpdateAPrivateEndpointConnectionResponse>>;
    /**
     * Approve or reject a private endpoint connection under disk access resource, this can't be used to
     * create a new private endpoint connection.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param privateEndpointConnection private endpoint connection object supplied in the body of the Put
     *                                  private endpoint connection operation.
     * @param options The options parameters.
     */
    beginUpdateAPrivateEndpointConnectionAndWait(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: DiskAccessesUpdateAPrivateEndpointConnectionOptionalParams): Promise<DiskAccessesUpdateAPrivateEndpointConnectionResponse>;
    /**
     * Gets information about a private endpoint connection under a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    getAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, options?: DiskAccessesGetAPrivateEndpointConnectionOptionalParams): Promise<DiskAccessesGetAPrivateEndpointConnectionResponse>;
    /**
     * Deletes a private endpoint connection under a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, options?: DiskAccessesDeleteAPrivateEndpointConnectionOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a private endpoint connection under a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAPrivateEndpointConnectionAndWait(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, options?: DiskAccessesDeleteAPrivateEndpointConnectionOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface DiskAccessesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DiskAccessesCreateOrUpdateResponse = DiskAccess;

/** Optional parameters. */
export declare interface DiskAccessesDeleteAPrivateEndpointConnectionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DiskAccessesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DiskAccessesGetAPrivateEndpointConnectionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAPrivateEndpointConnection operation. */
export declare type DiskAccessesGetAPrivateEndpointConnectionResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface DiskAccessesGetOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DiskAccessesGetPrivateLinkResourcesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getPrivateLinkResources operation. */
export declare type DiskAccessesGetPrivateLinkResourcesResponse = PrivateLinkResourceListResult;

/** Contains response data for the get operation. */
export declare type DiskAccessesGetResponse = DiskAccess;

/** Optional parameters. */
export declare interface DiskAccessesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type DiskAccessesListByResourceGroupNextResponse = DiskAccessList;

/** Optional parameters. */
export declare interface DiskAccessesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type DiskAccessesListByResourceGroupResponse = DiskAccessList;

/** Optional parameters. */
export declare interface DiskAccessesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DiskAccessesListNextResponse = DiskAccessList;

/** Optional parameters. */
export declare interface DiskAccessesListOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DiskAccessesListPrivateEndpointConnectionsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPrivateEndpointConnectionsNext operation. */
export declare type DiskAccessesListPrivateEndpointConnectionsNextResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export declare interface DiskAccessesListPrivateEndpointConnectionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPrivateEndpointConnections operation. */
export declare type DiskAccessesListPrivateEndpointConnectionsResponse = PrivateEndpointConnectionListResult;

/** Contains response data for the list operation. */
export declare type DiskAccessesListResponse = DiskAccessList;

/** Optional parameters. */
export declare interface DiskAccessesUpdateAPrivateEndpointConnectionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateAPrivateEndpointConnection operation. */
export declare type DiskAccessesUpdateAPrivateEndpointConnectionResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface DiskAccessesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type DiskAccessesUpdateResponse = DiskAccess;

/** The List disk access operation response. */
export declare interface DiskAccessList {
    /** A list of disk access resources. */
    value: DiskAccess[];
    /** The uri to fetch the next page of disk access resources. Call ListNext() with this to fetch the next page of disk access resources. */
    nextLink?: string;
}

/** Used for updating a disk access resource. */
export declare interface DiskAccessUpdate {
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/**
 * Defines values for DiskControllerTypes. \
 * {@link KnownDiskControllerTypes} can be used interchangeably with DiskControllerTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SCSI** \
 * **NVMe**
 */
export declare type DiskControllerTypes = string;

/**
 * Defines values for DiskCreateOption. \
 * {@link KnownDiskCreateOption} can be used interchangeably with DiskCreateOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Empty**: Create an empty data disk of a size given by diskSizeGB. \
 * **Attach**: Disk will be attached to a VM. \
 * **FromImage**: Create a new disk from a platform image specified by the given imageReference or galleryImageReference. \
 * **Import**: Create a disk by importing from a blob specified by a sourceUri in a storage account specified by storageAccountId. \
 * **Copy**: Create a new disk or snapshot by copying from a disk or snapshot specified by the given sourceResourceId. \
 * **Restore**: Create a new disk by copying from a backup recovery point. \
 * **Upload**: Create a new disk by obtaining a write token and using it to directly upload the contents of the disk. \
 * **CopyStart**: Create a new disk by using a deep copy process, where the resource creation is considered complete only after all data has been copied from the source. \
 * **ImportSecure**: Similar to Import create option. Create a new Trusted Launch VM or Confidential VM supported disk by importing additional blob for VM guest state specified by securityDataUri in storage account specified by storageAccountId \
 * **UploadPreparedSecure**: Similar to Upload create option. Create a new Trusted Launch VM or Confidential VM supported disk and upload using write token in both disk and VM guest state
 */
export declare type DiskCreateOption = string;

/**
 * Defines values for DiskCreateOptionTypes. \
 * {@link KnownDiskCreateOptionTypes} can be used interchangeably with DiskCreateOptionTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FromImage** \
 * **Empty** \
 * **Attach**
 */
export declare type DiskCreateOptionTypes = string;

/**
 * Defines values for DiskDeleteOptionTypes. \
 * {@link KnownDiskDeleteOptionTypes} can be used interchangeably with DiskDeleteOptionTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Delete** \
 * **Detach**
 */
export declare type DiskDeleteOptionTypes = string;

/**
 * Defines values for DiskDetachOptionTypes. \
 * {@link KnownDiskDetachOptionTypes} can be used interchangeably with DiskDetachOptionTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ForceDetach**
 */
export declare type DiskDetachOptionTypes = string;

/** disk encryption set resource. */
export declare interface DiskEncryptionSet extends Resource {
    /** The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks. */
    identity?: EncryptionSetIdentity;
    /** The type of key used to encrypt the data of the disk. */
    encryptionType?: DiskEncryptionSetType;
    /** The key vault key which is currently used by this disk encryption set. */
    activeKey?: KeyForDiskEncryptionSet;
    /**
     * A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly previousKeys?: KeyForDiskEncryptionSet[];
    /**
     * The disk encryption set provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** Set this flag to true to enable auto-updating of this disk encryption set to the latest key version. */
    rotationToLatestKeyVersionEnabled?: boolean;
    /**
     * The time when the active key of this disk encryption set was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastKeyRotationTimestamp?: Date;
    /**
     * The error that was encountered during auto-key rotation. If an error is present, then auto-key rotation will not be attempted until the error on this disk encryption set is fixed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly autoKeyRotationError?: ApiError;
    /** Multi-tenant application client id to access key vault in a different tenant. Setting the value to 'None' will clear the property. */
    federatedClientId?: string;
}

/**
 * Defines values for DiskEncryptionSetIdentityType. \
 * {@link KnownDiskEncryptionSetIdentityType} can be used interchangeably with DiskEncryptionSetIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned** \
 * **None**
 */
export declare type DiskEncryptionSetIdentityType = string;

/** The List disk encryption set operation response. */
export declare interface DiskEncryptionSetList {
    /** A list of disk encryption sets. */
    value: DiskEncryptionSet[];
    /** The uri to fetch the next page of disk encryption sets. Call ListNext() with this to fetch the next page of disk encryption sets. */
    nextLink?: string;
}

/** Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. <br><br> NOTE: The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details. */
export declare interface DiskEncryptionSetParameters extends SubResource {
}

/** Interface representing a DiskEncryptionSets. */
export declare interface DiskEncryptionSets {
    /**
     * Lists all the disk encryption sets under a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DiskEncryptionSetsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<DiskEncryptionSet>;
    /**
     * Lists all the disk encryption sets under a subscription.
     * @param options The options parameters.
     */
    list(options?: DiskEncryptionSetsListOptionalParams): PagedAsyncIterableIterator<DiskEncryptionSet>;
    /**
     * Lists all resources that are encrypted with this disk encryption set.
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     *                              can't be changed after the disk encryption set is created. Supported characters for the name are
     *                              a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    listAssociatedResources(resourceGroupName: string, diskEncryptionSetName: string, options?: DiskEncryptionSetsListAssociatedResourcesOptionalParams): PagedAsyncIterableIterator<string>;
    /**
     * Creates or updates a disk encryption set
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     *                              can't be changed after the disk encryption set is created. Supported characters for the name are
     *                              a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set object supplied in the body of the Put disk encryption
     *                          set operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, diskEncryptionSetName: string, diskEncryptionSet: DiskEncryptionSet, options?: DiskEncryptionSetsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DiskEncryptionSetsCreateOrUpdateResponse>, DiskEncryptionSetsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a disk encryption set
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     *                              can't be changed after the disk encryption set is created. Supported characters for the name are
     *                              a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set object supplied in the body of the Put disk encryption
     *                          set operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, diskEncryptionSetName: string, diskEncryptionSet: DiskEncryptionSet, options?: DiskEncryptionSetsCreateOrUpdateOptionalParams): Promise<DiskEncryptionSetsCreateOrUpdateResponse>;
    /**
     * Updates (patches) a disk encryption set.
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     *                              can't be changed after the disk encryption set is created. Supported characters for the name are
     *                              a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set object supplied in the body of the Patch disk
     *                          encryption set operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, diskEncryptionSetName: string, diskEncryptionSet: DiskEncryptionSetUpdate, options?: DiskEncryptionSetsUpdateOptionalParams): Promise<PollerLike<PollOperationState<DiskEncryptionSetsUpdateResponse>, DiskEncryptionSetsUpdateResponse>>;
    /**
     * Updates (patches) a disk encryption set.
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     *                              can't be changed after the disk encryption set is created. Supported characters for the name are
     *                              a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set object supplied in the body of the Patch disk
     *                          encryption set operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, diskEncryptionSetName: string, diskEncryptionSet: DiskEncryptionSetUpdate, options?: DiskEncryptionSetsUpdateOptionalParams): Promise<DiskEncryptionSetsUpdateResponse>;
    /**
     * Gets information about a disk encryption set.
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     *                              can't be changed after the disk encryption set is created. Supported characters for the name are
     *                              a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, diskEncryptionSetName: string, options?: DiskEncryptionSetsGetOptionalParams): Promise<DiskEncryptionSetsGetResponse>;
    /**
     * Deletes a disk encryption set.
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     *                              can't be changed after the disk encryption set is created. Supported characters for the name are
     *                              a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, diskEncryptionSetName: string, options?: DiskEncryptionSetsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a disk encryption set.
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     *                              can't be changed after the disk encryption set is created. Supported characters for the name are
     *                              a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, diskEncryptionSetName: string, options?: DiskEncryptionSetsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface DiskEncryptionSetsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DiskEncryptionSetsCreateOrUpdateResponse = DiskEncryptionSet;

/** Optional parameters. */
export declare interface DiskEncryptionSetsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DiskEncryptionSetsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DiskEncryptionSetsGetResponse = DiskEncryptionSet;

/** Optional parameters. */
export declare interface DiskEncryptionSetsListAssociatedResourcesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAssociatedResourcesNext operation. */
export declare type DiskEncryptionSetsListAssociatedResourcesNextResponse = ResourceUriList;

/** Optional parameters. */
export declare interface DiskEncryptionSetsListAssociatedResourcesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAssociatedResources operation. */
export declare type DiskEncryptionSetsListAssociatedResourcesResponse = ResourceUriList;

/** Optional parameters. */
export declare interface DiskEncryptionSetsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type DiskEncryptionSetsListByResourceGroupNextResponse = DiskEncryptionSetList;

/** Optional parameters. */
export declare interface DiskEncryptionSetsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type DiskEncryptionSetsListByResourceGroupResponse = DiskEncryptionSetList;

/** Optional parameters. */
export declare interface DiskEncryptionSetsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DiskEncryptionSetsListNextResponse = DiskEncryptionSetList;

/** Optional parameters. */
export declare interface DiskEncryptionSetsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type DiskEncryptionSetsListResponse = DiskEncryptionSetList;

/** Optional parameters. */
export declare interface DiskEncryptionSetsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type DiskEncryptionSetsUpdateResponse = DiskEncryptionSet;

/** Describes a Encryption Settings for a Disk */
export declare interface DiskEncryptionSettings {
    /** Specifies the location of the disk encryption key, which is a Key Vault Secret. */
    diskEncryptionKey?: KeyVaultSecretReference;
    /** Specifies the location of the key encryption key in Key Vault. */
    keyEncryptionKey?: KeyVaultKeyReference;
    /** Specifies whether disk encryption should be enabled on the virtual machine. */
    enabled?: boolean;
}

/**
 * Defines values for DiskEncryptionSetType. \
 * {@link KnownDiskEncryptionSetType} can be used interchangeably with DiskEncryptionSetType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EncryptionAtRestWithCustomerKey**: Resource using diskEncryptionSet would be encrypted at rest with Customer managed key that can be changed and revoked by a customer. \
 * **EncryptionAtRestWithPlatformAndCustomerKeys**: Resource using diskEncryptionSet would be encrypted at rest with two layers of encryption. One of the keys is Customer managed and the other key is Platform managed. \
 * **ConfidentialVmEncryptedWithCustomerKey**: Confidential VM supported disk and VM guest state would be encrypted with customer managed key.
 */
export declare type DiskEncryptionSetType = string;

/** disk encryption set update resource. */
export declare interface DiskEncryptionSetUpdate {
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /** The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks. */
    identity?: EncryptionSetIdentity;
    /** The type of key used to encrypt the data of the disk. */
    encryptionType?: DiskEncryptionSetType;
    /** Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots */
    activeKey?: KeyForDiskEncryptionSet;
    /** Set this flag to true to enable auto-updating of this disk encryption set to the latest key version. */
    rotationToLatestKeyVersionEnabled?: boolean;
    /** Multi-tenant application client id to access key vault in a different tenant. Setting the value to 'None' will clear the property. */
    federatedClientId?: string;
}

/** This is the disk image encryption base class. */
export declare interface DiskImageEncryption {
    /** A relative URI containing the resource ID of the disk encryption set. */
    diskEncryptionSetId?: string;
}

/** The instance view of the disk. */
export declare interface DiskInstanceView {
    /** The disk name. */
    name?: string;
    /** Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15 */
    encryptionSettings?: DiskEncryptionSettings[];
    /** The resource status information. */
    statuses?: InstanceViewStatus[];
}

/** The List Disks operation response. */
export declare interface DiskList {
    /** A list of disks. */
    value: Disk[];
    /** The uri to fetch the next page of disks. Call ListNext() with this to fetch the next page of disks. */
    nextLink?: string;
}

/** Properties of disk restore point */
export declare interface DiskRestorePoint extends ProxyOnlyResource {
    /**
     * The timestamp of restorePoint creation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeCreated?: Date;
    /**
     * arm id of source disk or source disk restore point.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceResourceId?: string;
    /**
     * The Operating System type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osType?: OperatingSystemTypes;
    /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
    hyperVGeneration?: HyperVGeneration;
    /** Purchase plan information for the the image from which the OS disk was created. */
    purchasePlan?: PurchasePlanAutoGenerated;
    /** List of supported capabilities for the image from which the OS disk was created. */
    supportedCapabilities?: SupportedCapabilities;
    /**
     * id of the backing snapshot's MIS family
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly familyId?: string;
    /**
     * unique incarnation id of the source disk
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceUniqueId?: string;
    /**
     * Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly encryption?: Encryption;
    /** Indicates the OS on a disk supports hibernation. */
    supportsHibernation?: boolean;
    /** Policy for accessing the disk via network. */
    networkAccessPolicy?: NetworkAccessPolicy;
    /** Policy for controlling export on the disk. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** ARM id of the DiskAccess resource for using private endpoints on disks. */
    diskAccessId?: string;
    /** Percentage complete for the background copy of disk restore point when source resource is from a different region. */
    completionPercent?: number;
    /**
     * Replication state of disk restore point when source resource is from a different region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly replicationState?: string;
    /**
     * Location of source disk or source disk restore point when source resource is from a different region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceResourceLocation?: string;
    /** Contains the security related information for the resource. */
    securityProfile?: DiskSecurityProfile;
}

/** Optional parameters. */
export declare interface DiskRestorePointGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DiskRestorePointGetResponse = DiskRestorePoint;

/** Optional parameters. */
export declare interface DiskRestorePointGrantAccessOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the grantAccess operation. */
export declare type DiskRestorePointGrantAccessResponse = AccessUri;

/** The instance view of a disk restore point. */
export declare interface DiskRestorePointInstanceView {
    /** Disk restore point Id. */
    id?: string;
    /** The disk restore point replication status information. */
    replicationStatus?: DiskRestorePointReplicationStatus;
}

/** The List Disk Restore Points operation response. */
export declare interface DiskRestorePointList {
    /** A list of disk restore points. */
    value: DiskRestorePoint[];
    /** The uri to fetch the next page of disk restore points. Call ListNext() with this to fetch the next page of disk restore points. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface DiskRestorePointListByRestorePointNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByRestorePointNext operation. */
export declare type DiskRestorePointListByRestorePointNextResponse = DiskRestorePointList;

/** Optional parameters. */
export declare interface DiskRestorePointListByRestorePointOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByRestorePoint operation. */
export declare type DiskRestorePointListByRestorePointResponse = DiskRestorePointList;

/** Interface representing a DiskRestorePointOperations. */
export declare interface DiskRestorePointOperations {
    /**
     * Lists diskRestorePoints under a vmRestorePoint.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param options The options parameters.
     */
    listByRestorePoint(resourceGroupName: string, restorePointCollectionName: string, vmRestorePointName: string, options?: DiskRestorePointListByRestorePointOptionalParams): PagedAsyncIterableIterator<DiskRestorePoint>;
    /**
     * Get disk restorePoint resource
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param diskRestorePointName The name of the disk restore point created.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, restorePointCollectionName: string, vmRestorePointName: string, diskRestorePointName: string, options?: DiskRestorePointGetOptionalParams): Promise<DiskRestorePointGetResponse>;
    /**
     * Grants access to a diskRestorePoint.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param diskRestorePointName The name of the disk restore point created.
     * @param grantAccessData Access data object supplied in the body of the get disk access operation.
     * @param options The options parameters.
     */
    beginGrantAccess(resourceGroupName: string, restorePointCollectionName: string, vmRestorePointName: string, diskRestorePointName: string, grantAccessData: GrantAccessData, options?: DiskRestorePointGrantAccessOptionalParams): Promise<PollerLike<PollOperationState<DiskRestorePointGrantAccessResponse>, DiskRestorePointGrantAccessResponse>>;
    /**
     * Grants access to a diskRestorePoint.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param diskRestorePointName The name of the disk restore point created.
     * @param grantAccessData Access data object supplied in the body of the get disk access operation.
     * @param options The options parameters.
     */
    beginGrantAccessAndWait(resourceGroupName: string, restorePointCollectionName: string, vmRestorePointName: string, diskRestorePointName: string, grantAccessData: GrantAccessData, options?: DiskRestorePointGrantAccessOptionalParams): Promise<DiskRestorePointGrantAccessResponse>;
    /**
     * Revokes access to a diskRestorePoint.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param diskRestorePointName The name of the disk restore point created.
     * @param options The options parameters.
     */
    beginRevokeAccess(resourceGroupName: string, restorePointCollectionName: string, vmRestorePointName: string, diskRestorePointName: string, options?: DiskRestorePointRevokeAccessOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Revokes access to a diskRestorePoint.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param diskRestorePointName The name of the disk restore point created.
     * @param options The options parameters.
     */
    beginRevokeAccessAndWait(resourceGroupName: string, restorePointCollectionName: string, vmRestorePointName: string, diskRestorePointName: string, options?: DiskRestorePointRevokeAccessOptionalParams): Promise<void>;
}

/** The instance view of a disk restore point. */
export declare interface DiskRestorePointReplicationStatus {
    /** The resource status information. */
    status?: InstanceViewStatus;
    /** Replication completion percentage. */
    completionPercent?: number;
}

/** Optional parameters. */
export declare interface DiskRestorePointRevokeAccessOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Interface representing a Disks. */
export declare interface Disks {
    /**
     * Lists all the disks under a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DisksListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Disk>;
    /**
     * Lists all the disks under a subscription.
     * @param options The options parameters.
     */
    list(options?: DisksListOptionalParams): PagedAsyncIterableIterator<Disk>;
    /**
     * Creates or updates a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed after
     *                 the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name
     *                 length is 80 characters.
     * @param disk Disk object supplied in the body of the Put disk operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, diskName: string, disk: Disk, options?: DisksCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DisksCreateOrUpdateResponse>, DisksCreateOrUpdateResponse>>;
    /**
     * Creates or updates a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed after
     *                 the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name
     *                 length is 80 characters.
     * @param disk Disk object supplied in the body of the Put disk operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, diskName: string, disk: Disk, options?: DisksCreateOrUpdateOptionalParams): Promise<DisksCreateOrUpdateResponse>;
    /**
     * Updates (patches) a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed after
     *                 the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name
     *                 length is 80 characters.
     * @param disk Disk object supplied in the body of the Patch disk operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, diskName: string, disk: DiskUpdate, options?: DisksUpdateOptionalParams): Promise<PollerLike<PollOperationState<DisksUpdateResponse>, DisksUpdateResponse>>;
    /**
     * Updates (patches) a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed after
     *                 the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name
     *                 length is 80 characters.
     * @param disk Disk object supplied in the body of the Patch disk operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, diskName: string, disk: DiskUpdate, options?: DisksUpdateOptionalParams): Promise<DisksUpdateResponse>;
    /**
     * Gets information about a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed after
     *                 the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name
     *                 length is 80 characters.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, diskName: string, options?: DisksGetOptionalParams): Promise<DisksGetResponse>;
    /**
     * Deletes a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed after
     *                 the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name
     *                 length is 80 characters.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, diskName: string, options?: DisksDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed after
     *                 the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name
     *                 length is 80 characters.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, diskName: string, options?: DisksDeleteOptionalParams): Promise<void>;
    /**
     * Grants access to a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed after
     *                 the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name
     *                 length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get disk access operation.
     * @param options The options parameters.
     */
    beginGrantAccess(resourceGroupName: string, diskName: string, grantAccessData: GrantAccessData, options?: DisksGrantAccessOptionalParams): Promise<PollerLike<PollOperationState<DisksGrantAccessResponse>, DisksGrantAccessResponse>>;
    /**
     * Grants access to a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed after
     *                 the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name
     *                 length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get disk access operation.
     * @param options The options parameters.
     */
    beginGrantAccessAndWait(resourceGroupName: string, diskName: string, grantAccessData: GrantAccessData, options?: DisksGrantAccessOptionalParams): Promise<DisksGrantAccessResponse>;
    /**
     * Revokes access to a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed after
     *                 the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name
     *                 length is 80 characters.
     * @param options The options parameters.
     */
    beginRevokeAccess(resourceGroupName: string, diskName: string, options?: DisksRevokeAccessOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Revokes access to a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed after
     *                 the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name
     *                 length is 80 characters.
     * @param options The options parameters.
     */
    beginRevokeAccessAndWait(resourceGroupName: string, diskName: string, options?: DisksRevokeAccessOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface DisksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DisksCreateOrUpdateResponse = Disk;

/** Optional parameters. */
export declare interface DisksDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains the security related information for the resource. */
export declare interface DiskSecurityProfile {
    /** Specifies the SecurityType of the VM. Applicable for OS disks only. */
    securityType?: DiskSecurityTypes;
    /** ResourceId of the disk encryption set associated to Confidential VM supported disk encrypted with customer managed key */
    secureVMDiskEncryptionSetId?: string;
}

/**
 * Defines values for DiskSecurityTypes. \
 * {@link KnownDiskSecurityTypes} can be used interchangeably with DiskSecurityTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TrustedLaunch**: Trusted Launch provides security features such as secure boot and virtual Trusted Platform Module (vTPM) \
 * **ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey**: Indicates Confidential VM disk with only VM guest state encrypted \
 * **ConfidentialVM_DiskEncryptedWithPlatformKey**: Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a platform managed key \
 * **ConfidentialVM_DiskEncryptedWithCustomerKey**: Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a customer managed key
 */
export declare type DiskSecurityTypes = string;

/** Optional parameters. */
export declare interface DisksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DisksGetResponse = Disk;

/** Optional parameters. */
export declare interface DisksGrantAccessOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the grantAccess operation. */
export declare type DisksGrantAccessResponse = AccessUri;

/** The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS. */
export declare interface DiskSku {
    /** The sku name. */
    name?: DiskStorageAccountTypes;
    /**
     * The sku tier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: string;
}

/** Optional parameters. */
export declare interface DisksListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type DisksListByResourceGroupNextResponse = DiskList;

/** Optional parameters. */
export declare interface DisksListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type DisksListByResourceGroupResponse = DiskList;

/** Optional parameters. */
export declare interface DisksListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DisksListNextResponse = DiskList;

/** Optional parameters. */
export declare interface DisksListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type DisksListResponse = DiskList;

/** Optional parameters. */
export declare interface DisksRevokeAccessOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/**
 * Defines values for DiskState. \
 * {@link KnownDiskState} can be used interchangeably with DiskState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unattached**: The disk is not being used and can be attached to a VM. \
 * **Attached**: The disk is currently attached to a running VM. \
 * **Reserved**: The disk is attached to a stopped-deallocated VM. \
 * **Frozen**: The disk is attached to a VM which is in hibernated state. \
 * **ActiveSAS**: The disk currently has an Active SAS Uri associated with it. \
 * **ActiveSASFrozen**: The disk is attached to a VM in hibernated state and has an active SAS URI associated with it. \
 * **ReadyToUpload**: A disk is ready to be created by upload by requesting a write token. \
 * **ActiveUpload**: A disk is created for upload and a write token has been issued for uploading to it.
 */
export declare type DiskState = string;

/**
 * Defines values for DiskStorageAccountTypes. \
 * {@link KnownDiskStorageAccountTypes} can be used interchangeably with DiskStorageAccountTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS**: Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access. \
 * **Premium_LRS**: Premium SSD locally redundant storage. Best for production and performance sensitive workloads. \
 * **StandardSSD_LRS**: Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev\/test. \
 * **UltraSSD_LRS**: Ultra SSD locally redundant storage. Best for IO-intensive workloads such as SAP HANA, top tier databases (for example, SQL, Oracle), and other transaction-heavy workloads. \
 * **Premium_ZRS**: Premium SSD zone redundant storage. Best for the production workloads that need storage resiliency against zone failures. \
 * **StandardSSD_ZRS**: Standard SSD zone redundant storage. Best for web servers, lightly used enterprise applications and dev\/test that need storage resiliency against zone failures. \
 * **PremiumV2_LRS**: Premium SSD v2 locally redundant storage. Best for production and performance-sensitive workloads that consistently require low latency and high IOPS and throughput.
 */
export declare type DiskStorageAccountTypes = string;

/** Optional parameters. */
export declare interface DisksUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type DisksUpdateResponse = Disk;

/** Disk update resource. */
export declare interface DiskUpdate {
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /** The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS. */
    sku?: DiskSku;
    /** the Operating System type. */
    osType?: OperatingSystemTypes;
    /** If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size. */
    diskSizeGB?: number;
    /** Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot. */
    encryptionSettingsCollection?: EncryptionSettingsCollection;
    /** The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes. */
    diskIopsReadWrite?: number;
    /** The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10. */
    diskMBpsReadWrite?: number;
    /** The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes. */
    diskIopsReadOnly?: number;
    /** The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10. */
    diskMBpsReadOnly?: number;
    /** The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time. */
    maxShares?: number;
    /** Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys. */
    encryption?: Encryption;
    /** Policy for accessing the disk via network. */
    networkAccessPolicy?: NetworkAccessPolicy;
    /** ARM id of the DiskAccess resource for using private endpoints on disks. */
    diskAccessId?: string;
    /** Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks. */
    tier?: string;
    /** Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks. */
    burstingEnabled?: boolean;
    /** Purchase plan information to be added on the OS disk */
    purchasePlan?: PurchasePlanAutoGenerated;
    /** List of supported capabilities to be added on the OS disk. */
    supportedCapabilities?: SupportedCapabilities;
    /**
     * Properties of the disk for which update is pending.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly propertyUpdatesInProgress?: PropertyUpdatesInProgress;
    /** Indicates the OS on a disk supports hibernation. */
    supportsHibernation?: boolean;
    /** Policy for controlling export on the disk. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Additional authentication requirements when exporting or uploading to a disk or snapshot. */
    dataAccessAuthMode?: DataAccessAuthMode;
    /** Setting this property to true improves reliability and performance of data disks that are frequently (more than 5 times a day) by detached from one virtual machine and attached to another. This property should not be set for disks that are not detached and attached frequently as it causes the disks to not align with the fault domain of the virtual machine. */
    optimizedForFrequentAttach?: boolean;
}

/** Encryption at rest settings for disk or snapshot */
export declare interface Encryption {
    /** ResourceId of the disk encryption set to use for enabling encryption at rest. */
    diskEncryptionSetId?: string;
    /** The type of key used to encrypt the data of the disk. */
    type?: EncryptionType;
}

/** Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact. */
export declare interface EncryptionImages {
    /** Contains encryption settings for an OS disk image. */
    osDiskImage?: OSDiskImageEncryption;
    /** A list of encryption specifications for data disk images. */
    dataDiskImages?: DataDiskImageEncryption[];
}

/** The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks. */
export declare interface EncryptionSetIdentity {
    /** The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with Identity type None during migration of subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys. */
    type?: DiskEncryptionSetIdentityType;
    /**
     * The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The list of user identities associated with the disk encryption set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentitiesValue;
    };
}

/** Encryption settings for disk or snapshot */
export declare interface EncryptionSettingsCollection {
    /** Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged. */
    enabled: boolean;
    /** A collection of encryption settings, one for each disk volume. */
    encryptionSettings?: EncryptionSettingsElement[];
    /** Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption. */
    encryptionSettingsVersion?: string;
}

/** Encryption settings for one disk volume. */
export declare interface EncryptionSettingsElement {
    /** Key Vault Secret Url and vault id of the disk encryption key */
    diskEncryptionKey?: KeyVaultAndSecretReference;
    /** Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key. */
    keyEncryptionKey?: KeyVaultAndKeyReference;
}

/**
 * Defines values for EncryptionType. \
 * {@link KnownEncryptionType} can be used interchangeably with EncryptionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EncryptionAtRestWithPlatformKey**: Disk is encrypted at rest with Platform managed key. It is the default encryption type. This is not a valid encryption type for disk encryption sets. \
 * **EncryptionAtRestWithCustomerKey**: Disk is encrypted at rest with Customer managed key that can be changed and revoked by a customer. \
 * **EncryptionAtRestWithPlatformAndCustomerKeys**: Disk is encrypted at rest with 2 layers of encryption. One of the keys is Customer managed and the other key is Platform managed.
 */
export declare type EncryptionType = string;

/**
 * Defines values for ExecutionState. \
 * {@link KnownExecutionState} can be used interchangeably with ExecutionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Pending** \
 * **Running** \
 * **Failed** \
 * **Succeeded** \
 * **TimedOut** \
 * **Canceled**
 */
export declare type ExecutionState = string;

/**
 * Defines values for ExpandTypesForGetCapacityReservationGroups. \
 * {@link KnownExpandTypesForGetCapacityReservationGroups} can be used interchangeably with ExpandTypesForGetCapacityReservationGroups,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **virtualMachineScaleSetVMs\/$ref** \
 * **virtualMachines\/$ref**
 */
export declare type ExpandTypesForGetCapacityReservationGroups = string;

/**
 * Defines values for ExpandTypesForGetVMScaleSets. \
 * {@link KnownExpandTypesForGetVMScaleSets} can be used interchangeably with ExpandTypesForGetVMScaleSets,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **userData**
 */
export declare type ExpandTypesForGetVMScaleSets = string;

/** The complex type of the extended location. */
export declare interface ExtendedLocation {
    /** The name of the extended location. */
    name?: string;
    /** The type of the extended location. */
    type?: ExtendedLocationTypes;
}

/**
 * Defines values for ExtendedLocationType. \
 * {@link KnownExtendedLocationType} can be used interchangeably with ExtendedLocationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EdgeZone**
 */
export declare type ExtendedLocationType = string;

/**
 * Defines values for ExtendedLocationTypes. \
 * {@link KnownExtendedLocationTypes} can be used interchangeably with ExtendedLocationTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EdgeZone**
 */
export declare type ExtendedLocationTypes = string;

/** Describes a cloud service Extension. */
export declare interface Extension {
    /** The name of the extension. */
    name?: string;
    /** Extension Properties. */
    properties?: CloudServiceExtensionProperties;
}

/** Interface representing a Galleries. */
export declare interface Galleries {
    /**
     * List galleries under a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: GalleriesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Gallery>;
    /**
     * List galleries under a subscription.
     * @param options The options parameters.
     */
    list(options?: GalleriesListOptionalParams): PagedAsyncIterableIterator<Gallery>;
    /**
     * Create or update a Shared Image Gallery.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery. The allowed characters are alphabets and
     *                    numbers with dots and periods allowed in the middle. The maximum length is 80 characters.
     * @param gallery Parameters supplied to the create or update Shared Image Gallery operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, galleryName: string, gallery: Gallery, options?: GalleriesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<GalleriesCreateOrUpdateResponse>, GalleriesCreateOrUpdateResponse>>;
    /**
     * Create or update a Shared Image Gallery.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery. The allowed characters are alphabets and
     *                    numbers with dots and periods allowed in the middle. The maximum length is 80 characters.
     * @param gallery Parameters supplied to the create or update Shared Image Gallery operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, galleryName: string, gallery: Gallery, options?: GalleriesCreateOrUpdateOptionalParams): Promise<GalleriesCreateOrUpdateResponse>;
    /**
     * Update a Shared Image Gallery.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery. The allowed characters are alphabets and
     *                    numbers with dots and periods allowed in the middle. The maximum length is 80 characters.
     * @param gallery Parameters supplied to the update Shared Image Gallery operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, galleryName: string, gallery: GalleryUpdate, options?: GalleriesUpdateOptionalParams): Promise<PollerLike<PollOperationState<GalleriesUpdateResponse>, GalleriesUpdateResponse>>;
    /**
     * Update a Shared Image Gallery.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery. The allowed characters are alphabets and
     *                    numbers with dots and periods allowed in the middle. The maximum length is 80 characters.
     * @param gallery Parameters supplied to the update Shared Image Gallery operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, galleryName: string, gallery: GalleryUpdate, options?: GalleriesUpdateOptionalParams): Promise<GalleriesUpdateResponse>;
    /**
     * Retrieves information about a Shared Image Gallery.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, galleryName: string, options?: GalleriesGetOptionalParams): Promise<GalleriesGetResponse>;
    /**
     * Delete a Shared Image Gallery.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery to be deleted.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, galleryName: string, options?: GalleriesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a Shared Image Gallery.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery to be deleted.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, galleryName: string, options?: GalleriesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface GalleriesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GalleriesCreateOrUpdateResponse = Gallery;

/** Optional parameters. */
export declare interface GalleriesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface GalleriesGetOptionalParams extends coreClient.OperationOptions {
    /** The select expression to apply on the operation. */
    select?: SelectPermissions;
    /** The expand query option to apply on the operation. */
    expand?: GalleryExpandParams;
}

/** Contains response data for the get operation. */
export declare type GalleriesGetResponse = Gallery;

/** Optional parameters. */
export declare interface GalleriesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type GalleriesListByResourceGroupNextResponse = GalleryList;

/** Optional parameters. */
export declare interface GalleriesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type GalleriesListByResourceGroupResponse = GalleryList;

/** Optional parameters. */
export declare interface GalleriesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type GalleriesListNextResponse = GalleryList;

/** Optional parameters. */
export declare interface GalleriesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type GalleriesListResponse = GalleryList;

/** Optional parameters. */
export declare interface GalleriesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type GalleriesUpdateResponse = Gallery;

/** Specifies information about the Shared Image Gallery that you want to create or update. */
export declare interface Gallery extends Resource {
    /** The description of this Shared Image Gallery resource. This property is updatable. */
    description?: string;
    /** Describes the gallery unique name. */
    identifier?: GalleryIdentifier;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: GalleryProvisioningState;
    /** Profile for gallery sharing to subscription or tenant */
    sharingProfile?: SharingProfile;
    /** Contains information about the soft deletion policy of the gallery. */
    softDeletePolicy?: SoftDeletePolicy;
    /**
     * Sharing status of current gallery.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sharingStatus?: SharingStatus;
}

/** Specifies information about the gallery Application Definition that you want to create or update. */
export declare interface GalleryApplication extends Resource {
    /** The description of this gallery Application Definition resource. This property is updatable. */
    description?: string;
    /** The Eula agreement for the gallery Application Definition. */
    eula?: string;
    /** The privacy statement uri. */
    privacyStatementUri?: string;
    /** The release note uri. */
    releaseNoteUri?: string;
    /** The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable. */
    endOfLifeDate?: Date;
    /** This property allows you to specify the supported type of the OS that application is built for. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux** */
    supportedOSType?: OperatingSystemTypes;
}

/** The List Gallery Applications operation response. */
export declare interface GalleryApplicationList {
    /** A list of Gallery Applications. */
    value: GalleryApplication[];
    /** The uri to fetch the next page of Application Definitions in the Application Gallery. Call ListNext() with this to fetch the next page of gallery Application Definitions. */
    nextLink?: string;
}

/** Interface representing a GalleryApplications. */
export declare interface GalleryApplications {
    /**
     * List gallery Application Definitions in a gallery.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which Application Definitions are
     *                    to be listed.
     * @param options The options parameters.
     */
    listByGallery(resourceGroupName: string, galleryName: string, options?: GalleryApplicationsListByGalleryOptionalParams): PagedAsyncIterableIterator<GalleryApplication>;
    /**
     * Create or update a gallery Application Definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is
     *                    to be created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or
     *                               updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in
     *                               the middle. The maximum length is 80 characters.
     * @param galleryApplication Parameters supplied to the create or update gallery Application operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, galleryName: string, galleryApplicationName: string, galleryApplication: GalleryApplication, options?: GalleryApplicationsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<GalleryApplicationsCreateOrUpdateResponse>, GalleryApplicationsCreateOrUpdateResponse>>;
    /**
     * Create or update a gallery Application Definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is
     *                    to be created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or
     *                               updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in
     *                               the middle. The maximum length is 80 characters.
     * @param galleryApplication Parameters supplied to the create or update gallery Application operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, galleryName: string, galleryApplicationName: string, galleryApplication: GalleryApplication, options?: GalleryApplicationsCreateOrUpdateOptionalParams): Promise<GalleryApplicationsCreateOrUpdateResponse>;
    /**
     * Update a gallery Application Definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is
     *                    to be updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The
     *                               allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle.
     *                               The maximum length is 80 characters.
     * @param galleryApplication Parameters supplied to the update gallery Application operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, galleryName: string, galleryApplicationName: string, galleryApplication: GalleryApplicationUpdate, options?: GalleryApplicationsUpdateOptionalParams): Promise<PollerLike<PollOperationState<GalleryApplicationsUpdateResponse>, GalleryApplicationsUpdateResponse>>;
    /**
     * Update a gallery Application Definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is
     *                    to be updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The
     *                               allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle.
     *                               The maximum length is 80 characters.
     * @param galleryApplication Parameters supplied to the update gallery Application operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, galleryName: string, galleryApplicationName: string, galleryApplication: GalleryApplicationUpdate, options?: GalleryApplicationsUpdateOptionalParams): Promise<GalleryApplicationsUpdateResponse>;
    /**
     * Retrieves information about a gallery Application Definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which the Application Definitions
     *                    are to be retrieved.
     * @param galleryApplicationName The name of the gallery Application Definition to be retrieved.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, galleryName: string, galleryApplicationName: string, options?: GalleryApplicationsGetOptionalParams): Promise<GalleryApplicationsGetResponse>;
    /**
     * Delete a gallery Application.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is
     *                    to be deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, galleryName: string, galleryApplicationName: string, options?: GalleryApplicationsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a gallery Application.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is
     *                    to be deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, galleryName: string, galleryApplicationName: string, options?: GalleryApplicationsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface GalleryApplicationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GalleryApplicationsCreateOrUpdateResponse = GalleryApplication;

/** Optional parameters. */
export declare interface GalleryApplicationsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface GalleryApplicationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type GalleryApplicationsGetResponse = GalleryApplication;

/** Optional parameters. */
export declare interface GalleryApplicationsListByGalleryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByGalleryNext operation. */
export declare type GalleryApplicationsListByGalleryNextResponse = GalleryApplicationList;

/** Optional parameters. */
export declare interface GalleryApplicationsListByGalleryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByGallery operation. */
export declare type GalleryApplicationsListByGalleryResponse = GalleryApplicationList;

/** Optional parameters. */
export declare interface GalleryApplicationsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type GalleryApplicationsUpdateResponse = GalleryApplication;

/** Specifies information about the gallery Application Definition that you want to update. */
export declare interface GalleryApplicationUpdate extends UpdateResourceDefinition {
    /** The description of this gallery Application Definition resource. This property is updatable. */
    description?: string;
    /** The Eula agreement for the gallery Application Definition. */
    eula?: string;
    /** The privacy statement uri. */
    privacyStatementUri?: string;
    /** The release note uri. */
    releaseNoteUri?: string;
    /** The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable. */
    endOfLifeDate?: Date;
    /** This property allows you to specify the supported type of the OS that application is built for. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux** */
    supportedOSType?: OperatingSystemTypes;
}

/** Specifies information about the gallery Application Version that you want to create or update. */
export declare interface GalleryApplicationVersion extends Resource {
    /** The publishing profile of a gallery image version. */
    publishingProfile?: GalleryApplicationVersionPublishingProfile;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: GalleryProvisioningState;
    /**
     * This is the replication status of the gallery image version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly replicationStatus?: ReplicationStatus;
}

/** The List Gallery Application version operation response. */
export declare interface GalleryApplicationVersionList {
    /** A list of gallery Application Versions. */
    value: GalleryApplicationVersion[];
    /** The uri to fetch the next page of gallery Application Versions. Call ListNext() with this to fetch the next page of gallery Application Versions. */
    nextLink?: string;
}

/** The publishing profile of a gallery image version. */
export declare interface GalleryApplicationVersionPublishingProfile extends GalleryArtifactPublishingProfileBase {
    /** The source image from which the Image Version is going to be created. */
    source: UserArtifactSource;
    manageActions?: UserArtifactManage;
    /** Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set. */
    settings?: UserArtifactSettings;
    /** Optional. Additional settings to pass to the vm-application-manager extension. For advanced use only. */
    advancedSettings?: {
        [propertyName: string]: string;
    };
    /** Optional. Whether or not this application reports health. */
    enableHealthCheck?: boolean;
}

/** Interface representing a GalleryApplicationVersions. */
export declare interface GalleryApplicationVersions {
    /**
     * List gallery Application Versions in a gallery Application Definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the Shared Application Gallery Application Definition from
     *                               which the Application Versions are to be listed.
     * @param options The options parameters.
     */
    listByGalleryApplication(resourceGroupName: string, galleryName: string, galleryApplicationName: string, options?: GalleryApplicationVersionsListByGalleryApplicationOptionalParams): PagedAsyncIterableIterator<GalleryApplicationVersion>;
    /**
     * Create or update a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version is to be created.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be created.
     *                                      Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits
     *                                      must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param galleryApplicationVersion Parameters supplied to the create or update gallery Application
     *                                  Version operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, galleryName: string, galleryApplicationName: string, galleryApplicationVersionName: string, galleryApplicationVersion: GalleryApplicationVersion, options?: GalleryApplicationVersionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<GalleryApplicationVersionsCreateOrUpdateResponse>, GalleryApplicationVersionsCreateOrUpdateResponse>>;
    /**
     * Create or update a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version is to be created.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be created.
     *                                      Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits
     *                                      must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param galleryApplicationVersion Parameters supplied to the create or update gallery Application
     *                                  Version operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, galleryName: string, galleryApplicationName: string, galleryApplicationVersionName: string, galleryApplicationVersion: GalleryApplicationVersion, options?: GalleryApplicationVersionsCreateOrUpdateOptionalParams): Promise<GalleryApplicationVersionsCreateOrUpdateResponse>;
    /**
     * Update a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version is to be updated.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be updated.
     *                                      Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits
     *                                      must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param galleryApplicationVersion Parameters supplied to the update gallery Application Version
     *                                  operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, galleryName: string, galleryApplicationName: string, galleryApplicationVersionName: string, galleryApplicationVersion: GalleryApplicationVersionUpdate, options?: GalleryApplicationVersionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<GalleryApplicationVersionsUpdateResponse>, GalleryApplicationVersionsUpdateResponse>>;
    /**
     * Update a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version is to be updated.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be updated.
     *                                      Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits
     *                                      must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param galleryApplicationVersion Parameters supplied to the update gallery Application Version
     *                                  operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, galleryName: string, galleryApplicationName: string, galleryApplicationVersionName: string, galleryApplicationVersion: GalleryApplicationVersionUpdate, options?: GalleryApplicationVersionsUpdateOptionalParams): Promise<GalleryApplicationVersionsUpdateResponse>;
    /**
     * Retrieves information about a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version resides.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be retrieved.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, galleryName: string, galleryApplicationName: string, galleryApplicationVersionName: string, options?: GalleryApplicationVersionsGetOptionalParams): Promise<GalleryApplicationVersionsGetResponse>;
    /**
     * Delete a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version resides.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be deleted.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, galleryName: string, galleryApplicationName: string, galleryApplicationVersionName: string, options?: GalleryApplicationVersionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version resides.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be deleted.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, galleryName: string, galleryApplicationName: string, galleryApplicationVersionName: string, options?: GalleryApplicationVersionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface GalleryApplicationVersionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GalleryApplicationVersionsCreateOrUpdateResponse = GalleryApplicationVersion;

/** Optional parameters. */
export declare interface GalleryApplicationVersionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface GalleryApplicationVersionsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: ReplicationStatusTypes;
}

/** Contains response data for the get operation. */
export declare type GalleryApplicationVersionsGetResponse = GalleryApplicationVersion;

/** Optional parameters. */
export declare interface GalleryApplicationVersionsListByGalleryApplicationNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByGalleryApplicationNext operation. */
export declare type GalleryApplicationVersionsListByGalleryApplicationNextResponse = GalleryApplicationVersionList;

/** Optional parameters. */
export declare interface GalleryApplicationVersionsListByGalleryApplicationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByGalleryApplication operation. */
export declare type GalleryApplicationVersionsListByGalleryApplicationResponse = GalleryApplicationVersionList;

/** Optional parameters. */
export declare interface GalleryApplicationVersionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type GalleryApplicationVersionsUpdateResponse = GalleryApplicationVersion;

/** Specifies information about the gallery Application Version that you want to update. */
export declare interface GalleryApplicationVersionUpdate extends UpdateResourceDefinition {
    /** The publishing profile of a gallery image version. */
    publishingProfile?: GalleryApplicationVersionPublishingProfile;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: GalleryProvisioningState;
    /**
     * This is the replication status of the gallery image version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly replicationStatus?: ReplicationStatus;
}

/** Describes the basic gallery artifact publishing profile. */
export declare interface GalleryArtifactPublishingProfileBase {
    /** The target regions where the Image Version is going to be replicated to. This property is updatable. */
    targetRegions?: TargetRegion[];
    /** The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable. */
    replicaCount?: number;
    /** If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version. */
    excludeFromLatest?: boolean;
    /**
     * The timestamp for when the gallery image version is published.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publishedDate?: Date;
    /** The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable. */
    endOfLifeDate?: Date;
    /** Specifies the storage account type to be used to store the image. This property is not updatable. */
    storageAccountType?: StorageAccountType;
    /** Optional parameter which specifies the mode to be used for replication. This property is not updatable. */
    replicationMode?: ReplicationMode;
    /** The target extended locations where the Image Version is going to be replicated to. This property is updatable. */
    targetExtendedLocations?: GalleryTargetExtendedLocation[];
}

/** The source image from which the Image Version is going to be created. */
export declare interface GalleryArtifactSource {
    /** The managed artifact. */
    managedImage: ManagedArtifact;
}

/** The gallery artifact version source. */
export declare interface GalleryArtifactVersionSource {
    /** The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource. */
    id?: string;
    /** The uri of the gallery artifact version source. Currently used to specify vhd/blob source. */
    uri?: string;
}

/** This is the data disk image. */
export declare interface GalleryDataDiskImage extends GalleryDiskImage {
    /** This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine. */
    lun: number;
}

/** This is the disk image base class. */
export declare interface GalleryDiskImage {
    /**
     * This property indicates the size of the VHD to be created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sizeInGB?: number;
    /** The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite' */
    hostCaching?: HostCaching;
    /** The gallery artifact version source. */
    source?: GalleryArtifactVersionSource;
}

/**
 * Defines values for GalleryExpandParams. \
 * {@link KnownGalleryExpandParams} can be used interchangeably with GalleryExpandParams,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SharingProfile\/Groups**
 */
export declare type GalleryExpandParams = string;

/** The name of the extended location. */
export declare interface GalleryExtendedLocation {
    name?: string;
    /** It is type of the extended location. */
    type?: GalleryExtendedLocationType;
}

/**
 * Defines values for GalleryExtendedLocationType. \
 * {@link KnownGalleryExtendedLocationType} can be used interchangeably with GalleryExtendedLocationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EdgeZone** \
 * **Unknown**
 */
export declare type GalleryExtendedLocationType = string;

/** Describes the gallery unique name. */
export declare interface GalleryIdentifier {
    /**
     * The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueName?: string;
}

/** Specifies information about the gallery image definition that you want to create or update. */
export declare interface GalleryImage extends Resource {
    /** The description of this gallery image definition resource. This property is updatable. */
    description?: string;
    /** The Eula agreement for the gallery image definition. */
    eula?: string;
    /** The privacy statement uri. */
    privacyStatementUri?: string;
    /** The release note uri. */
    releaseNoteUri?: string;
    /** This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux** */
    osType?: OperatingSystemTypes;
    /** This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'. */
    osState?: OperatingSystemStateTypes;
    /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
    hyperVGeneration?: HyperVGeneration;
    /** The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. */
    endOfLifeDate?: Date;
    /** This is the gallery image definition identifier. */
    identifier?: GalleryImageIdentifier;
    /** The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. */
    recommended?: RecommendedMachineConfiguration;
    /** Describes the disallowed disk types. */
    disallowed?: Disallowed;
    /** Describes the gallery image definition purchase plan. This is used by marketplace images. */
    purchasePlan?: ImagePurchasePlan;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: GalleryProvisioningState;
    /** A list of gallery image features. */
    features?: GalleryImageFeature[];
    /** The architecture of the image. Applicable to OS disks only. */
    architecture?: Architecture;
}

/** A feature for gallery image. */
export declare interface GalleryImageFeature {
    /** The name of the gallery image feature. */
    name?: string;
    /** The value of the gallery image feature. */
    value?: string;
}

/** This is the gallery image definition identifier. */
export declare interface GalleryImageIdentifier {
    /** The name of the gallery image definition publisher. */
    publisher: string;
    /** The name of the gallery image definition offer. */
    offer: string;
    /** The name of the gallery image definition SKU. */
    sku: string;
}

/** The List Gallery Images operation response. */
export declare interface GalleryImageList {
    /** A list of Shared Image Gallery images. */
    value: GalleryImage[];
    /** The uri to fetch the next page of Image Definitions in the Shared Image Gallery. Call ListNext() with this to fetch the next page of gallery image definitions. */
    nextLink?: string;
}

/** Interface representing a GalleryImages. */
export declare interface GalleryImages {
    /**
     * List gallery image definitions in a gallery.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery from which Image Definitions are to be
     *                    listed.
     * @param options The options parameters.
     */
    listByGallery(resourceGroupName: string, galleryName: string, options?: GalleryImagesListByGalleryOptionalParams): PagedAsyncIterableIterator<GalleryImage>;
    /**
     * Create or update a gallery image definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
     *                    created.
     * @param galleryImageName The name of the gallery image definition to be created or updated. The
     *                         allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle.
     *                         The maximum length is 80 characters.
     * @param galleryImage Parameters supplied to the create or update gallery image operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, galleryName: string, galleryImageName: string, galleryImage: GalleryImage, options?: GalleryImagesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<GalleryImagesCreateOrUpdateResponse>, GalleryImagesCreateOrUpdateResponse>>;
    /**
     * Create or update a gallery image definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
     *                    created.
     * @param galleryImageName The name of the gallery image definition to be created or updated. The
     *                         allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle.
     *                         The maximum length is 80 characters.
     * @param galleryImage Parameters supplied to the create or update gallery image operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, galleryName: string, galleryImageName: string, galleryImage: GalleryImage, options?: GalleryImagesCreateOrUpdateOptionalParams): Promise<GalleryImagesCreateOrUpdateResponse>;
    /**
     * Update a gallery image definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
     *                    updated.
     * @param galleryImageName The name of the gallery image definition to be updated. The allowed
     *                         characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *                         maximum length is 80 characters.
     * @param galleryImage Parameters supplied to the update gallery image operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, galleryName: string, galleryImageName: string, galleryImage: GalleryImageUpdate, options?: GalleryImagesUpdateOptionalParams): Promise<PollerLike<PollOperationState<GalleryImagesUpdateResponse>, GalleryImagesUpdateResponse>>;
    /**
     * Update a gallery image definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
     *                    updated.
     * @param galleryImageName The name of the gallery image definition to be updated. The allowed
     *                         characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *                         maximum length is 80 characters.
     * @param galleryImage Parameters supplied to the update gallery image operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, galleryName: string, galleryImageName: string, galleryImage: GalleryImageUpdate, options?: GalleryImagesUpdateOptionalParams): Promise<GalleryImagesUpdateResponse>;
    /**
     * Retrieves information about a gallery image definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery from which the Image Definitions are to be
     *                    retrieved.
     * @param galleryImageName The name of the gallery image definition to be retrieved.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, galleryName: string, galleryImageName: string, options?: GalleryImagesGetOptionalParams): Promise<GalleryImagesGetResponse>;
    /**
     * Delete a gallery image.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
     *                    deleted.
     * @param galleryImageName The name of the gallery image definition to be deleted.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, galleryName: string, galleryImageName: string, options?: GalleryImagesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a gallery image.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
     *                    deleted.
     * @param galleryImageName The name of the gallery image definition to be deleted.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, galleryName: string, galleryImageName: string, options?: GalleryImagesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface GalleryImagesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GalleryImagesCreateOrUpdateResponse = GalleryImage;

/** Optional parameters. */
export declare interface GalleryImagesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface GalleryImagesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type GalleryImagesGetResponse = GalleryImage;

/** Optional parameters. */
export declare interface GalleryImagesListByGalleryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByGalleryNext operation. */
export declare type GalleryImagesListByGalleryNextResponse = GalleryImageList;

/** Optional parameters. */
export declare interface GalleryImagesListByGalleryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByGallery operation. */
export declare type GalleryImagesListByGalleryResponse = GalleryImageList;

/** Optional parameters. */
export declare interface GalleryImagesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type GalleryImagesUpdateResponse = GalleryImage;

/** Specifies information about the gallery image definition that you want to update. */
export declare interface GalleryImageUpdate extends UpdateResourceDefinition {
    /** The description of this gallery image definition resource. This property is updatable. */
    description?: string;
    /** The Eula agreement for the gallery image definition. */
    eula?: string;
    /** The privacy statement uri. */
    privacyStatementUri?: string;
    /** The release note uri. */
    releaseNoteUri?: string;
    /** This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux** */
    osType?: OperatingSystemTypes;
    /** This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'. */
    osState?: OperatingSystemStateTypes;
    /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
    hyperVGeneration?: HyperVGeneration;
    /** The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. */
    endOfLifeDate?: Date;
    /** This is the gallery image definition identifier. */
    identifier?: GalleryImageIdentifier;
    /** The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. */
    recommended?: RecommendedMachineConfiguration;
    /** Describes the disallowed disk types. */
    disallowed?: Disallowed;
    /** Describes the gallery image definition purchase plan. This is used by marketplace images. */
    purchasePlan?: ImagePurchasePlan;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: GalleryProvisioningState;
    /** A list of gallery image features. */
    features?: GalleryImageFeature[];
    /** The architecture of the image. Applicable to OS disks only. */
    architecture?: Architecture;
}

/** Specifies information about the gallery image version that you want to create or update. */
export declare interface GalleryImageVersion extends Resource {
    /** The publishing profile of a gallery image Version. */
    publishingProfile?: GalleryImageVersionPublishingProfile;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: GalleryProvisioningState;
    /** This is the storage profile of a Gallery Image Version. */
    storageProfile?: GalleryImageVersionStorageProfile;
    /**
     * This is the replication status of the gallery image version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly replicationStatus?: ReplicationStatus;
}

/** The List Gallery Image version operation response. */
export declare interface GalleryImageVersionList {
    /** A list of gallery image versions. */
    value: GalleryImageVersion[];
    /** The uri to fetch the next page of gallery image versions. Call ListNext() with this to fetch the next page of gallery image versions. */
    nextLink?: string;
}

/** The publishing profile of a gallery image Version. */
export declare interface GalleryImageVersionPublishingProfile extends GalleryArtifactPublishingProfileBase {
}

/** Interface representing a GalleryImageVersions. */
export declare interface GalleryImageVersions {
    /**
     * List gallery image versions in a gallery image definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
     * @param galleryImageName The name of the Shared Image Gallery Image Definition from which the Image
     *                         Versions are to be listed.
     * @param options The options parameters.
     */
    listByGalleryImage(resourceGroupName: string, galleryName: string, galleryImageName: string, options?: GalleryImageVersionsListByGalleryImageOptionalParams): PagedAsyncIterableIterator<GalleryImageVersion>;
    /**
     * Create or update a gallery image version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
     * @param galleryImageName The name of the gallery image definition in which the Image Version is to be
     *                         created.
     * @param galleryImageVersionName The name of the gallery image version to be created. Needs to follow
     *                                semantic version name pattern: The allowed characters are digit and period. Digits must be within
     *                                the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param galleryImageVersion Parameters supplied to the create or update gallery image version
     *                            operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, galleryName: string, galleryImageName: string, galleryImageVersionName: string, galleryImageVersion: GalleryImageVersion, options?: GalleryImageVersionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<GalleryImageVersionsCreateOrUpdateResponse>, GalleryImageVersionsCreateOrUpdateResponse>>;
    /**
     * Create or update a gallery image version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
     * @param galleryImageName The name of the gallery image definition in which the Image Version is to be
     *                         created.
     * @param galleryImageVersionName The name of the gallery image version to be created. Needs to follow
     *                                semantic version name pattern: The allowed characters are digit and period. Digits must be within
     *                                the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param galleryImageVersion Parameters supplied to the create or update gallery image version
     *                            operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, galleryName: string, galleryImageName: string, galleryImageVersionName: string, galleryImageVersion: GalleryImageVersion, options?: GalleryImageVersionsCreateOrUpdateOptionalParams): Promise<GalleryImageVersionsCreateOrUpdateResponse>;
    /**
     * Update a gallery image version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
     * @param galleryImageName The name of the gallery image definition in which the Image Version is to be
     *                         updated.
     * @param galleryImageVersionName The name of the gallery image version to be updated. Needs to follow
     *                                semantic version name pattern: The allowed characters are digit and period. Digits must be within
     *                                the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param galleryImageVersion Parameters supplied to the update gallery image version operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, galleryName: string, galleryImageName: string, galleryImageVersionName: string, galleryImageVersion: GalleryImageVersionUpdate, options?: GalleryImageVersionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<GalleryImageVersionsUpdateResponse>, GalleryImageVersionsUpdateResponse>>;
    /**
     * Update a gallery image version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
     * @param galleryImageName The name of the gallery image definition in which the Image Version is to be
     *                         updated.
     * @param galleryImageVersionName The name of the gallery image version to be updated. Needs to follow
     *                                semantic version name pattern: The allowed characters are digit and period. Digits must be within
     *                                the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param galleryImageVersion Parameters supplied to the update gallery image version operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, galleryName: string, galleryImageName: string, galleryImageVersionName: string, galleryImageVersion: GalleryImageVersionUpdate, options?: GalleryImageVersionsUpdateOptionalParams): Promise<GalleryImageVersionsUpdateResponse>;
    /**
     * Retrieves information about a gallery image version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
     * @param galleryImageName The name of the gallery image definition in which the Image Version resides.
     * @param galleryImageVersionName The name of the gallery image version to be retrieved.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, galleryName: string, galleryImageName: string, galleryImageVersionName: string, options?: GalleryImageVersionsGetOptionalParams): Promise<GalleryImageVersionsGetResponse>;
    /**
     * Delete a gallery image version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
     * @param galleryImageName The name of the gallery image definition in which the Image Version resides.
     * @param galleryImageVersionName The name of the gallery image version to be deleted.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, galleryName: string, galleryImageName: string, galleryImageVersionName: string, options?: GalleryImageVersionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a gallery image version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
     * @param galleryImageName The name of the gallery image definition in which the Image Version resides.
     * @param galleryImageVersionName The name of the gallery image version to be deleted.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, galleryName: string, galleryImageName: string, galleryImageVersionName: string, options?: GalleryImageVersionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface GalleryImageVersionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GalleryImageVersionsCreateOrUpdateResponse = GalleryImageVersion;

/** Optional parameters. */
export declare interface GalleryImageVersionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface GalleryImageVersionsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: ReplicationStatusTypes;
}

/** Contains response data for the get operation. */
export declare type GalleryImageVersionsGetResponse = GalleryImageVersion;

/** Optional parameters. */
export declare interface GalleryImageVersionsListByGalleryImageNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByGalleryImageNext operation. */
export declare type GalleryImageVersionsListByGalleryImageNextResponse = GalleryImageVersionList;

/** Optional parameters. */
export declare interface GalleryImageVersionsListByGalleryImageOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByGalleryImage operation. */
export declare type GalleryImageVersionsListByGalleryImageResponse = GalleryImageVersionList;

/** This is the storage profile of a Gallery Image Version. */
export declare interface GalleryImageVersionStorageProfile {
    /** The gallery artifact version source. */
    source?: GalleryArtifactVersionSource;
    /** This is the OS disk image. */
    osDiskImage?: GalleryOSDiskImage;
    /** A list of data disk images. */
    dataDiskImages?: GalleryDataDiskImage[];
}

/** Optional parameters. */
export declare interface GalleryImageVersionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type GalleryImageVersionsUpdateResponse = GalleryImageVersion;

/** Specifies information about the gallery image version that you want to update. */
export declare interface GalleryImageVersionUpdate extends UpdateResourceDefinition {
    /** The publishing profile of a gallery image Version. */
    publishingProfile?: GalleryImageVersionPublishingProfile;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: GalleryProvisioningState;
    /** This is the storage profile of a Gallery Image Version. */
    storageProfile?: GalleryImageVersionStorageProfile;
    /**
     * This is the replication status of the gallery image version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly replicationStatus?: ReplicationStatus;
}

/** The List Galleries operation response. */
export declare interface GalleryList {
    /** A list of galleries. */
    value: Gallery[];
    /** The uri to fetch the next page of galleries. Call ListNext() with this to fetch the next page of galleries. */
    nextLink?: string;
}

/** This is the OS disk image. */
export declare interface GalleryOSDiskImage extends GalleryDiskImage {
}

/**
 * Defines values for GalleryProvisioningState. \
 * {@link KnownGalleryProvisioningState} can be used interchangeably with GalleryProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Failed** \
 * **Succeeded** \
 * **Deleting** \
 * **Migrating**
 */
export declare type GalleryProvisioningState = string;

/**
 * Defines values for GallerySharingPermissionTypes. \
 * {@link KnownGallerySharingPermissionTypes} can be used interchangeably with GallerySharingPermissionTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Private** \
 * **Groups** \
 * **Community**
 */
export declare type GallerySharingPermissionTypes = string;

/** Interface representing a GallerySharingProfile. */
export declare interface GallerySharingProfile {
    /**
     * Update sharing profile of a gallery.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery.
     * @param sharingUpdate Parameters supplied to the update gallery sharing profile.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, galleryName: string, sharingUpdate: SharingUpdate, options?: GallerySharingProfileUpdateOptionalParams): Promise<PollerLike<PollOperationState<GallerySharingProfileUpdateResponse>, GallerySharingProfileUpdateResponse>>;
    /**
     * Update sharing profile of a gallery.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Image Gallery.
     * @param sharingUpdate Parameters supplied to the update gallery sharing profile.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, galleryName: string, sharingUpdate: SharingUpdate, options?: GallerySharingProfileUpdateOptionalParams): Promise<GallerySharingProfileUpdateResponse>;
}

/** Optional parameters. */
export declare interface GallerySharingProfileUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type GallerySharingProfileUpdateResponse = SharingUpdate;

export declare interface GalleryTargetExtendedLocation {
    /** The name of the region. */
    name?: string;
    /** The name of the extended location. */
    extendedLocation?: GalleryExtendedLocation;
    /** The number of replicas of the Image Version to be created per extended location. This property is updatable. */
    extendedLocationReplicaCount?: number;
    /** Specifies the storage account type to be used to store the image. This property is not updatable. */
    storageAccountType?: StorageAccountType;
    /** Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact. */
    encryption?: EncryptionImages;
}

/** Specifies information about the Shared Image Gallery that you want to update. */
export declare interface GalleryUpdate extends UpdateResourceDefinition {
    /** The description of this Shared Image Gallery resource. This property is updatable. */
    description?: string;
    /** Describes the gallery unique name. */
    identifier?: GalleryIdentifier;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: GalleryProvisioningState;
    /** Profile for gallery sharing to subscription or tenant */
    sharingProfile?: SharingProfile;
    /** Contains information about the soft deletion policy of the gallery. */
    softDeletePolicy?: SoftDeletePolicy;
    /**
     * Sharing status of current gallery.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sharingStatus?: SharingStatus;
}

/** Data used for requesting a SAS. */
export declare interface GrantAccessData {
    access: AccessLevel;
    /** Time duration in seconds until the SAS access expires. */
    durationInSeconds: number;
    /** Set this flag to true to get additional SAS for VM guest state */
    getSecureVMGuestStateSAS?: boolean;
}

/** Specifies the hardware settings for the virtual machine. */
export declare interface HardwareProfile {
    /** Specifies the size of the virtual machine. <br><br> The enum data type is currently deprecated and will be removed by December 23rd 2023. <br><br> Recommended way to get the list of available sizes is using these APIs: <br><br> [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes) <br><br> [List all available virtual machine sizes in a region]( https://docs.microsoft.com/rest/api/compute/resourceskus/list) <br><br> [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes). For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/sizes). <br><br> The available VM sizes depend on region and availability set. */
    vmSize?: VirtualMachineSizeTypes;
    /** Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-07-01. <br><br> This feature is still in preview mode and is not supported for VirtualMachineScaleSet. <br><br> Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details. */
    vmSizeProperties?: VMSizeProperties;
}

/** Defines values for HostCaching. */
export declare type HostCaching = "None" | "ReadOnly" | "ReadWrite";

/**
 * Defines values for HyperVGeneration. \
 * {@link KnownHyperVGeneration} can be used interchangeably with HyperVGeneration,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **V1** \
 * **V2**
 */
export declare type HyperVGeneration = string;

/**
 * Defines values for HyperVGenerationType. \
 * {@link KnownHyperVGenerationType} can be used interchangeably with HyperVGenerationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **V1** \
 * **V2**
 */
export declare type HyperVGenerationType = string;

/**
 * Defines values for HyperVGenerationTypes. \
 * {@link KnownHyperVGenerationTypes} can be used interchangeably with HyperVGenerationTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **V1** \
 * **V2**
 */
export declare type HyperVGenerationTypes = string;

/** The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist. */
declare interface Image_2 extends Resource {
    /** The extended location of the Image. */
    extendedLocation?: ExtendedLocation;
    /** The source virtual machine from which Image is created. */
    sourceVirtualMachine?: SubResource;
    /** Specifies the storage settings for the virtual machine disks. */
    storageProfile?: ImageStorageProfile;
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** Specifies the HyperVGenerationType of the VirtualMachine created from the image. From API Version 2019-03-01 if the image source is a blob, then we need the user to specify the value, if the source is managed resource like disk or snapshot, we may require the user to specify the property if we cannot deduce it from the source managed resource. */
    hyperVGeneration?: HyperVGenerationTypes;
}
export { Image_2 as Image }

/** Describes a data disk. */
export declare interface ImageDataDisk extends ImageDisk {
    /** Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. */
    lun: number;
}

/** Describes a image disk. */
export declare interface ImageDisk {
    /** The snapshot. */
    snapshot?: SubResource;
    /** The managedDisk. */
    managedDisk?: SubResource;
    /** The Virtual Hard Disk. */
    blobUri?: string;
    /** Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage** */
    caching?: CachingTypes;
    /** Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB */
    diskSizeGB?: number;
    /** Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. */
    storageAccountType?: StorageAccountTypes;
    /** Specifies the customer managed disk encryption set resource id for the managed image disk. */
    diskEncryptionSet?: DiskEncryptionSetParameters;
}

/** The source image used for creating the disk. */
export declare interface ImageDiskReference {
    /** A relative uri containing either a Platform Image Repository, user image, or Azure Compute Gallery image reference. */
    id?: string;
    /** A relative uri containing a direct shared Azure Compute Gallery image reference. */
    sharedGalleryImageId?: string;
    /** A relative uri containing a community Azure Compute Gallery image reference. */
    communityGalleryImageId?: string;
    /** If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null. */
    lun?: number;
}

/** The List Image operation response. */
export declare interface ImageListResult {
    /** The list of Images. */
    value: Image_2[];
    /** The uri to fetch the next page of Images. Call ListNext() with this to fetch the next page of Images. */
    nextLink?: string;
}

/** Describes an Operating System disk. */
export declare interface ImageOSDisk extends ImageDisk {
    /** This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux** */
    osType: OperatingSystemTypes;
    /** The OS State. For managed images, use Generalized. */
    osState: OperatingSystemStateTypes;
}

/** Describes the gallery image definition purchase plan. This is used by marketplace images. */
export declare interface ImagePurchasePlan {
    /** The plan ID. */
    name?: string;
    /** The publisher ID. */
    publisher?: string;
    /** The product ID. */
    product?: string;
}

/** Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set. */
export declare interface ImageReference extends SubResource {
    /** The image publisher. */
    publisher?: string;
    /** Specifies the offer of the platform image or marketplace image used to create the virtual machine. */
    offer?: string;
    /** The image SKU. */
    sku?: string;
    /** Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available. Please do not use field 'version' for gallery image deployment, gallery image should always use 'id' field for deployment, to use 'latest' version of gallery image, just set '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}' in the 'id' field without version input. */
    version?: string;
    /**
     * Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly exactVersion?: string;
    /** Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call. */
    sharedGalleryImageId?: string;
    /** Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET call. */
    communityGalleryImageId?: string;
}

/** Interface representing a Images. */
export declare interface Images {
    /**
     * Gets the list of images under a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ImagesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Image_2>;
    /**
     * Gets the list of Images in the subscription. Use nextLink property in the response to get the next
     * page of Images. Do this till nextLink is null to fetch all the Images.
     * @param options The options parameters.
     */
    list(options?: ImagesListOptionalParams): PagedAsyncIterableIterator<Image_2>;
    /**
     * Create or update an image.
     * @param resourceGroupName The name of the resource group.
     * @param imageName The name of the image.
     * @param parameters Parameters supplied to the Create Image operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, imageName: string, parameters: Image_2, options?: ImagesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ImagesCreateOrUpdateResponse>, ImagesCreateOrUpdateResponse>>;
    /**
     * Create or update an image.
     * @param resourceGroupName The name of the resource group.
     * @param imageName The name of the image.
     * @param parameters Parameters supplied to the Create Image operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, imageName: string, parameters: Image_2, options?: ImagesCreateOrUpdateOptionalParams): Promise<ImagesCreateOrUpdateResponse>;
    /**
     * Update an image.
     * @param resourceGroupName The name of the resource group.
     * @param imageName The name of the image.
     * @param parameters Parameters supplied to the Update Image operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, imageName: string, parameters: ImageUpdate, options?: ImagesUpdateOptionalParams): Promise<PollerLike<PollOperationState<ImagesUpdateResponse>, ImagesUpdateResponse>>;
    /**
     * Update an image.
     * @param resourceGroupName The name of the resource group.
     * @param imageName The name of the image.
     * @param parameters Parameters supplied to the Update Image operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, imageName: string, parameters: ImageUpdate, options?: ImagesUpdateOptionalParams): Promise<ImagesUpdateResponse>;
    /**
     * Deletes an Image.
     * @param resourceGroupName The name of the resource group.
     * @param imageName The name of the image.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, imageName: string, options?: ImagesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes an Image.
     * @param resourceGroupName The name of the resource group.
     * @param imageName The name of the image.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, imageName: string, options?: ImagesDeleteOptionalParams): Promise<void>;
    /**
     * Gets an image.
     * @param resourceGroupName The name of the resource group.
     * @param imageName The name of the image.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, imageName: string, options?: ImagesGetOptionalParams): Promise<ImagesGetResponse>;
}

/** Optional parameters. */
export declare interface ImagesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ImagesCreateOrUpdateResponse = Image_2;

/** Optional parameters. */
export declare interface ImagesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ImagesGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type ImagesGetResponse = Image_2;

/** Optional parameters. */
export declare interface ImagesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ImagesListByResourceGroupNextResponse = ImageListResult;

/** Optional parameters. */
export declare interface ImagesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ImagesListByResourceGroupResponse = ImageListResult;

/** Optional parameters. */
export declare interface ImagesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ImagesListNextResponse = ImageListResult;

/** Optional parameters. */
export declare interface ImagesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ImagesListResponse = ImageListResult;

/** Describes a storage profile. */
export declare interface ImageStorageProfile {
    /** Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). */
    osDisk?: ImageOSDisk;
    /** Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). */
    dataDisks?: ImageDataDisk[];
    /** Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS). */
    zoneResilient?: boolean;
}

/** Optional parameters. */
export declare interface ImagesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ImagesUpdateResponse = Image_2;

/** The source user image virtual hard disk. Only tags may be updated. */
export declare interface ImageUpdate extends UpdateResource {
    /** The source virtual machine from which Image is created. */
    sourceVirtualMachine?: SubResource;
    /** Specifies the storage settings for the virtual machine disks. */
    storageProfile?: ImageStorageProfile;
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** Specifies the HyperVGenerationType of the VirtualMachine created from the image. From API Version 2019-03-01 if the image source is a blob, then we need the user to specify the value, if the source is managed resource like disk or snapshot, we may require the user to specify the property if we cannot deduce it from the source managed resource. */
    hyperVGeneration?: HyperVGenerationTypes;
}

/** Inner error details. */
export declare interface InnerError {
    /** The exception type. */
    exceptiontype?: string;
    /** The internal error message or exception dump. */
    errordetail?: string;
}

/** The role instance SKU. */
export declare interface InstanceSku {
    /**
     * The sku name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The tier of the cloud service role instance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: string;
}

/** Instance view status. */
export declare interface InstanceViewStatus {
    /** The status code. */
    code?: string;
    /** The level code. */
    level?: StatusLevelTypes;
    /** The short localizable label for the status. */
    displayStatus?: string;
    /** The detailed status message, including for alerts and error messages. */
    message?: string;
    /** The time of the status. */
    time?: Date;
}

/** Instance view statuses. */
export declare interface InstanceViewStatusesSummary {
    /**
     * The summary.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statusesSummary?: StatusCodeCount[];
}

/** Defines values for InstanceViewTypes. */
export declare type InstanceViewTypes = "instanceView" | "userData";

/** Defines values for IntervalInMins. */
export declare type IntervalInMins = "ThreeMins" | "FiveMins" | "ThirtyMins" | "SixtyMins";

/**
 * Defines values for IPVersion. \
 * {@link KnownIPVersion} can be used interchangeably with IPVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPv4** \
 * **IPv6**
 */
export declare type IPVersion = string;

/**
 * Defines values for IPVersions. \
 * {@link KnownIPVersions} can be used interchangeably with IPVersions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPv4** \
 * **IPv6**
 */
export declare type IPVersions = string;

/** Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots */
export declare interface KeyForDiskEncryptionSet {
    /** Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription. */
    sourceVault?: SourceVault;
    /** Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value. */
    keyUrl: string;
}

/** Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey */
export declare interface KeyVaultAndKeyReference {
    /** Resource id of the KeyVault containing the key or secret */
    sourceVault: SourceVault;
    /** Url pointing to a key or secret in KeyVault */
    keyUrl: string;
}

/** Key Vault Secret Url and vault id of the encryption key */
export declare interface KeyVaultAndSecretReference {
    /** Resource id of the KeyVault containing the key or secret */
    sourceVault: SourceVault;
    /** Url pointing to a key or secret in KeyVault */
    secretUrl: string;
}

/** Describes a reference to Key Vault Key */
export declare interface KeyVaultKeyReference {
    /** The URL referencing a key encryption key in Key Vault. */
    keyUrl: string;
    /** The relative URL of the Key Vault containing the key. */
    sourceVault: SubResource;
}

/** Describes a reference to Key Vault Secret */
export declare interface KeyVaultSecretReference {
    /** The URL referencing a secret in a Key Vault. */
    secretUrl: string;
    /** The relative URL of the Key Vault containing the secret. */
    sourceVault: SubResource;
}

/** Known values of {@link AccessLevel} that the service accepts. */
export declare enum KnownAccessLevel {
    /** None */
    None = "None",
    /** Read */
    Read = "Read",
    /** Write */
    Write = "Write"
}

/** Known values of {@link AggregatedReplicationState} that the service accepts. */
export declare enum KnownAggregatedReplicationState {
    /** Unknown */
    Unknown = "Unknown",
    /** InProgress */
    InProgress = "InProgress",
    /** Completed */
    Completed = "Completed",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link Architecture} that the service accepts. */
export declare enum KnownArchitecture {
    /** X64 */
    X64 = "x64",
    /** Arm64 */
    Arm64 = "Arm64"
}

/** Known values of {@link ArchitectureTypes} that the service accepts. */
export declare enum KnownArchitectureTypes {
    /** X64 */
    X64 = "x64",
    /** Arm64 */
    Arm64 = "Arm64"
}

/** Known values of {@link AvailabilitySetSkuTypes} that the service accepts. */
export declare enum KnownAvailabilitySetSkuTypes {
    /** Classic */
    Classic = "Classic",
    /** Aligned */
    Aligned = "Aligned"
}

/** Known values of {@link CapacityReservationGroupInstanceViewTypes} that the service accepts. */
export declare enum KnownCapacityReservationGroupInstanceViewTypes {
    /** InstanceView */
    InstanceView = "instanceView"
}

/** Known values of {@link CapacityReservationInstanceViewTypes} that the service accepts. */
export declare enum KnownCapacityReservationInstanceViewTypes {
    /** InstanceView */
    InstanceView = "instanceView"
}

/** Known values of {@link CloudServiceSlotType} that the service accepts. */
export declare enum KnownCloudServiceSlotType {
    /** Production */
    Production = "Production",
    /** Staging */
    Staging = "Staging"
}

/** Known values of {@link CloudServiceUpgradeMode} that the service accepts. */
export declare enum KnownCloudServiceUpgradeMode {
    /** Auto */
    Auto = "Auto",
    /** Manual */
    Manual = "Manual",
    /** Simultaneous */
    Simultaneous = "Simultaneous"
}

/** Known values of {@link ConfidentialVMEncryptionType} that the service accepts. */
export declare enum KnownConfidentialVMEncryptionType {
    /** EncryptedVMGuestStateOnlyWithPmk */
    EncryptedVMGuestStateOnlyWithPmk = "EncryptedVMGuestStateOnlyWithPmk",
    /** EncryptedWithPmk */
    EncryptedWithPmk = "EncryptedWithPmk",
    /** EncryptedWithCmk */
    EncryptedWithCmk = "EncryptedWithCmk"
}

/** Known values of {@link ConsistencyModeTypes} that the service accepts. */
export declare enum KnownConsistencyModeTypes {
    /** CrashConsistent */
    CrashConsistent = "CrashConsistent",
    /** FileSystemConsistent */
    FileSystemConsistent = "FileSystemConsistent",
    /** ApplicationConsistent */
    ApplicationConsistent = "ApplicationConsistent"
}

/** Known values of {@link CopyCompletionErrorReason} that the service accepts. */
export declare enum KnownCopyCompletionErrorReason {
    /** Indicates that the source snapshot was deleted while the background copy of the resource created via CopyStart operation was in progress. */
    CopySourceNotFound = "CopySourceNotFound"
}

/** Known values of {@link DataAccessAuthMode} that the service accepts. */
export declare enum KnownDataAccessAuthMode {
    /** When export/upload URL is used, the system checks if the user has an identity in Azure Active Directory and has necessary permissions to export/upload the data. Please refer to aka.ms/DisksAzureADAuth. */
    AzureActiveDirectory = "AzureActiveDirectory",
    /** No additional authentication would be performed when accessing export/upload URL. */
    None = "None"
}

/** Known values of {@link DeleteOptions} that the service accepts. */
export declare enum KnownDeleteOptions {
    /** Delete */
    Delete = "Delete",
    /** Detach */
    Detach = "Detach"
}

/** Known values of {@link DiffDiskOptions} that the service accepts. */
export declare enum KnownDiffDiskOptions {
    /** Local */
    Local = "Local"
}

/** Known values of {@link DiffDiskPlacement} that the service accepts. */
export declare enum KnownDiffDiskPlacement {
    /** CacheDisk */
    CacheDisk = "CacheDisk",
    /** ResourceDisk */
    ResourceDisk = "ResourceDisk"
}

/** Known values of {@link DiskControllerTypes} that the service accepts. */
export declare enum KnownDiskControllerTypes {
    /** Scsi */
    Scsi = "SCSI",
    /** NVMe */
    NVMe = "NVMe"
}

/** Known values of {@link DiskCreateOption} that the service accepts. */
export declare enum KnownDiskCreateOption {
    /** Create an empty data disk of a size given by diskSizeGB. */
    Empty = "Empty",
    /** Disk will be attached to a VM. */
    Attach = "Attach",
    /** Create a new disk from a platform image specified by the given imageReference or galleryImageReference. */
    FromImage = "FromImage",
    /** Create a disk by importing from a blob specified by a sourceUri in a storage account specified by storageAccountId. */
    Import = "Import",
    /** Create a new disk or snapshot by copying from a disk or snapshot specified by the given sourceResourceId. */
    Copy = "Copy",
    /** Create a new disk by copying from a backup recovery point. */
    Restore = "Restore",
    /** Create a new disk by obtaining a write token and using it to directly upload the contents of the disk. */
    Upload = "Upload",
    /** Create a new disk by using a deep copy process, where the resource creation is considered complete only after all data has been copied from the source. */
    CopyStart = "CopyStart",
    /** Similar to Import create option. Create a new Trusted Launch VM or Confidential VM supported disk by importing additional blob for VM guest state specified by securityDataUri in storage account specified by storageAccountId */
    ImportSecure = "ImportSecure",
    /** Similar to Upload create option. Create a new Trusted Launch VM or Confidential VM supported disk and upload using write token in both disk and VM guest state */
    UploadPreparedSecure = "UploadPreparedSecure"
}

/** Known values of {@link DiskCreateOptionTypes} that the service accepts. */
export declare enum KnownDiskCreateOptionTypes {
    /** FromImage */
    FromImage = "FromImage",
    /** Empty */
    Empty = "Empty",
    /** Attach */
    Attach = "Attach"
}

/** Known values of {@link DiskDeleteOptionTypes} that the service accepts. */
export declare enum KnownDiskDeleteOptionTypes {
    /** Delete */
    Delete = "Delete",
    /** Detach */
    Detach = "Detach"
}

/** Known values of {@link DiskDetachOptionTypes} that the service accepts. */
export declare enum KnownDiskDetachOptionTypes {
    /** ForceDetach */
    ForceDetach = "ForceDetach"
}

/** Known values of {@link DiskEncryptionSetIdentityType} that the service accepts. */
export declare enum KnownDiskEncryptionSetIdentityType {
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned, UserAssigned",
    /** None */
    None = "None"
}

/** Known values of {@link DiskEncryptionSetType} that the service accepts. */
export declare enum KnownDiskEncryptionSetType {
    /** Resource using diskEncryptionSet would be encrypted at rest with Customer managed key that can be changed and revoked by a customer. */
    EncryptionAtRestWithCustomerKey = "EncryptionAtRestWithCustomerKey",
    /** Resource using diskEncryptionSet would be encrypted at rest with two layers of encryption. One of the keys is Customer managed and the other key is Platform managed. */
    EncryptionAtRestWithPlatformAndCustomerKeys = "EncryptionAtRestWithPlatformAndCustomerKeys",
    /** Confidential VM supported disk and VM guest state would be encrypted with customer managed key. */
    ConfidentialVmEncryptedWithCustomerKey = "ConfidentialVmEncryptedWithCustomerKey"
}

/** Known values of {@link DiskSecurityTypes} that the service accepts. */
export declare enum KnownDiskSecurityTypes {
    /** Trusted Launch provides security features such as secure boot and virtual Trusted Platform Module (vTPM) */
    TrustedLaunch = "TrustedLaunch",
    /** Indicates Confidential VM disk with only VM guest state encrypted */
    ConfidentialVMVmguestStateOnlyEncryptedWithPlatformKey = "ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey",
    /** Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a platform managed key */
    ConfidentialVMDiskEncryptedWithPlatformKey = "ConfidentialVM_DiskEncryptedWithPlatformKey",
    /** Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a customer managed key */
    ConfidentialVMDiskEncryptedWithCustomerKey = "ConfidentialVM_DiskEncryptedWithCustomerKey"
}

/** Known values of {@link DiskState} that the service accepts. */
export declare enum KnownDiskState {
    /** The disk is not being used and can be attached to a VM. */
    Unattached = "Unattached",
    /** The disk is currently attached to a running VM. */
    Attached = "Attached",
    /** The disk is attached to a stopped-deallocated VM. */
    Reserved = "Reserved",
    /** The disk is attached to a VM which is in hibernated state. */
    Frozen = "Frozen",
    /** The disk currently has an Active SAS Uri associated with it. */
    ActiveSAS = "ActiveSAS",
    /** The disk is attached to a VM in hibernated state and has an active SAS URI associated with it. */
    ActiveSASFrozen = "ActiveSASFrozen",
    /** A disk is ready to be created by upload by requesting a write token. */
    ReadyToUpload = "ReadyToUpload",
    /** A disk is created for upload and a write token has been issued for uploading to it. */
    ActiveUpload = "ActiveUpload"
}

/** Known values of {@link DiskStorageAccountTypes} that the service accepts. */
export declare enum KnownDiskStorageAccountTypes {
    /** Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access. */
    StandardLRS = "Standard_LRS",
    /** Premium SSD locally redundant storage. Best for production and performance sensitive workloads. */
    PremiumLRS = "Premium_LRS",
    /** Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev/test. */
    StandardSSDLRS = "StandardSSD_LRS",
    /** Ultra SSD locally redundant storage. Best for IO-intensive workloads such as SAP HANA, top tier databases (for example, SQL, Oracle), and other transaction-heavy workloads. */
    UltraSSDLRS = "UltraSSD_LRS",
    /** Premium SSD zone redundant storage. Best for the production workloads that need storage resiliency against zone failures. */
    PremiumZRS = "Premium_ZRS",
    /** Standard SSD zone redundant storage. Best for web servers, lightly used enterprise applications and dev/test that need storage resiliency against zone failures. */
    StandardSSDZRS = "StandardSSD_ZRS",
    /** Premium SSD v2 locally redundant storage. Best for production and performance-sensitive workloads that consistently require low latency and high IOPS and throughput. */
    PremiumV2LRS = "PremiumV2_LRS"
}

/** Known values of {@link EncryptionType} that the service accepts. */
export declare enum KnownEncryptionType {
    /** Disk is encrypted at rest with Platform managed key. It is the default encryption type. This is not a valid encryption type for disk encryption sets. */
    EncryptionAtRestWithPlatformKey = "EncryptionAtRestWithPlatformKey",
    /** Disk is encrypted at rest with Customer managed key that can be changed and revoked by a customer. */
    EncryptionAtRestWithCustomerKey = "EncryptionAtRestWithCustomerKey",
    /** Disk is encrypted at rest with 2 layers of encryption. One of the keys is Customer managed and the other key is Platform managed. */
    EncryptionAtRestWithPlatformAndCustomerKeys = "EncryptionAtRestWithPlatformAndCustomerKeys"
}

/** Known values of {@link ExecutionState} that the service accepts. */
export declare enum KnownExecutionState {
    /** Unknown */
    Unknown = "Unknown",
    /** Pending */
    Pending = "Pending",
    /** Running */
    Running = "Running",
    /** Failed */
    Failed = "Failed",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** TimedOut */
    TimedOut = "TimedOut",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link ExpandTypesForGetCapacityReservationGroups} that the service accepts. */
export declare enum KnownExpandTypesForGetCapacityReservationGroups {
    /** VirtualMachineScaleSetVMsRef */
    VirtualMachineScaleSetVMsRef = "virtualMachineScaleSetVMs/$ref",
    /** VirtualMachinesRef */
    VirtualMachinesRef = "virtualMachines/$ref"
}

/** Known values of {@link ExpandTypesForGetVMScaleSets} that the service accepts. */
export declare enum KnownExpandTypesForGetVMScaleSets {
    /** UserData */
    UserData = "userData"
}

/** Known values of {@link ExtendedLocationType} that the service accepts. */
export declare enum KnownExtendedLocationType {
    /** EdgeZone */
    EdgeZone = "EdgeZone"
}

/** Known values of {@link ExtendedLocationTypes} that the service accepts. */
export declare enum KnownExtendedLocationTypes {
    /** EdgeZone */
    EdgeZone = "EdgeZone"
}

/** Known values of {@link GalleryExpandParams} that the service accepts. */
export declare enum KnownGalleryExpandParams {
    /** SharingProfileGroups */
    SharingProfileGroups = "SharingProfile/Groups"
}

/** Known values of {@link GalleryExtendedLocationType} that the service accepts. */
export declare enum KnownGalleryExtendedLocationType {
    /** EdgeZone */
    EdgeZone = "EdgeZone",
    /** Unknown */
    Unknown = "Unknown"
}

/** Known values of {@link GalleryProvisioningState} that the service accepts. */
export declare enum KnownGalleryProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Failed */
    Failed = "Failed",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Deleting */
    Deleting = "Deleting",
    /** Migrating */
    Migrating = "Migrating"
}

/** Known values of {@link GallerySharingPermissionTypes} that the service accepts. */
export declare enum KnownGallerySharingPermissionTypes {
    /** Private */
    Private = "Private",
    /** Groups */
    Groups = "Groups",
    /** Community */
    Community = "Community"
}

/** Known values of {@link HyperVGeneration} that the service accepts. */
export declare enum KnownHyperVGeneration {
    /** V1 */
    V1 = "V1",
    /** V2 */
    V2 = "V2"
}

/** Known values of {@link HyperVGenerationType} that the service accepts. */
export declare enum KnownHyperVGenerationType {
    /** V1 */
    V1 = "V1",
    /** V2 */
    V2 = "V2"
}

/** Known values of {@link HyperVGenerationTypes} that the service accepts. */
export declare enum KnownHyperVGenerationTypes {
    /** V1 */
    V1 = "V1",
    /** V2 */
    V2 = "V2"
}

/** Known values of {@link IPVersion} that the service accepts. */
export declare enum KnownIPVersion {
    /** IPv4 */
    IPv4 = "IPv4",
    /** IPv6 */
    IPv6 = "IPv6"
}

/** Known values of {@link IPVersions} that the service accepts. */
export declare enum KnownIPVersions {
    /** IPv4 */
    IPv4 = "IPv4",
    /** IPv6 */
    IPv6 = "IPv6"
}

/** Known values of {@link LinuxPatchAssessmentMode} that the service accepts. */
export declare enum KnownLinuxPatchAssessmentMode {
    /** ImageDefault */
    ImageDefault = "ImageDefault",
    /** AutomaticByPlatform */
    AutomaticByPlatform = "AutomaticByPlatform"
}

/** Known values of {@link LinuxVMGuestPatchAutomaticByPlatformRebootSetting} that the service accepts. */
export declare enum KnownLinuxVMGuestPatchAutomaticByPlatformRebootSetting {
    /** Unknown */
    Unknown = "Unknown",
    /** IfRequired */
    IfRequired = "IfRequired",
    /** Never */
    Never = "Never",
    /** Always */
    Always = "Always"
}

/** Known values of {@link LinuxVMGuestPatchMode} that the service accepts. */
export declare enum KnownLinuxVMGuestPatchMode {
    /** ImageDefault */
    ImageDefault = "ImageDefault",
    /** AutomaticByPlatform */
    AutomaticByPlatform = "AutomaticByPlatform"
}

/** Known values of {@link NetworkAccessPolicy} that the service accepts. */
export declare enum KnownNetworkAccessPolicy {
    /** The disk can be exported or uploaded to from any network. */
    AllowAll = "AllowAll",
    /** The disk can be exported or uploaded to using a DiskAccess resource's private endpoints. */
    AllowPrivate = "AllowPrivate",
    /** The disk cannot be exported. */
    DenyAll = "DenyAll"
}

/** Known values of {@link NetworkApiVersion} that the service accepts. */
export declare enum KnownNetworkApiVersion {
    /** TwoThousandTwenty1101 */
    TwoThousandTwenty1101 = "2020-11-01"
}

/** Known values of {@link OperatingSystemType} that the service accepts. */
export declare enum KnownOperatingSystemType {
    /** Windows */
    Windows = "Windows",
    /** Linux */
    Linux = "Linux"
}

/** Known values of {@link OrchestrationMode} that the service accepts. */
export declare enum KnownOrchestrationMode {
    /** Uniform */
    Uniform = "Uniform",
    /** Flexible */
    Flexible = "Flexible"
}

/** Known values of {@link OrchestrationServiceNames} that the service accepts. */
export declare enum KnownOrchestrationServiceNames {
    /** AutomaticRepairs */
    AutomaticRepairs = "AutomaticRepairs",
    /** DummyOrchestrationServiceName */
    DummyOrchestrationServiceName = "DummyOrchestrationServiceName"
}

/** Known values of {@link OrchestrationServiceState} that the service accepts. */
export declare enum KnownOrchestrationServiceState {
    /** NotRunning */
    NotRunning = "NotRunning",
    /** Running */
    Running = "Running",
    /** Suspended */
    Suspended = "Suspended"
}

/** Known values of {@link OrchestrationServiceStateAction} that the service accepts. */
export declare enum KnownOrchestrationServiceStateAction {
    /** Resume */
    Resume = "Resume",
    /** Suspend */
    Suspend = "Suspend"
}

/** Known values of {@link PatchAssessmentState} that the service accepts. */
export declare enum KnownPatchAssessmentState {
    /** Unknown */
    Unknown = "Unknown",
    /** Available */
    Available = "Available"
}

/** Known values of {@link PatchInstallationState} that the service accepts. */
export declare enum KnownPatchInstallationState {
    /** Unknown */
    Unknown = "Unknown",
    /** Installed */
    Installed = "Installed",
    /** Failed */
    Failed = "Failed",
    /** Excluded */
    Excluded = "Excluded",
    /** NotSelected */
    NotSelected = "NotSelected",
    /** Pending */
    Pending = "Pending"
}

/** Known values of {@link PatchOperationStatus} that the service accepts. */
export declare enum KnownPatchOperationStatus {
    /** Unknown */
    Unknown = "Unknown",
    /** InProgress */
    InProgress = "InProgress",
    /** Failed */
    Failed = "Failed",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** CompletedWithWarnings */
    CompletedWithWarnings = "CompletedWithWarnings"
}

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateEndpointServiceConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected"
}

/** Known values of {@link ProximityPlacementGroupType} that the service accepts. */
export declare enum KnownProximityPlacementGroupType {
    /** Standard */
    Standard = "Standard",
    /** Ultra */
    Ultra = "Ultra"
}

/** Known values of {@link PublicIPAddressSkuName} that the service accepts. */
export declare enum KnownPublicIPAddressSkuName {
    /** Basic */
    Basic = "Basic",
    /** Standard */
    Standard = "Standard"
}

/** Known values of {@link PublicIPAddressSkuTier} that the service accepts. */
export declare enum KnownPublicIPAddressSkuTier {
    /** Regional */
    Regional = "Regional",
    /** Global */
    Global = "Global"
}

/** Known values of {@link PublicIPAllocationMethod} that the service accepts. */
export declare enum KnownPublicIPAllocationMethod {
    /** Dynamic */
    Dynamic = "Dynamic",
    /** Static */
    Static = "Static"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** You can generate a SAS URI to access the underlying data of the disk publicly on the internet when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate. */
    Enabled = "Enabled",
    /** You cannot access the underlying data of the disk publicly on the internet even when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate. */
    Disabled = "Disabled"
}

/** Known values of {@link RepairAction} that the service accepts. */
export declare enum KnownRepairAction {
    /** Replace */
    Replace = "Replace",
    /** Restart */
    Restart = "Restart",
    /** Reimage */
    Reimage = "Reimage"
}

/** Known values of {@link ReplicationMode} that the service accepts. */
export declare enum KnownReplicationMode {
    /** Full */
    Full = "Full",
    /** Shallow */
    Shallow = "Shallow"
}

/** Known values of {@link ReplicationState} that the service accepts. */
export declare enum KnownReplicationState {
    /** Unknown */
    Unknown = "Unknown",
    /** Replicating */
    Replicating = "Replicating",
    /** Completed */
    Completed = "Completed",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link ReplicationStatusTypes} that the service accepts. */
export declare enum KnownReplicationStatusTypes {
    /** ReplicationStatus */
    ReplicationStatus = "ReplicationStatus"
}

/** Known values of {@link RestorePointCollectionExpandOptions} that the service accepts. */
export declare enum KnownRestorePointCollectionExpandOptions {
    /** RestorePoints */
    RestorePoints = "restorePoints"
}

/** Known values of {@link RestorePointExpandOptions} that the service accepts. */
export declare enum KnownRestorePointExpandOptions {
    /** InstanceView */
    InstanceView = "instanceView"
}

/** Known values of {@link SecurityEncryptionTypes} that the service accepts. */
export declare enum KnownSecurityEncryptionTypes {
    /** VMGuestStateOnly */
    VMGuestStateOnly = "VMGuestStateOnly",
    /** DiskWithVMGuestState */
    DiskWithVMGuestState = "DiskWithVMGuestState"
}

/** Known values of {@link SecurityTypes} that the service accepts. */
export declare enum KnownSecurityTypes {
    /** TrustedLaunch */
    TrustedLaunch = "TrustedLaunch",
    /** ConfidentialVM */
    ConfidentialVM = "ConfidentialVM"
}

/** Known values of {@link SelectPermissions} that the service accepts. */
export declare enum KnownSelectPermissions {
    /** Permissions */
    Permissions = "Permissions"
}

/** Known values of {@link SharedGalleryHostCaching} that the service accepts. */
export declare enum KnownSharedGalleryHostCaching {
    /** None */
    None = "None",
    /** ReadOnly */
    ReadOnly = "ReadOnly",
    /** ReadWrite */
    ReadWrite = "ReadWrite"
}

/** Known values of {@link SharedToValues} that the service accepts. */
export declare enum KnownSharedToValues {
    /** Tenant */
    Tenant = "tenant"
}

/** Known values of {@link SharingProfileGroupTypes} that the service accepts. */
export declare enum KnownSharingProfileGroupTypes {
    /** Subscriptions */
    Subscriptions = "Subscriptions",
    /** AADTenants */
    AADTenants = "AADTenants"
}

/** Known values of {@link SharingState} that the service accepts. */
export declare enum KnownSharingState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** InProgress */
    InProgress = "InProgress",
    /** Failed */
    Failed = "Failed",
    /** Unknown */
    Unknown = "Unknown"
}

/** Known values of {@link SharingUpdateOperationTypes} that the service accepts. */
export declare enum KnownSharingUpdateOperationTypes {
    /** Add */
    Add = "Add",
    /** Remove */
    Remove = "Remove",
    /** Reset */
    Reset = "Reset",
    /** EnableCommunity */
    EnableCommunity = "EnableCommunity"
}

/** Known values of {@link SnapshotStorageAccountTypes} that the service accepts. */
export declare enum KnownSnapshotStorageAccountTypes {
    /** Standard HDD locally redundant storage */
    StandardLRS = "Standard_LRS",
    /** Premium SSD locally redundant storage */
    PremiumLRS = "Premium_LRS",
    /** Standard zone redundant storage */
    StandardZRS = "Standard_ZRS"
}

/** Known values of {@link StorageAccountType} that the service accepts. */
export declare enum KnownStorageAccountType {
    /** StandardLRS */
    StandardLRS = "Standard_LRS",
    /** StandardZRS */
    StandardZRS = "Standard_ZRS",
    /** PremiumLRS */
    PremiumLRS = "Premium_LRS"
}

/** Known values of {@link StorageAccountTypes} that the service accepts. */
export declare enum KnownStorageAccountTypes {
    /** StandardLRS */
    StandardLRS = "Standard_LRS",
    /** PremiumLRS */
    PremiumLRS = "Premium_LRS",
    /** StandardSSDLRS */
    StandardSSDLRS = "StandardSSD_LRS",
    /** UltraSSDLRS */
    UltraSSDLRS = "UltraSSD_LRS",
    /** PremiumZRS */
    PremiumZRS = "Premium_ZRS",
    /** StandardSSDZRS */
    StandardSSDZRS = "StandardSSD_ZRS",
    /** PremiumV2LRS */
    PremiumV2LRS = "PremiumV2_LRS"
}

/** Known values of {@link VirtualMachineEvictionPolicyTypes} that the service accepts. */
export declare enum KnownVirtualMachineEvictionPolicyTypes {
    /** Deallocate */
    Deallocate = "Deallocate",
    /** Delete */
    Delete = "Delete"
}

/** Known values of {@link VirtualMachinePriorityTypes} that the service accepts. */
export declare enum KnownVirtualMachinePriorityTypes {
    /** Regular */
    Regular = "Regular",
    /** Low */
    Low = "Low",
    /** Spot */
    Spot = "Spot"
}

/** Known values of {@link VirtualMachineScaleSetScaleInRules} that the service accepts. */
export declare enum KnownVirtualMachineScaleSetScaleInRules {
    /** Default */
    Default = "Default",
    /** OldestVM */
    OldestVM = "OldestVM",
    /** NewestVM */
    NewestVM = "NewestVM"
}

/** Known values of {@link VirtualMachineSizeTypes} that the service accepts. */
export declare enum KnownVirtualMachineSizeTypes {
    /** BasicA0 */
    BasicA0 = "Basic_A0",
    /** BasicA1 */
    BasicA1 = "Basic_A1",
    /** BasicA2 */
    BasicA2 = "Basic_A2",
    /** BasicA3 */
    BasicA3 = "Basic_A3",
    /** BasicA4 */
    BasicA4 = "Basic_A4",
    /** StandardA0 */
    StandardA0 = "Standard_A0",
    /** StandardA1 */
    StandardA1 = "Standard_A1",
    /** StandardA2 */
    StandardA2 = "Standard_A2",
    /** StandardA3 */
    StandardA3 = "Standard_A3",
    /** StandardA4 */
    StandardA4 = "Standard_A4",
    /** StandardA5 */
    StandardA5 = "Standard_A5",
    /** StandardA6 */
    StandardA6 = "Standard_A6",
    /** StandardA7 */
    StandardA7 = "Standard_A7",
    /** StandardA8 */
    StandardA8 = "Standard_A8",
    /** StandardA9 */
    StandardA9 = "Standard_A9",
    /** StandardA10 */
    StandardA10 = "Standard_A10",
    /** StandardA11 */
    StandardA11 = "Standard_A11",
    /** StandardA1V2 */
    StandardA1V2 = "Standard_A1_v2",
    /** StandardA2V2 */
    StandardA2V2 = "Standard_A2_v2",
    /** StandardA4V2 */
    StandardA4V2 = "Standard_A4_v2",
    /** StandardA8V2 */
    StandardA8V2 = "Standard_A8_v2",
    /** StandardA2MV2 */
    StandardA2MV2 = "Standard_A2m_v2",
    /** StandardA4MV2 */
    StandardA4MV2 = "Standard_A4m_v2",
    /** StandardA8MV2 */
    StandardA8MV2 = "Standard_A8m_v2",
    /** StandardB1S */
    StandardB1S = "Standard_B1s",
    /** StandardB1Ms */
    StandardB1Ms = "Standard_B1ms",
    /** StandardB2S */
    StandardB2S = "Standard_B2s",
    /** StandardB2Ms */
    StandardB2Ms = "Standard_B2ms",
    /** StandardB4Ms */
    StandardB4Ms = "Standard_B4ms",
    /** StandardB8Ms */
    StandardB8Ms = "Standard_B8ms",
    /** StandardD1 */
    StandardD1 = "Standard_D1",
    /** StandardD2 */
    StandardD2 = "Standard_D2",
    /** StandardD3 */
    StandardD3 = "Standard_D3",
    /** StandardD4 */
    StandardD4 = "Standard_D4",
    /** StandardD11 */
    StandardD11 = "Standard_D11",
    /** StandardD12 */
    StandardD12 = "Standard_D12",
    /** StandardD13 */
    StandardD13 = "Standard_D13",
    /** StandardD14 */
    StandardD14 = "Standard_D14",
    /** StandardD1V2 */
    StandardD1V2 = "Standard_D1_v2",
    /** StandardD2V2 */
    StandardD2V2 = "Standard_D2_v2",
    /** StandardD3V2 */
    StandardD3V2 = "Standard_D3_v2",
    /** StandardD4V2 */
    StandardD4V2 = "Standard_D4_v2",
    /** StandardD5V2 */
    StandardD5V2 = "Standard_D5_v2",
    /** StandardD2V3 */
    StandardD2V3 = "Standard_D2_v3",
    /** StandardD4V3 */
    StandardD4V3 = "Standard_D4_v3",
    /** StandardD8V3 */
    StandardD8V3 = "Standard_D8_v3",
    /** StandardD16V3 */
    StandardD16V3 = "Standard_D16_v3",
    /** StandardD32V3 */
    StandardD32V3 = "Standard_D32_v3",
    /** StandardD64V3 */
    StandardD64V3 = "Standard_D64_v3",
    /** StandardD2SV3 */
    StandardD2SV3 = "Standard_D2s_v3",
    /** StandardD4SV3 */
    StandardD4SV3 = "Standard_D4s_v3",
    /** StandardD8SV3 */
    StandardD8SV3 = "Standard_D8s_v3",
    /** StandardD16SV3 */
    StandardD16SV3 = "Standard_D16s_v3",
    /** StandardD32SV3 */
    StandardD32SV3 = "Standard_D32s_v3",
    /** StandardD64SV3 */
    StandardD64SV3 = "Standard_D64s_v3",
    /** StandardD11V2 */
    StandardD11V2 = "Standard_D11_v2",
    /** StandardD12V2 */
    StandardD12V2 = "Standard_D12_v2",
    /** StandardD13V2 */
    StandardD13V2 = "Standard_D13_v2",
    /** StandardD14V2 */
    StandardD14V2 = "Standard_D14_v2",
    /** StandardD15V2 */
    StandardD15V2 = "Standard_D15_v2",
    /** StandardDS1 */
    StandardDS1 = "Standard_DS1",
    /** StandardDS2 */
    StandardDS2 = "Standard_DS2",
    /** StandardDS3 */
    StandardDS3 = "Standard_DS3",
    /** StandardDS4 */
    StandardDS4 = "Standard_DS4",
    /** StandardDS11 */
    StandardDS11 = "Standard_DS11",
    /** StandardDS12 */
    StandardDS12 = "Standard_DS12",
    /** StandardDS13 */
    StandardDS13 = "Standard_DS13",
    /** StandardDS14 */
    StandardDS14 = "Standard_DS14",
    /** StandardDS1V2 */
    StandardDS1V2 = "Standard_DS1_v2",
    /** StandardDS2V2 */
    StandardDS2V2 = "Standard_DS2_v2",
    /** StandardDS3V2 */
    StandardDS3V2 = "Standard_DS3_v2",
    /** StandardDS4V2 */
    StandardDS4V2 = "Standard_DS4_v2",
    /** StandardDS5V2 */
    StandardDS5V2 = "Standard_DS5_v2",
    /** StandardDS11V2 */
    StandardDS11V2 = "Standard_DS11_v2",
    /** StandardDS12V2 */
    StandardDS12V2 = "Standard_DS12_v2",
    /** StandardDS13V2 */
    StandardDS13V2 = "Standard_DS13_v2",
    /** StandardDS14V2 */
    StandardDS14V2 = "Standard_DS14_v2",
    /** StandardDS15V2 */
    StandardDS15V2 = "Standard_DS15_v2",
    /** StandardDS134V2 */
    StandardDS134V2 = "Standard_DS13-4_v2",
    /** StandardDS132V2 */
    StandardDS132V2 = "Standard_DS13-2_v2",
    /** StandardDS148V2 */
    StandardDS148V2 = "Standard_DS14-8_v2",
    /** StandardDS144V2 */
    StandardDS144V2 = "Standard_DS14-4_v2",
    /** StandardE2V3 */
    StandardE2V3 = "Standard_E2_v3",
    /** StandardE4V3 */
    StandardE4V3 = "Standard_E4_v3",
    /** StandardE8V3 */
    StandardE8V3 = "Standard_E8_v3",
    /** StandardE16V3 */
    StandardE16V3 = "Standard_E16_v3",
    /** StandardE32V3 */
    StandardE32V3 = "Standard_E32_v3",
    /** StandardE64V3 */
    StandardE64V3 = "Standard_E64_v3",
    /** StandardE2SV3 */
    StandardE2SV3 = "Standard_E2s_v3",
    /** StandardE4SV3 */
    StandardE4SV3 = "Standard_E4s_v3",
    /** StandardE8SV3 */
    StandardE8SV3 = "Standard_E8s_v3",
    /** StandardE16SV3 */
    StandardE16SV3 = "Standard_E16s_v3",
    /** StandardE32SV3 */
    StandardE32SV3 = "Standard_E32s_v3",
    /** StandardE64SV3 */
    StandardE64SV3 = "Standard_E64s_v3",
    /** StandardE3216V3 */
    StandardE3216V3 = "Standard_E32-16_v3",
    /** StandardE328SV3 */
    StandardE328SV3 = "Standard_E32-8s_v3",
    /** StandardE6432SV3 */
    StandardE6432SV3 = "Standard_E64-32s_v3",
    /** StandardE6416SV3 */
    StandardE6416SV3 = "Standard_E64-16s_v3",
    /** StandardF1 */
    StandardF1 = "Standard_F1",
    /** StandardF2 */
    StandardF2 = "Standard_F2",
    /** StandardF4 */
    StandardF4 = "Standard_F4",
    /** StandardF8 */
    StandardF8 = "Standard_F8",
    /** StandardF16 */
    StandardF16 = "Standard_F16",
    /** StandardF1S */
    StandardF1S = "Standard_F1s",
    /** StandardF2S */
    StandardF2S = "Standard_F2s",
    /** StandardF4S */
    StandardF4S = "Standard_F4s",
    /** StandardF8S */
    StandardF8S = "Standard_F8s",
    /** StandardF16S */
    StandardF16S = "Standard_F16s",
    /** StandardF2SV2 */
    StandardF2SV2 = "Standard_F2s_v2",
    /** StandardF4SV2 */
    StandardF4SV2 = "Standard_F4s_v2",
    /** StandardF8SV2 */
    StandardF8SV2 = "Standard_F8s_v2",
    /** StandardF16SV2 */
    StandardF16SV2 = "Standard_F16s_v2",
    /** StandardF32SV2 */
    StandardF32SV2 = "Standard_F32s_v2",
    /** StandardF64SV2 */
    StandardF64SV2 = "Standard_F64s_v2",
    /** StandardF72SV2 */
    StandardF72SV2 = "Standard_F72s_v2",
    /** StandardG1 */
    StandardG1 = "Standard_G1",
    /** StandardG2 */
    StandardG2 = "Standard_G2",
    /** StandardG3 */
    StandardG3 = "Standard_G3",
    /** StandardG4 */
    StandardG4 = "Standard_G4",
    /** StandardG5 */
    StandardG5 = "Standard_G5",
    /** StandardGS1 */
    StandardGS1 = "Standard_GS1",
    /** StandardGS2 */
    StandardGS2 = "Standard_GS2",
    /** StandardGS3 */
    StandardGS3 = "Standard_GS3",
    /** StandardGS4 */
    StandardGS4 = "Standard_GS4",
    /** StandardGS5 */
    StandardGS5 = "Standard_GS5",
    /** StandardGS48 */
    StandardGS48 = "Standard_GS4-8",
    /** StandardGS44 */
    StandardGS44 = "Standard_GS4-4",
    /** StandardGS516 */
    StandardGS516 = "Standard_GS5-16",
    /** StandardGS58 */
    StandardGS58 = "Standard_GS5-8",
    /** StandardH8 */
    StandardH8 = "Standard_H8",
    /** StandardH16 */
    StandardH16 = "Standard_H16",
    /** StandardH8M */
    StandardH8M = "Standard_H8m",
    /** StandardH16M */
    StandardH16M = "Standard_H16m",
    /** StandardH16R */
    StandardH16R = "Standard_H16r",
    /** StandardH16Mr */
    StandardH16Mr = "Standard_H16mr",
    /** StandardL4S */
    StandardL4S = "Standard_L4s",
    /** StandardL8S */
    StandardL8S = "Standard_L8s",
    /** StandardL16S */
    StandardL16S = "Standard_L16s",
    /** StandardL32S */
    StandardL32S = "Standard_L32s",
    /** StandardM64S */
    StandardM64S = "Standard_M64s",
    /** StandardM64Ms */
    StandardM64Ms = "Standard_M64ms",
    /** StandardM128S */
    StandardM128S = "Standard_M128s",
    /** StandardM128Ms */
    StandardM128Ms = "Standard_M128ms",
    /** StandardM6432Ms */
    StandardM6432Ms = "Standard_M64-32ms",
    /** StandardM6416Ms */
    StandardM6416Ms = "Standard_M64-16ms",
    /** StandardM12864Ms */
    StandardM12864Ms = "Standard_M128-64ms",
    /** StandardM12832Ms */
    StandardM12832Ms = "Standard_M128-32ms",
    /** StandardNC6 */
    StandardNC6 = "Standard_NC6",
    /** StandardNC12 */
    StandardNC12 = "Standard_NC12",
    /** StandardNC24 */
    StandardNC24 = "Standard_NC24",
    /** StandardNC24R */
    StandardNC24R = "Standard_NC24r",
    /** StandardNC6SV2 */
    StandardNC6SV2 = "Standard_NC6s_v2",
    /** StandardNC12SV2 */
    StandardNC12SV2 = "Standard_NC12s_v2",
    /** StandardNC24SV2 */
    StandardNC24SV2 = "Standard_NC24s_v2",
    /** StandardNC24RsV2 */
    StandardNC24RsV2 = "Standard_NC24rs_v2",
    /** StandardNC6SV3 */
    StandardNC6SV3 = "Standard_NC6s_v3",
    /** StandardNC12SV3 */
    StandardNC12SV3 = "Standard_NC12s_v3",
    /** StandardNC24SV3 */
    StandardNC24SV3 = "Standard_NC24s_v3",
    /** StandardNC24RsV3 */
    StandardNC24RsV3 = "Standard_NC24rs_v3",
    /** StandardND6S */
    StandardND6S = "Standard_ND6s",
    /** StandardND12S */
    StandardND12S = "Standard_ND12s",
    /** StandardND24S */
    StandardND24S = "Standard_ND24s",
    /** StandardND24Rs */
    StandardND24Rs = "Standard_ND24rs",
    /** StandardNV6 */
    StandardNV6 = "Standard_NV6",
    /** StandardNV12 */
    StandardNV12 = "Standard_NV12",
    /** StandardNV24 */
    StandardNV24 = "Standard_NV24"
}

/** Known values of {@link VmDiskTypes} that the service accepts. */
export declare enum KnownVmDiskTypes {
    /** None */
    None = "None",
    /** Unmanaged */
    Unmanaged = "Unmanaged"
}

/** Known values of {@link VMGuestPatchClassificationLinux} that the service accepts. */
export declare enum KnownVMGuestPatchClassificationLinux {
    /** Critical */
    Critical = "Critical",
    /** Security */
    Security = "Security",
    /** Other */
    Other = "Other"
}

/** Known values of {@link VMGuestPatchClassificationWindows} that the service accepts. */
export declare enum KnownVMGuestPatchClassificationWindows {
    /** Critical */
    Critical = "Critical",
    /** Security */
    Security = "Security",
    /** UpdateRollUp */
    UpdateRollUp = "UpdateRollUp",
    /** FeaturePack */
    FeaturePack = "FeaturePack",
    /** ServicePack */
    ServicePack = "ServicePack",
    /** Definition */
    Definition = "Definition",
    /** Tools */
    Tools = "Tools",
    /** Updates */
    Updates = "Updates"
}

/** Known values of {@link VMGuestPatchRebootBehavior} that the service accepts. */
export declare enum KnownVMGuestPatchRebootBehavior {
    /** Unknown */
    Unknown = "Unknown",
    /** NeverReboots */
    NeverReboots = "NeverReboots",
    /** AlwaysRequiresReboot */
    AlwaysRequiresReboot = "AlwaysRequiresReboot",
    /** CanRequestReboot */
    CanRequestReboot = "CanRequestReboot"
}

/** Known values of {@link VMGuestPatchRebootSetting} that the service accepts. */
export declare enum KnownVMGuestPatchRebootSetting {
    /** IfRequired */
    IfRequired = "IfRequired",
    /** Never */
    Never = "Never",
    /** Always */
    Always = "Always"
}

/** Known values of {@link VMGuestPatchRebootStatus} that the service accepts. */
export declare enum KnownVMGuestPatchRebootStatus {
    /** Unknown */
    Unknown = "Unknown",
    /** NotNeeded */
    NotNeeded = "NotNeeded",
    /** Required */
    Required = "Required",
    /** Started */
    Started = "Started",
    /** Failed */
    Failed = "Failed",
    /** Completed */
    Completed = "Completed"
}

/** Known values of {@link WindowsPatchAssessmentMode} that the service accepts. */
export declare enum KnownWindowsPatchAssessmentMode {
    /** ImageDefault */
    ImageDefault = "ImageDefault",
    /** AutomaticByPlatform */
    AutomaticByPlatform = "AutomaticByPlatform"
}

/** Known values of {@link WindowsVMGuestPatchAutomaticByPlatformRebootSetting} that the service accepts. */
export declare enum KnownWindowsVMGuestPatchAutomaticByPlatformRebootSetting {
    /** Unknown */
    Unknown = "Unknown",
    /** IfRequired */
    IfRequired = "IfRequired",
    /** Never */
    Never = "Never",
    /** Always */
    Always = "Always"
}

/** Known values of {@link WindowsVMGuestPatchMode} that the service accepts. */
export declare enum KnownWindowsVMGuestPatchMode {
    /** Manual */
    Manual = "Manual",
    /** AutomaticByOS */
    AutomaticByOS = "AutomaticByOS",
    /** AutomaticByPlatform */
    AutomaticByPlatform = "AutomaticByPlatform"
}

/** Describes the properties of the last installed patch summary. */
export declare interface LastPatchInstallationSummary {
    /**
     * The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: PatchOperationStatus;
    /**
     * The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly installationActivityId?: string;
    /**
     * Describes whether the operation ran out of time before it completed all its intended actions
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maintenanceWindowExceeded?: boolean;
    /**
     * The number of all available patches but not going to be installed because it didn't match a classification or inclusion list entry.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly notSelectedPatchCount?: number;
    /**
     * The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly excludedPatchCount?: number;
    /**
     * The number of all available patches expected to be installed over the course of the patch installation operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pendingPatchCount?: number;
    /**
     * The count of patches that successfully installed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly installedPatchCount?: number;
    /**
     * The count of patches that failed installation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly failedPatchCount?: number;
    /**
     * The UTC timestamp when the operation began.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The UTC timestamp when the operation began.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedTime?: Date;
    /**
     * The errors that were encountered during execution of the operation. The details array contains the list of them.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ApiError;
}

/** Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros). */
export declare interface LinuxConfiguration {
    /** Specifies whether password authentication should be disabled. */
    disablePasswordAuthentication?: boolean;
    /** Specifies the ssh key configuration for a Linux OS. */
    ssh?: SshConfiguration;
    /** Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later. */
    provisionVMAgent?: boolean;
    /** [Preview Feature] Specifies settings related to VM Guest Patching on Linux. */
    patchSettings?: LinuxPatchSettings;
    /** Indicates whether VMAgent Platform Updates is enabled for the Linux virtual machine. Default value is false. */
    enableVMAgentPlatformUpdates?: boolean;
}

/** Input for InstallPatches on a Linux VM, as directly received by the API */
export declare interface LinuxParameters {
    /** The update classifications to select when installing patches for Linux. */
    classificationsToInclude?: VMGuestPatchClassificationLinux[];
    /** packages to include in the patch operation. Format: packageName_packageVersion */
    packageNameMasksToInclude?: string[];
    /** packages to exclude in the patch operation. Format: packageName_packageVersion */
    packageNameMasksToExclude?: string[];
    /** This is used as a maintenance run identifier for Auto VM Guest Patching in Linux. */
    maintenanceRunId?: string;
}

/**
 * Defines values for LinuxPatchAssessmentMode. \
 * {@link KnownLinuxPatchAssessmentMode} can be used interchangeably with LinuxPatchAssessmentMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ImageDefault** \
 * **AutomaticByPlatform**
 */
export declare type LinuxPatchAssessmentMode = string;

/** Specifies settings related to VM Guest Patching on Linux. */
export declare interface LinuxPatchSettings {
    /** Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - The virtual machine's default patching configuration is used. <br /><br /> **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true */
    patchMode?: LinuxVMGuestPatchMode;
    /** Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine. <br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true. */
    assessmentMode?: LinuxPatchAssessmentMode;
    /** Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Linux. */
    automaticByPlatformSettings?: LinuxVMGuestPatchAutomaticByPlatformSettings;
}

/**
 * Defines values for LinuxVMGuestPatchAutomaticByPlatformRebootSetting. \
 * {@link KnownLinuxVMGuestPatchAutomaticByPlatformRebootSetting} can be used interchangeably with LinuxVMGuestPatchAutomaticByPlatformRebootSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **IfRequired** \
 * **Never** \
 * **Always**
 */
export declare type LinuxVMGuestPatchAutomaticByPlatformRebootSetting = string;

/** Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Linux patch settings. */
export declare interface LinuxVMGuestPatchAutomaticByPlatformSettings {
    /** Specifies the reboot setting for all AutomaticByPlatform patch installation operations. */
    rebootSetting?: LinuxVMGuestPatchAutomaticByPlatformRebootSetting;
}

/**
 * Defines values for LinuxVMGuestPatchMode. \
 * {@link KnownLinuxVMGuestPatchMode} can be used interchangeably with LinuxVMGuestPatchMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ImageDefault** \
 * **AutomaticByPlatform**
 */
export declare type LinuxVMGuestPatchMode = string;

/** The List Usages operation response. */
export declare interface ListUsagesResult {
    /** The list of compute resource usages. */
    value: Usage[];
    /** The URI to fetch the next page of compute resource usage information. Call ListNext() with this to fetch the next page of compute resource usage information. */
    nextLink?: string;
}

/** Describes the load balancer configuration. */
export declare interface LoadBalancerConfiguration {
    /** Resource Id */
    id?: string;
    /** The name of the Load balancer */
    name: string;
    /** Properties of the load balancer configuration. */
    properties: LoadBalancerConfigurationProperties;
}

/** Describes the properties of the load balancer configuration. */
export declare interface LoadBalancerConfigurationProperties {
    /** Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration. */
    frontendIPConfigurations: LoadBalancerFrontendIPConfiguration[];
}

/** Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration. */
export declare interface LoadBalancerFrontendIPConfiguration {
    /** The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource. */
    name: string;
    /** Properties of load balancer frontend ip configuration. */
    properties: LoadBalancerFrontendIPConfigurationProperties;
}

/** Describes a cloud service IP Configuration */
export declare interface LoadBalancerFrontendIPConfigurationProperties {
    /** The reference to the public ip address resource. */
    publicIPAddress?: SubResource;
    /** The reference to the virtual network subnet resource. */
    subnet?: SubResource;
    /** The virtual network private IP address of the IP configuration. */
    privateIPAddress?: string;
}

/** Interface representing a LogAnalytics. */
export declare interface LogAnalytics {
    /**
     * Export logs that show Api requests made by this subscription in the given time window to show
     * throttling activities.
     * @param location The location upon which virtual-machine-sizes is queried.
     * @param parameters Parameters supplied to the LogAnalytics getRequestRateByInterval Api.
     * @param options The options parameters.
     */
    beginExportRequestRateByInterval(location: string, parameters: RequestRateByIntervalInput, options?: LogAnalyticsExportRequestRateByIntervalOptionalParams): Promise<PollerLike<PollOperationState<LogAnalyticsExportRequestRateByIntervalResponse>, LogAnalyticsExportRequestRateByIntervalResponse>>;
    /**
     * Export logs that show Api requests made by this subscription in the given time window to show
     * throttling activities.
     * @param location The location upon which virtual-machine-sizes is queried.
     * @param parameters Parameters supplied to the LogAnalytics getRequestRateByInterval Api.
     * @param options The options parameters.
     */
    beginExportRequestRateByIntervalAndWait(location: string, parameters: RequestRateByIntervalInput, options?: LogAnalyticsExportRequestRateByIntervalOptionalParams): Promise<LogAnalyticsExportRequestRateByIntervalResponse>;
    /**
     * Export logs that show total throttled Api requests for this subscription in the given time window.
     * @param location The location upon which virtual-machine-sizes is queried.
     * @param parameters Parameters supplied to the LogAnalytics getThrottledRequests Api.
     * @param options The options parameters.
     */
    beginExportThrottledRequests(location: string, parameters: ThrottledRequestsInput, options?: LogAnalyticsExportThrottledRequestsOptionalParams): Promise<PollerLike<PollOperationState<LogAnalyticsExportThrottledRequestsResponse>, LogAnalyticsExportThrottledRequestsResponse>>;
    /**
     * Export logs that show total throttled Api requests for this subscription in the given time window.
     * @param location The location upon which virtual-machine-sizes is queried.
     * @param parameters Parameters supplied to the LogAnalytics getThrottledRequests Api.
     * @param options The options parameters.
     */
    beginExportThrottledRequestsAndWait(location: string, parameters: ThrottledRequestsInput, options?: LogAnalyticsExportThrottledRequestsOptionalParams): Promise<LogAnalyticsExportThrottledRequestsResponse>;
}

/** Optional parameters. */
export declare interface LogAnalyticsExportRequestRateByIntervalOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the exportRequestRateByInterval operation. */
export declare type LogAnalyticsExportRequestRateByIntervalResponse = LogAnalyticsOperationResult;

/** Optional parameters. */
export declare interface LogAnalyticsExportThrottledRequestsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the exportThrottledRequests operation. */
export declare type LogAnalyticsExportThrottledRequestsResponse = LogAnalyticsOperationResult;

/** Api input base class for LogAnalytics Api. */
export declare interface LogAnalyticsInputBase {
    /** SAS Uri of the logging blob container to which LogAnalytics Api writes output logs to. */
    blobContainerSasUri: string;
    /** From time of the query */
    fromTime: Date;
    /** To time of the query */
    toTime: Date;
    /** Group query result by Throttle Policy applied. */
    groupByThrottlePolicy?: boolean;
    /** Group query result by Operation Name. */
    groupByOperationName?: boolean;
    /** Group query result by Resource Name. */
    groupByResourceName?: boolean;
    /** Group query result by Client Application ID. */
    groupByClientApplicationId?: boolean;
    /** Group query result by User Agent. */
    groupByUserAgent?: boolean;
}

/** LogAnalytics operation status response */
export declare interface LogAnalyticsOperationResult {
    /**
     * LogAnalyticsOutput
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly properties?: LogAnalyticsOutput;
}

/** LogAnalytics output properties */
export declare interface LogAnalyticsOutput {
    /**
     * Output file Uri path to blob container.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly output?: string;
}

/** Defines values for MaintenanceOperationResultCodeTypes. */
export declare type MaintenanceOperationResultCodeTypes = "None" | "RetryLater" | "MaintenanceAborted" | "MaintenanceCompleted";

/** Maintenance Operation Status. */
export declare interface MaintenanceRedeployStatus {
    /** True, if customer is allowed to perform Maintenance. */
    isCustomerInitiatedMaintenanceAllowed?: boolean;
    /** Start Time for the Pre Maintenance Window. */
    preMaintenanceWindowStartTime?: Date;
    /** End Time for the Pre Maintenance Window. */
    preMaintenanceWindowEndTime?: Date;
    /** Start Time for the Maintenance Window. */
    maintenanceWindowStartTime?: Date;
    /** End Time for the Maintenance Window. */
    maintenanceWindowEndTime?: Date;
    /** The Last Maintenance Operation Result Code. */
    lastOperationResultCode?: MaintenanceOperationResultCodeTypes;
    /** Message returned for the last Maintenance Operation. */
    lastOperationMessage?: string;
}

/** The managed artifact. */
export declare interface ManagedArtifact {
    /** The managed artifact id. */
    id: string;
}

/** The parameters of a managed disk. */
export declare interface ManagedDiskParameters extends SubResource {
    /** Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. */
    storageAccountType?: StorageAccountTypes;
    /** Specifies the customer managed disk encryption set resource id for the managed disk. */
    diskEncryptionSet?: DiskEncryptionSetParameters;
    /** Specifies the security profile for the managed disk. */
    securityProfile?: VMDiskSecurityProfile;
}

/**
 * Defines values for NetworkAccessPolicy. \
 * {@link KnownNetworkAccessPolicy} can be used interchangeably with NetworkAccessPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AllowAll**: The disk can be exported or uploaded to from any network. \
 * **AllowPrivate**: The disk can be exported or uploaded to using a DiskAccess resource's private endpoints. \
 * **DenyAll**: The disk cannot be exported.
 */
export declare type NetworkAccessPolicy = string;

/**
 * Defines values for NetworkApiVersion. \
 * {@link KnownNetworkApiVersion} can be used interchangeably with NetworkApiVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **2020-11-01**
 */
export declare type NetworkApiVersion = string;

/** Describes a network interface reference. */
export declare interface NetworkInterfaceReference extends SubResource {
    /** Specifies the primary network interface in case the virtual machine has more than 1 network interface. */
    primary?: boolean;
    /** Specify what happens to the network interface when the VM is deleted */
    deleteOption?: DeleteOptions;
}

/** Specifies the network interfaces or the networking configuration of the virtual machine. */
export declare interface NetworkProfile {
    /** Specifies the list of resource Ids for the network interfaces associated with the virtual machine. */
    networkInterfaces?: NetworkInterfaceReference[];
    /** specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations */
    networkApiVersion?: NetworkApiVersion;
    /** Specifies the networking configurations that will be used to create the virtual machine networking resources. */
    networkInterfaceConfigurations?: VirtualMachineNetworkInterfaceConfiguration[];
}

/** Defines values for OperatingSystemStateTypes. */
export declare type OperatingSystemStateTypes = "Generalized" | "Specialized";

/**
 * Defines values for OperatingSystemType. \
 * {@link KnownOperatingSystemType} can be used interchangeably with OperatingSystemType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux**
 */
export declare type OperatingSystemType = string;

/** Defines values for OperatingSystemTypes. */
export declare type OperatingSystemTypes = "Windows" | "Linux";

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Gets a list of compute operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<ComputeOperationValue>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = ComputeOperationListResult;

/**
 * Defines values for OrchestrationMode. \
 * {@link KnownOrchestrationMode} can be used interchangeably with OrchestrationMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Uniform** \
 * **Flexible**
 */
export declare type OrchestrationMode = string;

/**
 * Defines values for OrchestrationServiceNames. \
 * {@link KnownOrchestrationServiceNames} can be used interchangeably with OrchestrationServiceNames,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AutomaticRepairs** \
 * **DummyOrchestrationServiceName**
 */
export declare type OrchestrationServiceNames = string;

/**
 * Defines values for OrchestrationServiceState. \
 * {@link KnownOrchestrationServiceState} can be used interchangeably with OrchestrationServiceState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotRunning** \
 * **Running** \
 * **Suspended**
 */
export declare type OrchestrationServiceState = string;

/**
 * Defines values for OrchestrationServiceStateAction. \
 * {@link KnownOrchestrationServiceStateAction} can be used interchangeably with OrchestrationServiceStateAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Resume** \
 * **Suspend**
 */
export declare type OrchestrationServiceStateAction = string;

/** The input for OrchestrationServiceState */
export declare interface OrchestrationServiceStateInput {
    /** The name of the service. */
    serviceName: OrchestrationServiceNames;
    /** The action to be performed. */
    action: OrchestrationServiceStateAction;
}

/** Summary for an orchestration service of a virtual machine scale set. */
export declare interface OrchestrationServiceSummary {
    /**
     * The name of the service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceName?: OrchestrationServiceNames;
    /**
     * The current state of the service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceState?: OrchestrationServiceState;
}

/** Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). */
export declare interface OSDisk {
    /** This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux** */
    osType?: OperatingSystemTypes;
    /** Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15 */
    encryptionSettings?: DiskEncryptionSettings;
    /** The disk name. */
    name?: string;
    /** The virtual hard disk. */
    vhd?: VirtualHardDisk;
    /** The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist. */
    image?: VirtualHardDisk;
    /** Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None** for Standard storage. **ReadOnly** for Premium storage. */
    caching?: CachingTypes;
    /** Specifies whether writeAccelerator should be enabled or disabled on the disk. */
    writeAcceleratorEnabled?: boolean;
    /** Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine. */
    diffDiskSettings?: DiffDiskSettings;
    /** Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described. */
    createOption: DiskCreateOptionTypes;
    /** Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023 */
    diskSizeGB?: number;
    /** The managed disk parameters. */
    managedDisk?: ManagedDiskParameters;
    /** Specifies whether OS Disk should be deleted or detached upon VM deletion. <br><br> Possible values: <br><br> **Delete** If this value is used, the OS disk is deleted when VM is deleted.<br><br> **Detach** If this value is used, the os disk is retained after VM is deleted. <br><br> The default value is set to **detach**. For an ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for ephemeral OS Disk. */
    deleteOption?: DiskDeleteOptionTypes;
}

/** Contains the os disk image information. */
export declare interface OSDiskImage {
    /** The operating system of the osDiskImage. */
    operatingSystem: OperatingSystemTypes;
}

/** Contains encryption settings for an OS disk image. */
export declare interface OSDiskImageEncryption extends DiskImageEncryption {
    /** This property specifies the security profile of an OS disk image. */
    securityProfile?: OSDiskImageSecurityProfile;
}

/** Contains security profile for an OS disk image. */
export declare interface OSDiskImageSecurityProfile {
    /** confidential VM encryption types */
    confidentialVMEncryptionType?: ConfidentialVMEncryptionType;
    /** secure VM disk encryption set id */
    secureVMDiskEncryptionSetId?: string;
}

/** Describes a cloud service OS family. */
export declare interface OSFamily {
    /**
     * Resource Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Resource location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /** OS family properties. */
    properties?: OSFamilyProperties;
}

/** The list operation result. */
export declare interface OSFamilyListResult {
    /** The list of resources. */
    value: OSFamily[];
    /** The URI to fetch the next page of resources. Use this to get the next page of resources. Do this till nextLink is null to fetch all the resources. */
    nextLink?: string;
}

/** OS family properties. */
export declare interface OSFamilyProperties {
    /**
     * The OS family name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The OS family label.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly label?: string;
    /**
     * List of OS versions belonging to this family.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly versions?: OSVersionPropertiesBase[];
}

/** Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned. */
export declare interface OSProfile {
    /** Specifies the host OS name of the virtual machine. <br><br> This name cannot be updated after the VM is created. <br><br> **Max-length (Windows):** 15 characters <br><br> **Max-length (Linux):** 64 characters. <br><br> For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules). */
    computerName?: string;
    /** Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters. */
    adminUsername?: string;
    /** Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection) */
    adminPassword?: string;
    /** Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> **Note: Do not pass any secrets or passwords in customData property** <br><br> This property cannot be updated after the VM is created. <br><br> customData is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/) <br><br> For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init) */
    customData?: string;
    /** Specifies Windows operating system settings on the virtual machine. */
    windowsConfiguration?: WindowsConfiguration;
    /** Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros). */
    linuxConfiguration?: LinuxConfiguration;
    /** Specifies set of certificates that should be installed onto the virtual machine. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows). */
    secrets?: VaultSecretGroup[];
    /** Specifies whether extension operations should be allowed on the virtual machine. <br><br>This may only be set to False when no extensions are present on the virtual machine. */
    allowExtensionOperations?: boolean;
    /** Optional property which must either be set to True or omitted. */
    requireGuestProvisionSignal?: boolean;
}

/** Describes a cloud service OS version. */
export declare interface OSVersion {
    /**
     * Resource Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Resource location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /** OS version properties. */
    properties?: OSVersionProperties;
}

/** The list operation result. */
export declare interface OSVersionListResult {
    /** The list of resources. */
    value: OSVersion[];
    /** The URI to fetch the next page of resources. Use this to get the next page of resources. Do this till nextLink is null to fetch all the resources. */
    nextLink?: string;
}

/** OS version properties. */
export declare interface OSVersionProperties {
    /**
     * The family of this OS version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly family?: string;
    /**
     * The family label of this OS version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly familyLabel?: string;
    /**
     * The OS version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * The OS version label.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly label?: string;
    /**
     * Specifies whether this is the default OS version for its family.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDefault?: boolean;
    /**
     * Specifies whether this OS version is active.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isActive?: boolean;
}

/** Configuration view of an OS version. */
export declare interface OSVersionPropertiesBase {
    /**
     * The OS version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * The OS version label.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly label?: string;
    /**
     * Specifies whether this is the default OS version for its family.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDefault?: boolean;
    /**
     * Specifies whether this OS version is active.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isActive?: boolean;
}

/**
 * Defines values for PatchAssessmentState. \
 * {@link KnownPatchAssessmentState} can be used interchangeably with PatchAssessmentState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Available**
 */
export declare type PatchAssessmentState = string;

/** Information about a specific patch that was encountered during an installation action. */
export declare interface PatchInstallationDetail {
    /**
     * A unique identifier for the patch.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly patchId?: string;
    /**
     * The friendly name of the patch.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The version string of the package. It may conform to Semantic Versioning. Only applies to Linux.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * The KBID of the patch. Only applies to Windows patches.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kbId?: string;
    /**
     * The classification(s) of the patch as provided by the patch publisher.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly classifications?: string[];
    /**
     * The state of the patch after the installation operation completed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly installationState?: PatchInstallationState;
}

/**
 * Defines values for PatchInstallationState. \
 * {@link KnownPatchInstallationState} can be used interchangeably with PatchInstallationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Installed** \
 * **Failed** \
 * **Excluded** \
 * **NotSelected** \
 * **Pending**
 */
export declare type PatchInstallationState = string;

/**
 * Defines values for PatchOperationStatus. \
 * {@link KnownPatchOperationStatus} can be used interchangeably with PatchOperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **InProgress** \
 * **Failed** \
 * **Succeeded** \
 * **CompletedWithWarnings**
 */
export declare type PatchOperationStatus = string;

/** Specifies settings related to VM Guest Patching on Windows. */
export declare interface PatchSettings {
    /** Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true */
    patchMode?: WindowsVMGuestPatchMode;
    /** Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'. */
    enableHotpatching?: boolean;
    /** Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine.<br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true. */
    assessmentMode?: WindowsPatchAssessmentMode;
    /** Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Windows. */
    automaticByPlatformSettings?: WindowsVMGuestPatchAutomaticByPlatformSettings;
}

/** Base information about the community gallery resource in pir. */
export declare interface PirCommunityGalleryResource {
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource location
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The unique id of this community gallery. */
    uniqueId?: string;
}

/** The Resource model definition. */
export declare interface PirResource {
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource location
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
}

/** Base information about the shared gallery resource in pir. */
export declare interface PirSharedGalleryResource extends PirResource {
    /** The unique id of this shared gallery. */
    uniqueId?: string;
}

/** Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**. */
export declare interface Plan {
    /** The plan ID. */
    name?: string;
    /** The publisher ID. */
    publisher?: string;
    /** Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element. */
    product?: string;
    /** The promotion code. */
    promotionCode?: string;
}

/** Specifies the target splits for Spot and Regular priority VMs within a scale set with flexible orchestration mode. <br><br>With this property the customer is able to specify the base number of regular priority VMs created as the VMSS flex instance scales out and the split between Spot and Regular priority VMs after this base target has been reached. */
export declare interface PriorityMixPolicy {
    /** The base number of regular priority VMs that will be created in this scale set as it scales out. */
    baseRegularPriorityCount?: number;
    /** The percentage of VM instances, after the base regular priority count has been reached, that are expected to use regular priority. */
    regularPriorityPercentageAboveBase?: number;
}

/** The Private Endpoint resource. */
export declare interface PrivateEndpoint {
    /**
     * The ARM identifier for Private Endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The Private Endpoint Connection resource. */
export declare interface PrivateEndpointConnection {
    /**
     * private endpoint connection Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * private endpoint connection name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * private endpoint connection type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The resource of private end point.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between DiskAccess and Virtual Network. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * The provisioning state of the private endpoint connection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** A list of private link resources */
export declare interface PrivateEndpointConnectionListResult {
    /** Array of private endpoint connections */
    value?: PrivateEndpointConnection[];
    /** The uri to fetch the next page of snapshots. Call ListNext() with this to fetch the next page of snapshots. */
    nextLink?: string;
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export declare type PrivateEndpointConnectionProvisioningState = string;

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export declare type PrivateEndpointServiceConnectionStatus = string;

/** A private link resource */
export declare interface PrivateLinkResource {
    /**
     * private link resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * private link resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * private link resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /** The private link resource DNS zone name. */
    requiredZoneNames?: string[];
}

/** A list of private link resources */
export declare interface PrivateLinkResourceListResult {
    /** Array of private link resources */
    value?: PrivateLinkResource[];
}

/** A collection of information about the state of the connection between service consumer and provider. */
export declare interface PrivateLinkServiceConnectionState {
    /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
    status?: PrivateEndpointServiceConnectionStatus;
    /** The reason for approval/rejection of the connection. */
    description?: string;
    /** A message indicating if changes on the service provider require any updates on the consumer. */
    actionsRequired?: string;
}

/** Properties of the disk for which update is pending. */
export declare interface PropertyUpdatesInProgress {
    /** The target performance tier of the disk if a tier change operation is in progress. */
    targetTier?: string;
}

/** Defines values for ProtocolTypes. */
export declare type ProtocolTypes = "Http" | "Https";

/** Specifies information about the proximity placement group. */
export declare interface ProximityPlacementGroup extends Resource {
    /** Specifies the Availability Zone where virtual machine, virtual machine scale set or availability set associated with the  proximity placement group can be created. */
    zones?: string[];
    /** Specifies the type of the proximity placement group. <br><br> Possible values are: <br><br> **Standard** : Co-locate resources within an Azure region or Availability Zone. <br><br> **Ultra** : For future use. */
    proximityPlacementGroupType?: ProximityPlacementGroupType;
    /**
     * A list of references to all virtual machines in the proximity placement group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly virtualMachines?: SubResourceWithColocationStatus[];
    /**
     * A list of references to all virtual machine scale sets in the proximity placement group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly virtualMachineScaleSets?: SubResourceWithColocationStatus[];
    /**
     * A list of references to all availability sets in the proximity placement group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly availabilitySets?: SubResourceWithColocationStatus[];
    /** Describes colocation status of the Proximity Placement Group. */
    colocationStatus?: InstanceViewStatus;
    /** Specifies the user intent of the proximity placement group. */
    intent?: ProximityPlacementGroupPropertiesIntent;
}

/** The List Proximity Placement Group operation response. */
export declare interface ProximityPlacementGroupListResult {
    /** The list of proximity placement groups */
    value: ProximityPlacementGroup[];
    /** The URI to fetch the next page of proximity placement groups. */
    nextLink?: string;
}

/** Specifies the user intent of the proximity placement group. */
export declare interface ProximityPlacementGroupPropertiesIntent {
    /** Specifies possible sizes of virtual machines that can be created in the proximity placement group. */
    vmSizes?: string[];
}

/** Interface representing a ProximityPlacementGroups. */
export declare interface ProximityPlacementGroups {
    /**
     * Lists all proximity placement groups in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ProximityPlacementGroupsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ProximityPlacementGroup>;
    /**
     * Lists all proximity placement groups in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ProximityPlacementGroupsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ProximityPlacementGroup>;
    /**
     * Create or update a proximity placement group.
     * @param resourceGroupName The name of the resource group.
     * @param proximityPlacementGroupName The name of the proximity placement group.
     * @param parameters Parameters supplied to the Create Proximity Placement Group operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, proximityPlacementGroupName: string, parameters: ProximityPlacementGroup, options?: ProximityPlacementGroupsCreateOrUpdateOptionalParams): Promise<ProximityPlacementGroupsCreateOrUpdateResponse>;
    /**
     * Update a proximity placement group.
     * @param resourceGroupName The name of the resource group.
     * @param proximityPlacementGroupName The name of the proximity placement group.
     * @param parameters Parameters supplied to the Update Proximity Placement Group operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, proximityPlacementGroupName: string, parameters: ProximityPlacementGroupUpdate, options?: ProximityPlacementGroupsUpdateOptionalParams): Promise<ProximityPlacementGroupsUpdateResponse>;
    /**
     * Delete a proximity placement group.
     * @param resourceGroupName The name of the resource group.
     * @param proximityPlacementGroupName The name of the proximity placement group.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, proximityPlacementGroupName: string, options?: ProximityPlacementGroupsDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves information about a proximity placement group .
     * @param resourceGroupName The name of the resource group.
     * @param proximityPlacementGroupName The name of the proximity placement group.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, proximityPlacementGroupName: string, options?: ProximityPlacementGroupsGetOptionalParams): Promise<ProximityPlacementGroupsGetResponse>;
}

/** Optional parameters. */
export declare interface ProximityPlacementGroupsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ProximityPlacementGroupsCreateOrUpdateResponse = ProximityPlacementGroup;

/** Optional parameters. */
export declare interface ProximityPlacementGroupsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ProximityPlacementGroupsGetOptionalParams extends coreClient.OperationOptions {
    /** includeColocationStatus=true enables fetching the colocation status of all the resources in the proximity placement group. */
    includeColocationStatus?: string;
}

/** Contains response data for the get operation. */
export declare type ProximityPlacementGroupsGetResponse = ProximityPlacementGroup;

/** Optional parameters. */
export declare interface ProximityPlacementGroupsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ProximityPlacementGroupsListByResourceGroupNextResponse = ProximityPlacementGroupListResult;

/** Optional parameters. */
export declare interface ProximityPlacementGroupsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ProximityPlacementGroupsListByResourceGroupResponse = ProximityPlacementGroupListResult;

/** Optional parameters. */
export declare interface ProximityPlacementGroupsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type ProximityPlacementGroupsListBySubscriptionNextResponse = ProximityPlacementGroupListResult;

/** Optional parameters. */
export declare interface ProximityPlacementGroupsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type ProximityPlacementGroupsListBySubscriptionResponse = ProximityPlacementGroupListResult;

/** Optional parameters. */
export declare interface ProximityPlacementGroupsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ProximityPlacementGroupsUpdateResponse = ProximityPlacementGroup;

/**
 * Defines values for ProximityPlacementGroupType. \
 * {@link KnownProximityPlacementGroupType} can be used interchangeably with ProximityPlacementGroupType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **Ultra**
 */
export declare type ProximityPlacementGroupType = string;

/** Specifies information about the proximity placement group. */
export declare interface ProximityPlacementGroupUpdate extends UpdateResource {
}

/** The ProxyOnly Resource model definition. */
export declare interface ProxyOnlyResource {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The resource model definition for an Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible. */
export declare interface PublicIPAddressSku {
    /** Specify public IP sku name */
    name?: PublicIPAddressSkuName;
    /** Specify public IP sku tier */
    tier?: PublicIPAddressSkuTier;
}

/**
 * Defines values for PublicIPAddressSkuName. \
 * {@link KnownPublicIPAddressSkuName} can be used interchangeably with PublicIPAddressSkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Standard**
 */
export declare type PublicIPAddressSkuName = string;

/**
 * Defines values for PublicIPAddressSkuTier. \
 * {@link KnownPublicIPAddressSkuTier} can be used interchangeably with PublicIPAddressSkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Regional** \
 * **Global**
 */
export declare type PublicIPAddressSkuTier = string;

/**
 * Defines values for PublicIPAllocationMethod. \
 * {@link KnownPublicIPAllocationMethod} can be used interchangeably with PublicIPAllocationMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Dynamic** \
 * **Static**
 */
export declare type PublicIPAllocationMethod = string;

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: You can generate a SAS URI to access the underlying data of the disk publicly on the internet when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate. \
 * **Disabled**: You cannot access the underlying data of the disk publicly on the internet even when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate.
 */
export declare type PublicNetworkAccess = string;

/** Used for establishing the purchase context of any 3rd Party artifact through MarketPlace. */
export declare interface PurchasePlan {
    /** The publisher ID. */
    publisher: string;
    /** The plan ID. */
    name: string;
    /** Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element. */
    product: string;
}

/** Used for establishing the purchase context of any 3rd Party artifact through MarketPlace. */
export declare interface PurchasePlanAutoGenerated {
    /** The plan ID. */
    name: string;
    /** The publisher ID. */
    publisher: string;
    /** Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element. */
    product: string;
    /** The Offer Promotion Code. */
    promotionCode?: string;
}

/** The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. */
export declare interface RecommendedMachineConfiguration {
    /** Describes the resource range. */
    vCPUs?: ResourceRange;
    /** Describes the resource range. */
    memory?: ResourceRange;
}

/** Response after calling a manual recovery walk */
export declare interface RecoveryWalkResponse {
    /**
     * Whether the recovery walk was performed
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly walkPerformed?: boolean;
    /**
     * The next update domain that needs to be walked. Null means walk spanning all update domains has been completed
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextPlatformUpdateDomain?: number;
}

/** This is the regional replication status. */
export declare interface RegionalReplicationStatus {
    /**
     * The region to which the gallery image version is being replicated to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly region?: string;
    /**
     * This is the regional replication state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: ReplicationState;
    /**
     * The details of the replication status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: string;
    /**
     * It indicates progress of the replication job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly progress?: number;
}

/** Gallery regional sharing status */
export declare interface RegionalSharingStatus {
    /** Region name */
    region?: string;
    /**
     * Gallery sharing state in current region
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: SharingState;
    /** Details of gallery regional sharing failure. */
    details?: string;
}

/**
 * Defines values for RepairAction. \
 * {@link KnownRepairAction} can be used interchangeably with RepairAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Replace** \
 * **Restart** \
 * **Reimage**
 */
export declare type RepairAction = string;

/**
 * Defines values for ReplicationMode. \
 * {@link KnownReplicationMode} can be used interchangeably with ReplicationMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Full** \
 * **Shallow**
 */
export declare type ReplicationMode = string;

/**
 * Defines values for ReplicationState. \
 * {@link KnownReplicationState} can be used interchangeably with ReplicationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Replicating** \
 * **Completed** \
 * **Failed**
 */
export declare type ReplicationState = string;

/** This is the replication status of the gallery image version. */
export declare interface ReplicationStatus {
    /**
     * This is the aggregated replication status based on all the regional replication status flags.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aggregatedState?: AggregatedReplicationState;
    /**
     * This is a summary of replication status for each region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly summary?: RegionalReplicationStatus[];
}

/**
 * Defines values for ReplicationStatusTypes. \
 * {@link KnownReplicationStatusTypes} can be used interchangeably with ReplicationStatusTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ReplicationStatus**
 */
export declare type ReplicationStatusTypes = string;

/** Api request input for LogAnalytics getRequestRateByInterval Api. */
export declare interface RequestRateByIntervalInput extends LogAnalyticsInputBase {
    /** Interval value in minutes used to create LogAnalytics call rate logs. */
    intervalLength: IntervalInMins;
}

/** The Resource model definition. */
export declare interface Resource {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource location */
    location: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Defines values for ResourceIdentityType. */
export declare type ResourceIdentityType = "SystemAssigned" | "UserAssigned" | "SystemAssigned, UserAssigned" | "None";

/** Instance view status. */
export declare interface ResourceInstanceViewStatus {
    /**
     * The status code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The short localizable label for the status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayStatus?: string;
    /**
     * The detailed status message, including for alerts and error messages.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The time of the status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly time?: Date;
    /** The level code. */
    level?: StatusLevelTypes;
}

/** Describes the resource range. */
export declare interface ResourceRange {
    /** The minimum number of the resource. */
    min?: number;
    /** The maximum number of the resource. */
    max?: number;
}

/** Describes an available Compute SKU. */
export declare interface ResourceSku {
    /**
     * The type of resource the SKU applies to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceType?: string;
    /**
     * The name of SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: string;
    /**
     * The Size of the SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly size?: string;
    /**
     * The Family of this particular SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly family?: string;
    /**
     * The Kind of resources that are supported in this SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: string;
    /**
     * Specifies the number of virtual machines in the scale set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capacity?: ResourceSkuCapacity;
    /**
     * The set of locations that the SKU is available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: string[];
    /**
     * A list of locations and availability zones in those locations where the SKU is available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locationInfo?: ResourceSkuLocationInfo[];
    /**
     * The api versions that support this SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiVersions?: string[];
    /**
     * Metadata for retrieving price info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly costs?: ResourceSkuCosts[];
    /**
     * A name value pair to describe the capability.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capabilities?: ResourceSkuCapabilities[];
    /**
     * The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restrictions?: ResourceSkuRestrictions[];
}

/** Describes The SKU capabilities object. */
export declare interface ResourceSkuCapabilities {
    /**
     * An invariant to describe the feature.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * An invariant if the feature is measured by quantity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
}

/** Describes scaling information of a SKU. */
export declare interface ResourceSkuCapacity {
    /**
     * The minimum capacity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly minimum?: number;
    /**
     * The maximum capacity that can be set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maximum?: number;
    /**
     * The default capacity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly default?: number;
    /**
     * The scale type applicable to the sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scaleType?: ResourceSkuCapacityScaleType;
}

/** Defines values for ResourceSkuCapacityScaleType. */
export declare type ResourceSkuCapacityScaleType = "Automatic" | "Manual" | "None";

/** Describes metadata for retrieving price info. */
export declare interface ResourceSkuCosts {
    /**
     * Used for querying price from commerce.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly meterID?: string;
    /**
     * The multiplier is needed to extend the base metered cost.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quantity?: number;
    /**
     * An invariant to show the extended unit.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly extendedUnit?: string;
}

/** Describes an available Compute SKU Location Information. */
export declare interface ResourceSkuLocationInfo {
    /**
     * Location of the SKU
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * List of availability zones where the SKU is supported.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zones?: string[];
    /**
     * Details of capabilities available to a SKU in specific zones.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zoneDetails?: ResourceSkuZoneDetails[];
    /**
     * The names of extended locations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly extendedLocations?: string[];
    /**
     * The type of the extended location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: ExtendedLocationType;
}

/** Describes an available Compute SKU Restriction Information. */
export declare interface ResourceSkuRestrictionInfo {
    /**
     * Locations where the SKU is restricted
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: string[];
    /**
     * List of availability zones where the SKU is restricted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zones?: string[];
}

/** Describes scaling information of a SKU. */
export declare interface ResourceSkuRestrictions {
    /**
     * The type of restrictions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: ResourceSkuRestrictionsType;
    /**
     * The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly values?: string[];
    /**
     * The information about the restriction where the SKU cannot be used.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restrictionInfo?: ResourceSkuRestrictionInfo;
    /**
     * The reason for restriction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reasonCode?: ResourceSkuRestrictionsReasonCode;
}

/** Defines values for ResourceSkuRestrictionsReasonCode. */
export declare type ResourceSkuRestrictionsReasonCode = "QuotaId" | "NotAvailableForSubscription";

/** Defines values for ResourceSkuRestrictionsType. */
export declare type ResourceSkuRestrictionsType = "Location" | "Zone";

/** Interface representing a ResourceSkus. */
export declare interface ResourceSkus {
    /**
     * Gets the list of Microsoft.Compute SKUs available for your Subscription.
     * @param options The options parameters.
     */
    list(options?: ResourceSkusListOptionalParams): PagedAsyncIterableIterator<ResourceSku>;
}

/** Optional parameters. */
export declare interface ResourceSkusListNextOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Only **location** filter is supported currently. */
    filter?: string;
    /** To Include Extended Locations information or not in the response. */
    includeExtendedLocations?: string;
}

/** Contains response data for the listNext operation. */
export declare type ResourceSkusListNextResponse = ResourceSkusResult;

/** Optional parameters. */
export declare interface ResourceSkusListOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. Only **location** filter is supported currently. */
    filter?: string;
    /** To Include Extended Locations information or not in the response. */
    includeExtendedLocations?: string;
}

/** Contains response data for the list operation. */
export declare type ResourceSkusListResponse = ResourceSkusResult;

/** The List Resource Skus operation response. */
export declare interface ResourceSkusResult {
    /** The list of skus available for the subscription. */
    value: ResourceSku[];
    /** The URI to fetch the next page of Resource Skus. Call ListNext() with this URI to fetch the next page of Resource Skus */
    nextLink?: string;
}

/** Describes The zonal capabilities of a SKU. */
export declare interface ResourceSkuZoneDetails {
    /**
     * The set of zones that the SKU is available in with the specified capabilities.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string[];
    /**
     * A list of capabilities that are available for the SKU in the specified list of zones.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capabilities?: ResourceSkuCapabilities[];
}

/** The List resources which are encrypted with the disk encryption set. */
export declare interface ResourceUriList {
    /** A list of IDs or Owner IDs of resources which are encrypted with the disk encryption set. */
    value: string[];
    /** The uri to fetch the next page of encrypted resources. Call ListNext() with this to fetch the next page of encrypted resources. */
    nextLink?: string;
}

/** The Resource model definition with location property as optional. */
export declare interface ResourceWithOptionalLocation {
    /** Resource location */
    location?: string;
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Restore Point details. */
export declare interface RestorePoint extends ProxyResource {
    /** List of disk resource ids that the customer wishes to exclude from the restore point. If no disks are specified, all disks will be included. */
    excludeDisks?: ApiEntityReference[];
    /**
     * Gets the details of the VM captured at the time of the restore point creation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceMetadata?: RestorePointSourceMetadata;
    /**
     * Gets the provisioning state of the restore point.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** ConsistencyMode of the RestorePoint. Can be specified in the input while creating a restore point. For now, only CrashConsistent is accepted as a valid input. Please refer to https://aka.ms/RestorePoints for more details. */
    consistencyMode?: ConsistencyModeTypes;
    /** Gets the creation time of the restore point. */
    timeCreated?: Date;
    /** Resource Id of the source restore point from which a copy needs to be created. */
    sourceRestorePoint?: ApiEntityReference;
    /**
     * The restore point instance view.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: RestorePointInstanceView;
}

/** Create or update Restore Point collection parameters. */
export declare interface RestorePointCollection extends Resource {
    /** The properties of the source resource that this restore point collection is created from. */
    source?: RestorePointCollectionSourceProperties;
    /**
     * The provisioning state of the restore point collection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique id of the restore point collection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restorePointCollectionId?: string;
    /**
     * A list containing all restore points created under this restore point collection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restorePoints?: RestorePoint[];
}

/**
 * Defines values for RestorePointCollectionExpandOptions. \
 * {@link KnownRestorePointCollectionExpandOptions} can be used interchangeably with RestorePointCollectionExpandOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **restorePoints**
 */
export declare type RestorePointCollectionExpandOptions = string;

/** The List restore point collection operation response. */
export declare interface RestorePointCollectionListResult {
    /** Gets the list of restore point collections. */
    value?: RestorePointCollection[];
    /** The uri to fetch the next page of RestorePointCollections. Call ListNext() with this to fetch the next page of RestorePointCollections */
    nextLink?: string;
}

/** Interface representing a RestorePointCollections. */
export declare interface RestorePointCollections {
    /**
     * Gets the list of restore point collections in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: RestorePointCollectionsListOptionalParams): PagedAsyncIterableIterator<RestorePointCollection>;
    /**
     * Gets the list of restore point collections in the subscription. Use nextLink property in the
     * response to get the next page of restore point collections. Do this till nextLink is not null to
     * fetch all the restore point collections.
     * @param options The options parameters.
     */
    listAll(options?: RestorePointCollectionsListAllOptionalParams): PagedAsyncIterableIterator<RestorePointCollection>;
    /**
     * The operation to create or update the restore point collection. Please refer to
     * https://aka.ms/RestorePoints for more details. When updating a restore point collection, only tags
     * may be modified.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection.
     * @param parameters Parameters supplied to the Create or Update restore point collection operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, restorePointCollectionName: string, parameters: RestorePointCollection, options?: RestorePointCollectionsCreateOrUpdateOptionalParams): Promise<RestorePointCollectionsCreateOrUpdateResponse>;
    /**
     * The operation to update the restore point collection.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection.
     * @param parameters Parameters supplied to the Update restore point collection operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, restorePointCollectionName: string, parameters: RestorePointCollectionUpdate, options?: RestorePointCollectionsUpdateOptionalParams): Promise<RestorePointCollectionsUpdateResponse>;
    /**
     * The operation to delete the restore point collection. This operation will also delete all the
     * contained restore points.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the Restore Point Collection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, restorePointCollectionName: string, options?: RestorePointCollectionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to delete the restore point collection. This operation will also delete all the
     * contained restore points.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the Restore Point Collection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, restorePointCollectionName: string, options?: RestorePointCollectionsDeleteOptionalParams): Promise<void>;
    /**
     * The operation to get the restore point collection.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, restorePointCollectionName: string, options?: RestorePointCollectionsGetOptionalParams): Promise<RestorePointCollectionsGetResponse>;
}

/** Optional parameters. */
export declare interface RestorePointCollectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type RestorePointCollectionsCreateOrUpdateResponse = RestorePointCollection;

/** Optional parameters. */
export declare interface RestorePointCollectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface RestorePointCollectionsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. If expand=restorePoints, server will return all contained restore points in the restorePointCollection. */
    expand?: RestorePointCollectionExpandOptions;
}

/** Contains response data for the get operation. */
export declare type RestorePointCollectionsGetResponse = RestorePointCollection;

/** Optional parameters. */
export declare interface RestorePointCollectionsListAllNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAllNext operation. */
export declare type RestorePointCollectionsListAllNextResponse = RestorePointCollectionListResult;

/** Optional parameters. */
export declare interface RestorePointCollectionsListAllOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAll operation. */
export declare type RestorePointCollectionsListAllResponse = RestorePointCollectionListResult;

/** Optional parameters. */
export declare interface RestorePointCollectionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type RestorePointCollectionsListNextResponse = RestorePointCollectionListResult;

/** Optional parameters. */
export declare interface RestorePointCollectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type RestorePointCollectionsListResponse = RestorePointCollectionListResult;

/** The properties of the source resource that this restore point collection is created from. */
export declare interface RestorePointCollectionSourceProperties {
    /**
     * Location of the source resource used to create this restore point collection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /** Resource Id of the source resource used to create this restore point collection */
    id?: string;
}

/** Optional parameters. */
export declare interface RestorePointCollectionsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type RestorePointCollectionsUpdateResponse = RestorePointCollection;

/** Update Restore Point collection parameters. */
export declare interface RestorePointCollectionUpdate extends UpdateResource {
    /** The properties of the source resource that this restore point collection is created from. */
    source?: RestorePointCollectionSourceProperties;
    /**
     * The provisioning state of the restore point collection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique id of the restore point collection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restorePointCollectionId?: string;
    /**
     * A list containing all restore points created under this restore point collection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restorePoints?: RestorePoint[];
}

/**
 * Defines values for RestorePointExpandOptions. \
 * {@link KnownRestorePointExpandOptions} can be used interchangeably with RestorePointExpandOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **instanceView**
 */
export declare type RestorePointExpandOptions = string;

/** The instance view of a restore point. */
export declare interface RestorePointInstanceView {
    /** The disk restore points information. */
    diskRestorePoints?: DiskRestorePointInstanceView[];
    /** The resource status information. */
    statuses?: InstanceViewStatus[];
}

/** Interface representing a RestorePoints. */
export declare interface RestorePoints {
    /**
     * The operation to create the restore point. Updating properties of an existing restore point is not
     * allowed
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection.
     * @param restorePointName The name of the restore point.
     * @param parameters Parameters supplied to the Create restore point operation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, restorePointCollectionName: string, restorePointName: string, parameters: RestorePoint, options?: RestorePointsCreateOptionalParams): Promise<PollerLike<PollOperationState<RestorePointsCreateResponse>, RestorePointsCreateResponse>>;
    /**
     * The operation to create the restore point. Updating properties of an existing restore point is not
     * allowed
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection.
     * @param restorePointName The name of the restore point.
     * @param parameters Parameters supplied to the Create restore point operation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, restorePointCollectionName: string, restorePointName: string, parameters: RestorePoint, options?: RestorePointsCreateOptionalParams): Promise<RestorePointsCreateResponse>;
    /**
     * The operation to delete the restore point.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the Restore Point Collection.
     * @param restorePointName The name of the restore point.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, restorePointCollectionName: string, restorePointName: string, options?: RestorePointsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to delete the restore point.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the Restore Point Collection.
     * @param restorePointName The name of the restore point.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, restorePointCollectionName: string, restorePointName: string, options?: RestorePointsDeleteOptionalParams): Promise<void>;
    /**
     * The operation to get the restore point.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection.
     * @param restorePointName The name of the restore point.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, restorePointCollectionName: string, restorePointName: string, options?: RestorePointsGetOptionalParams): Promise<RestorePointsGetResponse>;
}

/** Optional parameters. */
export declare interface RestorePointsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type RestorePointsCreateResponse = RestorePoint;

/** Optional parameters. */
export declare interface RestorePointsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface RestorePointsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. 'InstanceView' retrieves information about the run-time state of a restore point. */
    expand?: RestorePointExpandOptions;
}

/** Contains response data for the get operation. */
export declare type RestorePointsGetResponse = RestorePoint;

/** Describes the properties of the Virtual Machine for which the restore point was created. The properties provided are a subset and the snapshot of the overall Virtual Machine properties captured at the time of the restore point creation. */
export declare interface RestorePointSourceMetadata {
    /** Gets the hardware profile. */
    hardwareProfile?: HardwareProfile;
    /** Gets the storage profile. */
    storageProfile?: RestorePointSourceVMStorageProfile;
    /** Gets the OS profile. */
    osProfile?: OSProfile;
    /** Gets the diagnostics profile. */
    diagnosticsProfile?: DiagnosticsProfile;
    /** Gets the license type, which is for bring your own license scenario. */
    licenseType?: string;
    /** Gets the virtual machine unique id. */
    vmId?: string;
    /** Gets the security profile. */
    securityProfile?: SecurityProfile;
    /** Location of the VM from which the restore point was created. */
    location?: string;
}

/** Describes a data disk. */
export declare interface RestorePointSourceVMDataDisk {
    /** Gets the logical unit number. */
    lun?: number;
    /** Gets the disk name. */
    name?: string;
    /** Gets the caching type. */
    caching?: CachingTypes;
    /** Gets the initial disk size in GB for blank data disks, and the new desired size for existing OS and Data disks. */
    diskSizeGB?: number;
    /** Gets the managed disk details */
    managedDisk?: ManagedDiskParameters;
    /** Gets the disk restore point Id. */
    diskRestorePoint?: ApiEntityReference;
}

/** Describes an Operating System disk. */
export declare interface RestorePointSourceVmosDisk {
    /** Gets the Operating System type. */
    osType?: OperatingSystemType;
    /** Gets the disk encryption settings. */
    encryptionSettings?: DiskEncryptionSettings;
    /** Gets the disk name. */
    name?: string;
    /** Gets the caching type. */
    caching?: CachingTypes;
    /** Gets the disk size in GB. */
    diskSizeGB?: number;
    /** Gets the managed disk details */
    managedDisk?: ManagedDiskParameters;
    /** Gets the disk restore point Id. */
    diskRestorePoint?: ApiEntityReference;
}

/** Describes the storage profile. */
export declare interface RestorePointSourceVMStorageProfile {
    /** Gets the OS disk of the VM captured at the time of the restore point creation. */
    osDisk?: RestorePointSourceVmosDisk;
    /** Gets the data disks of the VM captured at the time of the restore point creation. */
    dataDisks?: RestorePointSourceVMDataDisk[];
}

/** The SAS URIs of the console screenshot and serial log blobs. */
export declare interface RetrieveBootDiagnosticsDataResult {
    /**
     * The console screenshot blob URI
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly consoleScreenshotBlobUri?: string;
    /**
     * The serial console log blob URI.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serialConsoleLogBlobUri?: string;
}

/** Describes the cloud service role instance. */
export declare interface RoleInstance {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource Name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource Type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Resource Location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * Resource tags.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tags?: {
        [propertyName: string]: string;
    };
    /** The role instance SKU. */
    sku?: InstanceSku;
    /** Role instance properties. */
    properties?: RoleInstanceProperties;
}

/** The list operation result. */
export declare interface RoleInstanceListResult {
    /** The list of resources. */
    value: RoleInstance[];
    /** The URI to fetch the next page of resources. Use this to get the next page of resources. Do this till nextLink is null to fetch all the resources. */
    nextLink?: string;
}

/** Describes the network profile for the role instance. */
export declare interface RoleInstanceNetworkProfile {
    /**
     * Specifies the list of resource Ids for the network interfaces associated with the role instance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkInterfaces?: SubResource[];
}

/** Role instance properties. */
export declare interface RoleInstanceProperties {
    /** Describes the network profile for the role instance. */
    networkProfile?: RoleInstanceNetworkProfile;
    /** The instance view of the role instance. */
    instanceView?: RoleInstanceView;
}

/** Specifies a list of role instances from the cloud service. */
export declare interface RoleInstances {
    /** List of cloud service role instance names. Value of '*' will signify all role instances of the cloud service. */
    roleInstances: string[];
}

/** The instance view of the role instance. */
export declare interface RoleInstanceView {
    /**
     * The Update Domain.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly platformUpdateDomain?: number;
    /**
     * The Fault Domain.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly platformFaultDomain?: number;
    /**
     * Specifies a unique identifier generated internally for the cloud service associated with this role instance. <br /><br /> NOTE: If you are using Azure Diagnostics extension, this property can be used as 'DeploymentId' for querying details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateId?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly statuses?: ResourceInstanceViewStatus[];
}

/** Information about rollback on failed VM instances after a OS Upgrade operation. */
export declare interface RollbackStatusInfo {
    /**
     * The number of instances which have been successfully rolled back.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly successfullyRolledbackInstanceCount?: number;
    /**
     * The number of instances which failed to rollback.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly failedRolledbackInstanceCount?: number;
    /**
     * Error details if OS rollback failed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rollbackError?: ApiError;
}

/** Defines values for RollingUpgradeActionType. */
export declare type RollingUpgradeActionType = "Start" | "Cancel";

/** The configuration parameters used while performing a rolling upgrade. */
export declare interface RollingUpgradePolicy {
    /** The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%. */
    maxBatchInstancePercent?: number;
    /** The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%. */
    maxUnhealthyInstancePercent?: number;
    /** The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%. */
    maxUnhealthyUpgradedInstancePercent?: number;
    /** The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S). */
    pauseTimeBetweenBatches?: string;
    /** Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size. */
    enableCrossZoneUpgrade?: boolean;
    /** Upgrade all unhealthy instances in a scale set before any healthy instances. */
    prioritizeUnhealthyInstances?: boolean;
}

/** Information about the number of virtual machine instances in each upgrade state. */
export declare interface RollingUpgradeProgressInfo {
    /**
     * The number of instances that have been successfully upgraded.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly successfulInstanceCount?: number;
    /**
     * The number of instances that have failed to be upgraded successfully.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly failedInstanceCount?: number;
    /**
     * The number of instances that are currently being upgraded.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inProgressInstanceCount?: number;
    /**
     * The number of instances that have not yet begun to be upgraded.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pendingInstanceCount?: number;
}

/** Information about the current running state of the overall upgrade. */
export declare interface RollingUpgradeRunningStatus {
    /**
     * Code indicating the current status of the upgrade.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: RollingUpgradeStatusCode;
    /**
     * Start time of the upgrade.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The last action performed on the rolling upgrade.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastAction?: RollingUpgradeActionType;
    /**
     * Last action time of the upgrade.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastActionTime?: Date;
}

/** Defines values for RollingUpgradeStatusCode. */
export declare type RollingUpgradeStatusCode = "RollingForward" | "Cancelled" | "Completed" | "Faulted";

/** The status of the latest virtual machine scale set rolling upgrade. */
export declare interface RollingUpgradeStatusInfo extends Resource {
    /**
     * The rolling upgrade policies applied for this upgrade.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policy?: RollingUpgradePolicy;
    /**
     * Information about the current running state of the overall upgrade.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runningStatus?: RollingUpgradeRunningStatus;
    /**
     * Information about the number of virtual machine instances in each upgrade state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly progress?: RollingUpgradeProgressInfo;
    /**
     * Error details for this upgrade, if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ApiError;
}

/** Describes the properties of a Run Command. */
export declare interface RunCommandDocument extends RunCommandDocumentBase {
    /** The script to be executed. */
    script: string[];
    /** The parameters used by the script. */
    parameters?: RunCommandParameterDefinition[];
}

/** Describes the properties of a Run Command metadata. */
export declare interface RunCommandDocumentBase {
    /** The VM run command schema. */
    schema: string;
    /** The VM run command id. */
    id: string;
    /** The Operating System type. */
    osType: OperatingSystemTypes;
    /** The VM run command label. */
    label: string;
    /** The VM run command description. */
    description: string;
}

/** Capture Virtual Machine parameters. */
export declare interface RunCommandInput {
    /** The run command id. */
    commandId: string;
    /** Optional. The script to be executed.  When this value is given, the given script will override the default script of the command. */
    script?: string[];
    /** The run command parameters. */
    parameters?: RunCommandInputParameter[];
}

/** Describes the properties of a run command parameter. */
export declare interface RunCommandInputParameter {
    /** The run command parameter name. */
    name: string;
    /** The run command parameter value. */
    value: string;
}

/** The List Virtual Machine operation response. */
export declare interface RunCommandListResult {
    /** The list of virtual machine run commands. */
    value: RunCommandDocumentBase[];
    /** The uri to fetch the next page of run commands. Call ListNext() with this to fetch the next page of run commands. */
    nextLink?: string;
}

/** Describes the properties of a run command parameter. */
export declare interface RunCommandParameterDefinition {
    /** The run command parameter name. */
    name: string;
    /** The run command parameter type. */
    type: string;
    /** The run command parameter default value. */
    defaultValue?: string;
    /** The run command parameter required. */
    required?: boolean;
}

export declare interface RunCommandResult {
    /** Run command operation response. */
    value?: InstanceViewStatus[];
}

/** Describes a scale-in policy for a virtual machine scale set. */
export declare interface ScaleInPolicy {
    /** The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br> */
    rules?: VirtualMachineScaleSetScaleInRules[];
    /** This property allows you to specify if virtual machines chosen for removal have to be force deleted when a virtual machine scale set is being scaled-in.(Feature in Preview) */
    forceDeletion?: boolean;
}

export declare interface ScheduledEventsProfile {
    /** Specifies Terminate Scheduled Event related configurations. */
    terminateNotificationProfile?: TerminateNotificationProfile;
}

/**
 * Defines values for SecurityEncryptionTypes. \
 * {@link KnownSecurityEncryptionTypes} can be used interchangeably with SecurityEncryptionTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **VMGuestStateOnly** \
 * **DiskWithVMGuestState**
 */
export declare type SecurityEncryptionTypes = string;

/** Specifies the Security profile settings for the virtual machine or virtual machine scale set. */
export declare interface SecurityProfile {
    /** Specifies the security settings like secure boot and vTPM used while creating the virtual machine. <br><br>Minimum api-version: 2020-12-01 */
    uefiSettings?: UefiSettings;
    /** This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. <br><br> Default: The Encryption at host will be disabled unless this property is set to true for the resource. */
    encryptionAtHost?: boolean;
    /** Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. <br><br> Default: UefiSettings will not be enabled unless this property is set. */
    securityType?: SecurityTypes;
}

/**
 * Defines values for SecurityTypes. \
 * {@link KnownSecurityTypes} can be used interchangeably with SecurityTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TrustedLaunch** \
 * **ConfidentialVM**
 */
export declare type SecurityTypes = string;

/**
 * Defines values for SelectPermissions. \
 * {@link KnownSelectPermissions} can be used interchangeably with SelectPermissions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Permissions**
 */
export declare type SelectPermissions = string;

/** Defines values for SettingNames. */
export declare type SettingNames = "AutoLogon" | "FirstLogonCommands";

/** Interface representing a SharedGalleries. */
export declare interface SharedGalleries {
    /**
     * List shared galleries by subscription id or tenant id.
     * @param location Resource location.
     * @param options The options parameters.
     */
    list(location: string, options?: SharedGalleriesListOptionalParams): PagedAsyncIterableIterator<SharedGallery>;
    /**
     * Get a shared gallery by subscription id or tenant id.
     * @param location Resource location.
     * @param galleryUniqueName The unique name of the Shared Gallery.
     * @param options The options parameters.
     */
    get(location: string, galleryUniqueName: string, options?: SharedGalleriesGetOptionalParams): Promise<SharedGalleriesGetResponse>;
}

/** Optional parameters. */
export declare interface SharedGalleriesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SharedGalleriesGetResponse = SharedGallery;

/** Optional parameters. */
export declare interface SharedGalleriesListNextOptionalParams extends coreClient.OperationOptions {
    /** The query parameter to decide what shared galleries to fetch when doing listing operations. */
    sharedTo?: SharedToValues;
}

/** Contains response data for the listNext operation. */
export declare type SharedGalleriesListNextResponse = SharedGalleryList;

/** Optional parameters. */
export declare interface SharedGalleriesListOptionalParams extends coreClient.OperationOptions {
    /** The query parameter to decide what shared galleries to fetch when doing listing operations. */
    sharedTo?: SharedToValues;
}

/** Contains response data for the list operation. */
export declare type SharedGalleriesListResponse = SharedGalleryList;

/** Specifies information about the Shared Gallery that you want to create or update. */
export declare interface SharedGallery extends PirSharedGalleryResource {
}

/** This is the data disk image. */
export declare interface SharedGalleryDataDiskImage extends SharedGalleryDiskImage {
    /** This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine. */
    lun: number;
}

/** This is the disk image base class. */
export declare interface SharedGalleryDiskImage {
    /**
     * This property indicates the size of the VHD to be created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly diskSizeGB?: number;
    /** The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite' */
    hostCaching?: SharedGalleryHostCaching;
}

/**
 * Defines values for SharedGalleryHostCaching. \
 * {@link KnownSharedGalleryHostCaching} can be used interchangeably with SharedGalleryHostCaching,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **ReadOnly** \
 * **ReadWrite**
 */
export declare type SharedGalleryHostCaching = string;

/** Specifies information about the gallery image definition that you want to create or update. */
export declare interface SharedGalleryImage extends PirSharedGalleryResource {
    /** This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux** */
    osType?: OperatingSystemTypes;
    /** This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'. */
    osState?: OperatingSystemStateTypes;
    /** The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. */
    endOfLifeDate?: Date;
    /** This is the gallery image definition identifier. */
    identifier?: GalleryImageIdentifier;
    /** The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. */
    recommended?: RecommendedMachineConfiguration;
    /** Describes the disallowed disk types. */
    disallowed?: Disallowed;
    /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
    hyperVGeneration?: HyperVGeneration;
    /** A list of gallery image features. */
    features?: GalleryImageFeature[];
    /** Describes the gallery image definition purchase plan. This is used by marketplace images. */
    purchasePlan?: ImagePurchasePlan;
    /** The architecture of the image. Applicable to OS disks only. */
    architecture?: Architecture;
}

/** The List Shared Gallery Images operation response. */
export declare interface SharedGalleryImageList {
    /** A list of shared gallery images. */
    value: SharedGalleryImage[];
    /** The uri to fetch the next page of shared gallery images. Call ListNext() with this to fetch the next page of shared gallery images. */
    nextLink?: string;
}

/** Interface representing a SharedGalleryImages. */
export declare interface SharedGalleryImages {
    /**
     * List shared gallery images by subscription id or tenant id.
     * @param location Resource location.
     * @param galleryUniqueName The unique name of the Shared Gallery.
     * @param options The options parameters.
     */
    list(location: string, galleryUniqueName: string, options?: SharedGalleryImagesListOptionalParams): PagedAsyncIterableIterator<SharedGalleryImage>;
    /**
     * Get a shared gallery image by subscription id or tenant id.
     * @param location Resource location.
     * @param galleryUniqueName The unique name of the Shared Gallery.
     * @param galleryImageName The name of the Shared Gallery Image Definition from which the Image
     *                         Versions are to be listed.
     * @param options The options parameters.
     */
    get(location: string, galleryUniqueName: string, galleryImageName: string, options?: SharedGalleryImagesGetOptionalParams): Promise<SharedGalleryImagesGetResponse>;
}

/** Optional parameters. */
export declare interface SharedGalleryImagesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SharedGalleryImagesGetResponse = SharedGalleryImage;

/** Optional parameters. */
export declare interface SharedGalleryImagesListNextOptionalParams extends coreClient.OperationOptions {
    /** The query parameter to decide what shared galleries to fetch when doing listing operations. */
    sharedTo?: SharedToValues;
}

/** Contains response data for the listNext operation. */
export declare type SharedGalleryImagesListNextResponse = SharedGalleryImageList;

/** Optional parameters. */
export declare interface SharedGalleryImagesListOptionalParams extends coreClient.OperationOptions {
    /** The query parameter to decide what shared galleries to fetch when doing listing operations. */
    sharedTo?: SharedToValues;
}

/** Contains response data for the list operation. */
export declare type SharedGalleryImagesListResponse = SharedGalleryImageList;

/** Specifies information about the gallery image version that you want to create or update. */
export declare interface SharedGalleryImageVersion extends PirSharedGalleryResource {
    /** The published date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. */
    publishedDate?: Date;
    /** The end of life date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. */
    endOfLifeDate?: Date;
    /** If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version. */
    excludeFromLatest?: boolean;
    /** Describes the storage profile of the image version. */
    storageProfile?: SharedGalleryImageVersionStorageProfile;
}

/** The List Shared Gallery Image versions operation response. */
export declare interface SharedGalleryImageVersionList {
    /** A list of shared gallery images versions. */
    value: SharedGalleryImageVersion[];
    /** The uri to fetch the next page of shared gallery image versions. Call ListNext() with this to fetch the next page of shared gallery image versions. */
    nextLink?: string;
}

/** Interface representing a SharedGalleryImageVersions. */
export declare interface SharedGalleryImageVersions {
    /**
     * List shared gallery image versions by subscription id or tenant id.
     * @param location Resource location.
     * @param galleryUniqueName The unique name of the Shared Gallery.
     * @param galleryImageName The name of the Shared Gallery Image Definition from which the Image
     *                         Versions are to be listed.
     * @param options The options parameters.
     */
    list(location: string, galleryUniqueName: string, galleryImageName: string, options?: SharedGalleryImageVersionsListOptionalParams): PagedAsyncIterableIterator<SharedGalleryImageVersion>;
    /**
     * Get a shared gallery image version by subscription id or tenant id.
     * @param location Resource location.
     * @param galleryUniqueName The unique name of the Shared Gallery.
     * @param galleryImageName The name of the Shared Gallery Image Definition from which the Image
     *                         Versions are to be listed.
     * @param galleryImageVersionName The name of the gallery image version to be created. Needs to follow
     *                                semantic version name pattern: The allowed characters are digit and period. Digits must be within
     *                                the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param options The options parameters.
     */
    get(location: string, galleryUniqueName: string, galleryImageName: string, galleryImageVersionName: string, options?: SharedGalleryImageVersionsGetOptionalParams): Promise<SharedGalleryImageVersionsGetResponse>;
}

/** Optional parameters. */
export declare interface SharedGalleryImageVersionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SharedGalleryImageVersionsGetResponse = SharedGalleryImageVersion;

/** Optional parameters. */
export declare interface SharedGalleryImageVersionsListNextOptionalParams extends coreClient.OperationOptions {
    /** The query parameter to decide what shared galleries to fetch when doing listing operations. */
    sharedTo?: SharedToValues;
}

/** Contains response data for the listNext operation. */
export declare type SharedGalleryImageVersionsListNextResponse = SharedGalleryImageVersionList;

/** Optional parameters. */
export declare interface SharedGalleryImageVersionsListOptionalParams extends coreClient.OperationOptions {
    /** The query parameter to decide what shared galleries to fetch when doing listing operations. */
    sharedTo?: SharedToValues;
}

/** Contains response data for the list operation. */
export declare type SharedGalleryImageVersionsListResponse = SharedGalleryImageVersionList;

/** This is the storage profile of a Gallery Image Version. */
export declare interface SharedGalleryImageVersionStorageProfile {
    /** This is the OS disk image. */
    osDiskImage?: SharedGalleryOSDiskImage;
    /** A list of data disk images. */
    dataDiskImages?: SharedGalleryDataDiskImage[];
}

/** The List Shared Galleries operation response. */
export declare interface SharedGalleryList {
    /** A list of shared galleries. */
    value: SharedGallery[];
    /** The uri to fetch the next page of shared galleries. Call ListNext() with this to fetch the next page of shared galleries. */
    nextLink?: string;
}

/** This is the OS disk image. */
export declare interface SharedGalleryOSDiskImage extends SharedGalleryDiskImage {
}

/**
 * Defines values for SharedToValues. \
 * {@link KnownSharedToValues} can be used interchangeably with SharedToValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **tenant**
 */
export declare type SharedToValues = string;

export declare interface ShareInfoElement {
    /**
     * A relative URI containing the ID of the VM that has the disk attached.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vmUri?: string;
}

/** Profile for gallery sharing to subscription or tenant */
export declare interface SharingProfile {
    /** This property allows you to specify the permission of sharing gallery. <br><br> Possible values are: <br><br> **Private** <br><br> **Groups** <br><br> **Community** */
    permissions?: GallerySharingPermissionTypes;
    /**
     * A list of sharing profile groups.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groups?: SharingProfileGroup[];
    /** Information of community gallery if current gallery is shared to community. */
    communityGalleryInfo?: CommunityGalleryInfo;
}

/** Group of the gallery sharing profile */
export declare interface SharingProfileGroup {
    /** This property allows you to specify the type of sharing group. <br><br> Possible values are: <br><br> **Subscriptions** <br><br> **AADTenants** */
    type?: SharingProfileGroupTypes;
    /** A list of subscription/tenant ids the gallery is aimed to be shared to. */
    ids?: string[];
}

/**
 * Defines values for SharingProfileGroupTypes. \
 * {@link KnownSharingProfileGroupTypes} can be used interchangeably with SharingProfileGroupTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Subscriptions** \
 * **AADTenants**
 */
export declare type SharingProfileGroupTypes = string;

/**
 * Defines values for SharingState. \
 * {@link KnownSharingState} can be used interchangeably with SharingState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **InProgress** \
 * **Failed** \
 * **Unknown**
 */
export declare type SharingState = string;

/** Sharing status of current gallery. */
export declare interface SharingStatus {
    /**
     * Aggregated sharing state of current gallery.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aggregatedState?: SharingState;
    /** Summary of all regional sharing status. */
    summary?: RegionalSharingStatus[];
}

/** Specifies information about the gallery sharing profile update. */
export declare interface SharingUpdate {
    /** This property allows you to specify the operation type of gallery sharing update. <br><br> Possible values are: <br><br> **Add** <br><br> **Remove** <br><br> **Reset** */
    operationType: SharingUpdateOperationTypes;
    /** A list of sharing profile groups. */
    groups?: SharingProfileGroup[];
}

/**
 * Defines values for SharingUpdateOperationTypes. \
 * {@link KnownSharingUpdateOperationTypes} can be used interchangeably with SharingUpdateOperationTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Add** \
 * **Remove** \
 * **Reset** \
 * **EnableCommunity**
 */
export declare type SharingUpdateOperationTypes = string;

/** Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name. */
export declare interface Sku {
    /** The sku name. */
    name?: string;
    /** Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic** */
    tier?: string;
    /** Specifies the number of virtual machines in the scale set. */
    capacity?: number;
}

/** Snapshot resource. */
export declare interface Snapshot extends Resource {
    /**
     * Unused. Always Null.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managedBy?: string;
    /** The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot */
    sku?: SnapshotSku;
    /** The extended location where the snapshot will be created. Extended location cannot be changed. */
    extendedLocation?: ExtendedLocation;
    /**
     * The time when the snapshot was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeCreated?: Date;
    /** The Operating System type. */
    osType?: OperatingSystemTypes;
    /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
    hyperVGeneration?: HyperVGeneration;
    /** Purchase plan information for the image from which the source disk for the snapshot was originally created. */
    purchasePlan?: PurchasePlanAutoGenerated;
    /** List of supported capabilities for the image from which the source disk from the snapshot was originally created. */
    supportedCapabilities?: SupportedCapabilities;
    /** Disk source information. CreationData information cannot be changed after the disk has been created. */
    creationData?: CreationData;
    /** If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size. */
    diskSizeGB?: number;
    /**
     * The size of the disk in bytes. This field is read only.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly diskSizeBytes?: number;
    /**
     * The state of the snapshot.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly diskState?: DiskState;
    /**
     * Unique Guid identifying the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueId?: string;
    /** Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot. */
    encryptionSettingsCollection?: EncryptionSettingsCollection;
    /**
     * The disk provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed. */
    incremental?: boolean;
    /**
     * Incremental snapshots for a disk share an incremental snapshot family id. The Get Page Range Diff API can only be called on incremental snapshots with the same family id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly incrementalSnapshotFamilyId?: string;
    /** Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys. */
    encryption?: Encryption;
    /** Policy for accessing the disk via network. */
    networkAccessPolicy?: NetworkAccessPolicy;
    /** ARM id of the DiskAccess resource for using private endpoints on disks. */
    diskAccessId?: string;
    /** Contains the security related information for the resource. */
    securityProfile?: DiskSecurityProfile;
    /** Indicates the OS on a snapshot supports hibernation. */
    supportsHibernation?: boolean;
    /** Policy for controlling export on the disk. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Percentage complete for the background copy when a resource is created via the CopyStart operation. */
    completionPercent?: number;
    /** Indicates the error details if the background copy of a resource created via the CopyStart operation fails. */
    copyCompletionError?: CopyCompletionError;
    /** Additional authentication requirements when exporting or uploading to a disk or snapshot. */
    dataAccessAuthMode?: DataAccessAuthMode;
}

/** The List Snapshots operation response. */
export declare interface SnapshotList {
    /** A list of snapshots. */
    value: Snapshot[];
    /** The uri to fetch the next page of snapshots. Call ListNext() with this to fetch the next page of snapshots. */
    nextLink?: string;
}

/** Interface representing a Snapshots. */
export declare interface Snapshots {
    /**
     * Lists snapshots under a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: SnapshotsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Snapshot>;
    /**
     * Lists snapshots under a subscription.
     * @param options The options parameters.
     */
    list(options?: SnapshotsListOptionalParams): PagedAsyncIterableIterator<Snapshot>;
    /**
     * Creates or updates a snapshot.
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after
     *                     the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The max name
     *                     length is 80 characters.
     * @param snapshot Snapshot object supplied in the body of the Put disk operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, snapshotName: string, snapshot: Snapshot, options?: SnapshotsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<SnapshotsCreateOrUpdateResponse>, SnapshotsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a snapshot.
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after
     *                     the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The max name
     *                     length is 80 characters.
     * @param snapshot Snapshot object supplied in the body of the Put disk operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, snapshotName: string, snapshot: Snapshot, options?: SnapshotsCreateOrUpdateOptionalParams): Promise<SnapshotsCreateOrUpdateResponse>;
    /**
     * Updates (patches) a snapshot.
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after
     *                     the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The max name
     *                     length is 80 characters.
     * @param snapshot Snapshot object supplied in the body of the Patch snapshot operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, snapshotName: string, snapshot: SnapshotUpdate, options?: SnapshotsUpdateOptionalParams): Promise<PollerLike<PollOperationState<SnapshotsUpdateResponse>, SnapshotsUpdateResponse>>;
    /**
     * Updates (patches) a snapshot.
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after
     *                     the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The max name
     *                     length is 80 characters.
     * @param snapshot Snapshot object supplied in the body of the Patch snapshot operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, snapshotName: string, snapshot: SnapshotUpdate, options?: SnapshotsUpdateOptionalParams): Promise<SnapshotsUpdateResponse>;
    /**
     * Gets information about a snapshot.
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after
     *                     the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The max name
     *                     length is 80 characters.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, snapshotName: string, options?: SnapshotsGetOptionalParams): Promise<SnapshotsGetResponse>;
    /**
     * Deletes a snapshot.
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after
     *                     the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The max name
     *                     length is 80 characters.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, snapshotName: string, options?: SnapshotsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a snapshot.
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after
     *                     the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The max name
     *                     length is 80 characters.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, snapshotName: string, options?: SnapshotsDeleteOptionalParams): Promise<void>;
    /**
     * Grants access to a snapshot.
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after
     *                     the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The max name
     *                     length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get snapshot access operation.
     * @param options The options parameters.
     */
    beginGrantAccess(resourceGroupName: string, snapshotName: string, grantAccessData: GrantAccessData, options?: SnapshotsGrantAccessOptionalParams): Promise<PollerLike<PollOperationState<SnapshotsGrantAccessResponse>, SnapshotsGrantAccessResponse>>;
    /**
     * Grants access to a snapshot.
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after
     *                     the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The max name
     *                     length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get snapshot access operation.
     * @param options The options parameters.
     */
    beginGrantAccessAndWait(resourceGroupName: string, snapshotName: string, grantAccessData: GrantAccessData, options?: SnapshotsGrantAccessOptionalParams): Promise<SnapshotsGrantAccessResponse>;
    /**
     * Revokes access to a snapshot.
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after
     *                     the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The max name
     *                     length is 80 characters.
     * @param options The options parameters.
     */
    beginRevokeAccess(resourceGroupName: string, snapshotName: string, options?: SnapshotsRevokeAccessOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Revokes access to a snapshot.
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after
     *                     the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The max name
     *                     length is 80 characters.
     * @param options The options parameters.
     */
    beginRevokeAccessAndWait(resourceGroupName: string, snapshotName: string, options?: SnapshotsRevokeAccessOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SnapshotsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SnapshotsCreateOrUpdateResponse = Snapshot;

/** Optional parameters. */
export declare interface SnapshotsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SnapshotsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SnapshotsGetResponse = Snapshot;

/** Optional parameters. */
export declare interface SnapshotsGrantAccessOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the grantAccess operation. */
export declare type SnapshotsGrantAccessResponse = AccessUri;

/** The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot */
export declare interface SnapshotSku {
    /** The sku name. */
    name?: SnapshotStorageAccountTypes;
    /**
     * The sku tier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: string;
}

/** Optional parameters. */
export declare interface SnapshotsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type SnapshotsListByResourceGroupNextResponse = SnapshotList;

/** Optional parameters. */
export declare interface SnapshotsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type SnapshotsListByResourceGroupResponse = SnapshotList;

/** Optional parameters. */
export declare interface SnapshotsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SnapshotsListNextResponse = SnapshotList;

/** Optional parameters. */
export declare interface SnapshotsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SnapshotsListResponse = SnapshotList;

/** Optional parameters. */
export declare interface SnapshotsRevokeAccessOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/**
 * Defines values for SnapshotStorageAccountTypes. \
 * {@link KnownSnapshotStorageAccountTypes} can be used interchangeably with SnapshotStorageAccountTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS**: Standard HDD locally redundant storage \
 * **Premium_LRS**: Premium SSD locally redundant storage \
 * **Standard_ZRS**: Standard zone redundant storage
 */
export declare type SnapshotStorageAccountTypes = string;

/** Optional parameters. */
export declare interface SnapshotsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type SnapshotsUpdateResponse = Snapshot;

/** Snapshot update resource. */
export declare interface SnapshotUpdate {
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /** The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot */
    sku?: SnapshotSku;
    /** the Operating System type. */
    osType?: OperatingSystemTypes;
    /** If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size. */
    diskSizeGB?: number;
    /** Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot. */
    encryptionSettingsCollection?: EncryptionSettingsCollection;
    /** Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys. */
    encryption?: Encryption;
    /** Policy for accessing the disk via network. */
    networkAccessPolicy?: NetworkAccessPolicy;
    /** ARM id of the DiskAccess resource for using private endpoints on disks. */
    diskAccessId?: string;
    /** Indicates the OS on a snapshot supports hibernation. */
    supportsHibernation?: boolean;
    /** Policy for controlling export on the disk. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Additional authentication requirements when exporting or uploading to a disk or snapshot. */
    dataAccessAuthMode?: DataAccessAuthMode;
    /** List of supported capabilities for the image from which the OS disk was created. */
    supportedCapabilities?: SupportedCapabilities;
}

/** Contains information about the soft deletion policy of the gallery. */
export declare interface SoftDeletePolicy {
    /** Enables soft-deletion for resources in this gallery, allowing them to be recovered within retention time. */
    isSoftDeleteEnabled?: boolean;
}

/** The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName} */
export declare interface SourceVault {
    /** Resource Id */
    id?: string;
}

/** Specifies the Spot-Try-Restore properties for the virtual machine scale set. <br><br> With this property customer can enable or disable automatic restore of the evicted Spot VMSS VM instances opportunistically based on capacity availability and pricing constraint. */
export declare interface SpotRestorePolicy {
    /** Enables the Spot-Try-Restore feature where evicted VMSS SPOT instances will be tried to be restored opportunistically based on capacity availability and pricing constraints */
    enabled?: boolean;
    /** Timeout value expressed as an ISO 8601 time duration after which the platform will not try to restore the VMSS SPOT instances */
    restoreTimeout?: string;
}

/** SSH configuration for Linux based VMs running on Azure */
export declare interface SshConfiguration {
    /** The list of SSH public keys used to authenticate with linux based VMs. */
    publicKeys?: SshPublicKey[];
}

/** Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed. */
export declare interface SshPublicKey {
    /** Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys */
    path?: string;
    /** SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed). */
    keyData?: string;
}

/** Response from generation of an SSH key pair. */
export declare interface SshPublicKeyGenerateKeyPairResult {
    /** Private key portion of the key pair used to authenticate to a virtual machine through ssh. The private key is returned in RFC3447 format and should be treated as a secret. */
    privateKey: string;
    /** Public key portion of the key pair used to authenticate to a virtual machine through ssh. The public key is in ssh-rsa format. */
    publicKey: string;
    /** The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{SshPublicKeyName} */
    id: string;
}

/** Specifies information about the SSH public key. */
export declare interface SshPublicKeyResource extends Resource {
    /** SSH public key used to authenticate to a virtual machine through ssh. If this property is not initially provided when the resource is created, the publicKey property will be populated when generateKeyPair is called. If the public key is provided upon resource creation, the provided public key needs to be at least 2048-bit and in ssh-rsa format. */
    publicKey?: string;
}

/** Interface representing a SshPublicKeys. */
export declare interface SshPublicKeys {
    /**
     * Lists all of the SSH public keys in the subscription. Use the nextLink property in the response to
     * get the next page of SSH public keys.
     * @param options The options parameters.
     */
    listBySubscription(options?: SshPublicKeysListBySubscriptionOptionalParams): PagedAsyncIterableIterator<SshPublicKeyResource>;
    /**
     * Lists all of the SSH public keys in the specified resource group. Use the nextLink property in the
     * response to get the next page of SSH public keys.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: SshPublicKeysListByResourceGroupOptionalParams): PagedAsyncIterableIterator<SshPublicKeyResource>;
    /**
     * Creates a new SSH public key resource.
     * @param resourceGroupName The name of the resource group.
     * @param sshPublicKeyName The name of the SSH public key.
     * @param parameters Parameters supplied to create the SSH public key.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, sshPublicKeyName: string, parameters: SshPublicKeyResource, options?: SshPublicKeysCreateOptionalParams): Promise<SshPublicKeysCreateResponse>;
    /**
     * Updates a new SSH public key resource.
     * @param resourceGroupName The name of the resource group.
     * @param sshPublicKeyName The name of the SSH public key.
     * @param parameters Parameters supplied to update the SSH public key.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, sshPublicKeyName: string, parameters: SshPublicKeyUpdateResource, options?: SshPublicKeysUpdateOptionalParams): Promise<SshPublicKeysUpdateResponse>;
    /**
     * Delete an SSH public key.
     * @param resourceGroupName The name of the resource group.
     * @param sshPublicKeyName The name of the SSH public key.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, sshPublicKeyName: string, options?: SshPublicKeysDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves information about an SSH public key.
     * @param resourceGroupName The name of the resource group.
     * @param sshPublicKeyName The name of the SSH public key.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, sshPublicKeyName: string, options?: SshPublicKeysGetOptionalParams): Promise<SshPublicKeysGetResponse>;
    /**
     * Generates and returns a public/private key pair and populates the SSH public key resource with the
     * public key. The length of the key will be 3072 bits. This operation can only be performed once per
     * SSH public key resource.
     * @param resourceGroupName The name of the resource group.
     * @param sshPublicKeyName The name of the SSH public key.
     * @param options The options parameters.
     */
    generateKeyPair(resourceGroupName: string, sshPublicKeyName: string, options?: SshPublicKeysGenerateKeyPairOptionalParams): Promise<SshPublicKeysGenerateKeyPairResponse>;
}

/** Optional parameters. */
export declare interface SshPublicKeysCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type SshPublicKeysCreateResponse = SshPublicKeyResource;

/** Optional parameters. */
export declare interface SshPublicKeysDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SshPublicKeysGenerateKeyPairOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the generateKeyPair operation. */
export declare type SshPublicKeysGenerateKeyPairResponse = SshPublicKeyGenerateKeyPairResult;

/** Optional parameters. */
export declare interface SshPublicKeysGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SshPublicKeysGetResponse = SshPublicKeyResource;

/** The list SSH public keys operation response. */
export declare interface SshPublicKeysGroupListResult {
    /** The list of SSH public keys */
    value: SshPublicKeyResource[];
    /** The URI to fetch the next page of SSH public keys. Call ListNext() with this URI to fetch the next page of SSH public keys. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface SshPublicKeysListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type SshPublicKeysListByResourceGroupNextResponse = SshPublicKeysGroupListResult;

/** Optional parameters. */
export declare interface SshPublicKeysListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type SshPublicKeysListByResourceGroupResponse = SshPublicKeysGroupListResult;

/** Optional parameters. */
export declare interface SshPublicKeysListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type SshPublicKeysListBySubscriptionNextResponse = SshPublicKeysGroupListResult;

/** Optional parameters. */
export declare interface SshPublicKeysListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type SshPublicKeysListBySubscriptionResponse = SshPublicKeysGroupListResult;

/** Optional parameters. */
export declare interface SshPublicKeysUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type SshPublicKeysUpdateResponse = SshPublicKeyResource;

/** Specifies information about the SSH public key. */
export declare interface SshPublicKeyUpdateResource extends UpdateResource {
    /** SSH public key used to authenticate to a virtual machine through ssh. If this property is not initially provided when the resource is created, the publicKey property will be populated when generateKeyPair is called. If the public key is provided upon resource creation, the provided public key needs to be at least 2048-bit and in ssh-rsa format. */
    publicKey?: string;
}

/** The status code and count of the cloud service instance view statuses */
export declare interface StatusCodeCount {
    /**
     * The instance view status code
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Number of instances having this status code
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly count?: number;
}

/** Defines values for StatusLevelTypes. */
export declare type StatusLevelTypes = "Info" | "Warning" | "Error";

/**
 * Defines values for StorageAccountType. \
 * {@link KnownStorageAccountType} can be used interchangeably with StorageAccountType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS** \
 * **Standard_ZRS** \
 * **Premium_LRS**
 */
export declare type StorageAccountType = string;

/**
 * Defines values for StorageAccountTypes. \
 * {@link KnownStorageAccountTypes} can be used interchangeably with StorageAccountTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS** \
 * **Premium_LRS** \
 * **StandardSSD_LRS** \
 * **UltraSSD_LRS** \
 * **Premium_ZRS** \
 * **StandardSSD_ZRS** \
 * **PremiumV2_LRS**
 */
export declare type StorageAccountTypes = string;

/** Specifies the storage settings for the virtual machine disks. */
export declare interface StorageProfile {
    /** Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. */
    imageReference?: ImageReference;
    /** Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). */
    osDisk?: OSDisk;
    /** Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). */
    dataDisks?: DataDisk[];
    /** Specifies the disk controller type configured for the VM. <br><br>NOTE: This property will be set to the default disk controller type if not specified provided virtual machine is being created as a hyperVGeneration: V2 based on the capabilities of the operating system disk and VM size from the the specified minimum api version. <br>You need to deallocate the VM before updating its disk controller type unless you are updating the VM size in the VM configuration which implicitly deallocates and reallocates the VM. <br><br> Minimum api-version: 2022-08-01 */
    diskControllerType?: DiskControllerTypes;
}

export declare interface SubResource {
    /** Resource Id */
    id?: string;
}

export declare interface SubResourceReadOnly {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

export declare interface SubResourceWithColocationStatus extends SubResource {
    /** Describes colocation status of a resource in the Proximity Placement Group. */
    colocationStatus?: InstanceViewStatus;
}

/** List of supported capabilities persisted on the disk resource for VM use. */
export declare interface SupportedCapabilities {
    /** The disk controllers that an OS disk supports. If set it can be SCSI or SCSI, NVME or NVME, SCSI. */
    diskControllerTypes?: string;
    /** True if the image from which the OS disk is created supports accelerated networking. */
    acceleratedNetwork?: boolean;
    /** CPU architecture supported by an OS disk. */
    architecture?: Architecture;
}

/** The system meta data relating to this resource. */
export declare interface SystemData {
    /**
     * Specifies the time in UTC at which the Cloud Service (extended support) resource was created. <br />Minimum api-version: 2022-04-04.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAt?: Date;
    /**
     * Specifies the time in UTC at which the Cloud Service (extended support) resource was last modified. <br />Minimum api-version: 2022-04-04.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedAt?: Date;
}

/** Describes the target region information. */
export declare interface TargetRegion {
    /** The name of the region. */
    name: string;
    /** The number of replicas of the Image Version to be created per region. This property is updatable. */
    regionalReplicaCount?: number;
    /** Specifies the storage account type to be used to store the image. This property is not updatable. */
    storageAccountType?: StorageAccountType;
    /** Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact. */
    encryption?: EncryptionImages;
}

export declare interface TerminateNotificationProfile {
    /** Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M) */
    notBeforeTimeout?: string;
    /** Specifies whether the Terminate Scheduled event is enabled or disabled. */
    enable?: boolean;
}

/** Api request input for LogAnalytics getThrottledRequests Api. */
export declare interface ThrottledRequestsInput extends LogAnalyticsInputBase {
}

/** Specifies the security settings like secure boot and vTPM used while creating the virtual machine. <br><br>Minimum api-version: 2020-12-01 */
export declare interface UefiSettings {
    /** Specifies whether secure boot should be enabled on the virtual machine. <br><br>Minimum api-version: 2020-12-01 */
    secureBootEnabled?: boolean;
    /** Specifies whether vTPM should be enabled on the virtual machine. <br><br>Minimum api-version: 2020-12-01 */
    vTpmEnabled?: boolean;
}

/** Defines an update domain for the cloud service. */
export declare interface UpdateDomain {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource Name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
}

/** The list operation result. */
export declare interface UpdateDomainListResult {
    /** The list of resources. */
    value: UpdateDomain[];
    /** The URI to fetch the next page of resources. Use this to get the next page of resources. Do this till nextLink is null to fetch all the resources. */
    nextLink?: string;
}

/** The Update Resource model definition. */
export declare interface UpdateResource {
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** The Update Resource model definition. */
export declare interface UpdateResourceDefinition {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Defines values for UpgradeMode. */
export declare type UpgradeMode = "Automatic" | "Manual" | "Rolling";

/** Virtual Machine Scale Set OS Upgrade History operation response. */
export declare interface UpgradeOperationHistoricalStatusInfo {
    /**
     * Information about the properties of the upgrade operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly properties?: UpgradeOperationHistoricalStatusInfoProperties;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Resource location
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
}

/** Describes each OS upgrade on the Virtual Machine Scale Set. */
export declare interface UpgradeOperationHistoricalStatusInfoProperties {
    /**
     * Information about the overall status of the upgrade operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runningStatus?: UpgradeOperationHistoryStatus;
    /**
     * Counts of the VMs in each state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly progress?: RollingUpgradeProgressInfo;
    /**
     * Error Details for this upgrade if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ApiError;
    /**
     * Invoker of the Upgrade Operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startedBy?: UpgradeOperationInvoker;
    /**
     * Image Reference details
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetImageReference?: ImageReference;
    /**
     * Information about OS rollback if performed
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rollbackInfo?: RollbackStatusInfo;
}

/** Information about the current running state of the overall upgrade. */
export declare interface UpgradeOperationHistoryStatus {
    /**
     * Code indicating the current status of the upgrade.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: UpgradeState;
    /**
     * Start time of the upgrade.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * End time of the upgrade.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
}

/** Defines values for UpgradeOperationInvoker. */
export declare type UpgradeOperationInvoker = "Unknown" | "User" | "Platform";

/** Describes an upgrade policy - automatic, manual, or rolling. */
export declare interface UpgradePolicy {
    /** Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time. */
    mode?: UpgradeMode;
    /** The configuration parameters used while performing a rolling upgrade. */
    rollingUpgradePolicy?: RollingUpgradePolicy;
    /** Configuration parameters used for performing automatic OS Upgrade. */
    automaticOSUpgradePolicy?: AutomaticOSUpgradePolicy;
}

/** Defines values for UpgradeState. */
export declare type UpgradeState = "RollingForward" | "Cancelled" | "Completed" | "Faulted";

/** Describes Compute Resource Usage. */
export declare interface Usage {
    /** An enum describing the unit of usage measurement. */
    unit: "Count";
    /** The current usage of the resource. */
    currentValue: number;
    /** The maximum permitted usage of the resource. */
    limit: number;
    /** The name of the type of usage. */
    name: UsageName;
}

/** Optional parameters. */
export declare interface UsageListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type UsageListNextResponse = ListUsagesResult;

/** Optional parameters. */
export declare interface UsageListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type UsageListResponse = ListUsagesResult;

/** The Usage Names. */
export declare interface UsageName {
    /** The name of the resource. */
    value?: string;
    /** The localized name of the resource. */
    localizedValue?: string;
}

/** Interface representing a UsageOperations. */
export declare interface UsageOperations {
    /**
     * Gets, for the specified location, the current compute resource usage information as well as the
     * limits for compute resources under the subscription.
     * @param location The location for which resource usage is queried.
     * @param options The options parameters.
     */
    list(location: string, options?: UsageListOptionalParams): PagedAsyncIterableIterator<Usage>;
}

export declare interface UserArtifactManage {
    /** Required. The path and arguments to install the gallery application. This is limited to 4096 characters. */
    install: string;
    /** Required. The path and arguments to remove the gallery application. This is limited to 4096 characters. */
    remove: string;
    /** Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters. */
    update?: string;
}

/** Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set. */
export declare interface UserArtifactSettings {
    /** Optional. The name to assign the downloaded package file on the VM. This is limited to 4096 characters. If not specified, the package file will be named the same as the Gallery Application name. */
    packageFileName?: string;
    /** Optional. The name to assign the downloaded config file on the VM. This is limited to 4096 characters. If not specified, the config file will be named the Gallery Application name appended with "_config". */
    configFileName?: string;
}

/** The source image from which the Image Version is going to be created. */
export declare interface UserArtifactSource {
    /** Required. The mediaLink of the artifact, must be a readable storage page blob. */
    mediaLink: string;
    /** Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob. */
    defaultConfigurationLink?: string;
}

export declare interface UserAssignedIdentitiesValue {
    /**
     * The principal id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/** Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM. */
export declare interface VaultCertificate {
    /** This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows). */
    certificateUrl?: string;
    /** For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. <br><br>For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted. */
    certificateStore?: string;
}

/** Describes a set of certificates which are all in the same Key Vault. */
export declare interface VaultSecretGroup {
    /** The relative URL of the Key Vault containing all of the certificates in VaultCertificates. */
    sourceVault?: SubResource;
    /** The list of key vault references in SourceVault which contain certificates. */
    vaultCertificates?: VaultCertificate[];
}

/** Describes the uri of a disk. */
export declare interface VirtualHardDisk {
    /** Specifies the virtual hard disk's uri. */
    uri?: string;
}

/** Describes a Virtual Machine. */
export declare interface VirtualMachine extends Resource {
    /** Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**. */
    plan?: Plan;
    /**
     * The virtual machine child extension resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resources?: VirtualMachineExtension[];
    /** The identity of the virtual machine, if configured. */
    identity?: VirtualMachineIdentity;
    /** The virtual machine zones. */
    zones?: string[];
    /** The extended location of the Virtual Machine. */
    extendedLocation?: ExtendedLocation;
    /** Specifies the hardware settings for the virtual machine. */
    hardwareProfile?: HardwareProfile;
    /** Specifies the storage settings for the virtual machine disks. */
    storageProfile?: StorageProfile;
    /** Specifies additional capabilities enabled or disabled on the virtual machine. */
    additionalCapabilities?: AdditionalCapabilities;
    /** Specifies the operating system settings used while creating the virtual machine. Some of the settings cannot be changed once VM is provisioned. */
    osProfile?: OSProfile;
    /** Specifies the network interfaces of the virtual machine. */
    networkProfile?: NetworkProfile;
    /** Specifies the Security related profile settings for the virtual machine. */
    securityProfile?: SecurityProfile;
    /** Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15. */
    diagnosticsProfile?: DiagnosticsProfile;
    /** Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Availability sets overview](https://docs.microsoft.com/azure/virtual-machines/availability-set-overview). <br><br> For more information on Azure planned maintenance, see [Maintenance and updates for Virtual Machines in Azure](https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates) <br><br> Currently, a VM can only be added to availability set at creation time. The availability set to which the VM is being added should be under the same resource group as the availability set resource. An existing VM cannot be added to an availability set. <br><br>This property cannot exist along with a non-null properties.virtualMachineScaleSet reference. */
    availabilitySet?: SubResource;
    /** Specifies information about the virtual machine scale set that the virtual machine should be assigned to. Virtual machines specified in the same virtual machine scale set are allocated to different nodes to maximize availability. Currently, a VM can only be added to virtual machine scale set at creation time. An existing VM cannot be added to a virtual machine scale set. <br><br>This property cannot exist along with a non-null properties.availabilitySet reference. <br><br>Minimum api‐version: 2019‐03‐01 */
    virtualMachineScaleSet?: SubResource;
    /** Specifies information about the proximity placement group that the virtual machine should be assigned to. <br><br>Minimum api-version: 2018-04-01. */
    proximityPlacementGroup?: SubResource;
    /** Specifies the priority for the virtual machine. <br><br>Minimum api-version: 2019-03-01 */
    priority?: VirtualMachinePriorityTypes;
    /** Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview. */
    evictionPolicy?: VirtualMachineEvictionPolicyTypes;
    /** Specifies the billing related details of a Azure Spot virtual machine. <br><br>Minimum api-version: 2019-03-01. */
    billingProfile?: BillingProfile;
    /** Specifies information about the dedicated host that the virtual machine resides in. <br><br>Minimum api-version: 2018-10-01. */
    host?: SubResource;
    /** Specifies information about the dedicated host group that the virtual machine resides in. <br><br>Minimum api-version: 2020-06-01. <br><br>NOTE: User cannot specify both host and hostGroup properties. */
    hostGroup?: SubResource;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The virtual machine instance view.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: VirtualMachineInstanceView;
    /** Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15 */
    licenseType?: string;
    /**
     * Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vmId?: string;
    /** Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). <br><br> Minimum api-version: 2020-06-01 */
    extensionsTimeBudget?: string;
    /** Specifies the scale set logical fault domain into which the Virtual Machine will be created. By default, the Virtual Machine will by automatically assigned to a fault domain that best maintains balance across available fault domains.<br><li>This is applicable only if the 'virtualMachineScaleSet' property of this Virtual Machine is set.<li>The Virtual Machine Scale Set that is referenced, must have 'platformFaultDomainCount' &gt; 1.<li>This property cannot be updated once the Virtual Machine is created.<li>Fault domain assignment can be viewed in the Virtual Machine Instance View.<br><br>Minimum api‐version: 2020‐12‐01 */
    platformFaultDomain?: number;
    /** Specifies Scheduled Event related configurations. */
    scheduledEventsProfile?: ScheduledEventsProfile;
    /** UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. <br><br>Minimum api-version: 2021-03-01 */
    userData?: string;
    /** Specifies information about the capacity reservation that is used to allocate virtual machine. <br><br>Minimum api-version: 2021-04-01. */
    capacityReservation?: CapacityReservationProfile;
    /** Specifies the gallery applications that should be made available to the VM/VMSS */
    applicationProfile?: ApplicationProfile;
    /**
     * Specifies the time at which the Virtual Machine resource was created.<br><br>Minimum api-version: 2021-11-01.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeCreated?: Date;
}

/** The instance view of the VM Agent running on the virtual machine. */
export declare interface VirtualMachineAgentInstanceView {
    /** The VM Agent full version. */
    vmAgentVersion?: string;
    /** The virtual machine extension handler instance view. */
    extensionHandlers?: VirtualMachineExtensionHandlerInstanceView[];
    /** The resource status information. */
    statuses?: InstanceViewStatus[];
}

/** Describes the properties of an AssessPatches result. */
export declare interface VirtualMachineAssessPatchesResult {
    /**
     * The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: PatchOperationStatus;
    /**
     * The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly assessmentActivityId?: string;
    /**
     * The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rebootPending?: boolean;
    /**
     * The number of critical or security patches that have been detected as available and not yet installed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly criticalAndSecurityPatchCount?: number;
    /**
     * The number of all available patches excluding critical and security.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly otherPatchCount?: number;
    /**
     * The UTC timestamp when the operation began.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startDateTime?: Date;
    /**
     * The list of patches that have been detected as available for installation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly availablePatches?: VirtualMachineSoftwarePatchProperties[];
    /**
     * The errors that were encountered during execution of the operation. The details array contains the list of them.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ApiError;
}

/** Capture Virtual Machine parameters. */
export declare interface VirtualMachineCaptureParameters {
    /** The captured virtual hard disk's name prefix. */
    vhdPrefix: string;
    /** The destination container name. */
    destinationContainerName: string;
    /** Specifies whether to overwrite the destination virtual hard disk, in case of conflict. */
    overwriteVhds: boolean;
}

/** Output of virtual machine capture operation. */
export declare interface VirtualMachineCaptureResult extends SubResource {
    /**
     * the schema of the captured virtual machine
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly schema?: string;
    /**
     * the version of the content
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly contentVersion?: string;
    /**
     * parameters of the captured virtual machine
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parameters?: any;
    /**
     * a list of resource items of the captured virtual machine
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resources?: any[];
}

/**
 * Defines values for VirtualMachineEvictionPolicyTypes. \
 * {@link KnownVirtualMachineEvictionPolicyTypes} can be used interchangeably with VirtualMachineEvictionPolicyTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Deallocate** \
 * **Delete**
 */
export declare type VirtualMachineEvictionPolicyTypes = string;

/** Describes a Virtual Machine Extension. */
export declare interface VirtualMachineExtension extends ResourceWithOptionalLocation {
    /** How the extension handler should be forced to update even if the extension configuration has not changed. */
    forceUpdateTag?: string;
    /** The name of the extension handler publisher. */
    publisher?: string;
    /** Specifies the type of the extension; an example is "CustomScriptExtension". */
    typePropertiesType?: string;
    /** Specifies the version of the script handler. */
    typeHandlerVersion?: string;
    /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
    autoUpgradeMinorVersion?: boolean;
    /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. */
    enableAutomaticUpgrade?: boolean;
    /** Json formatted public settings for the extension. */
    settings?: any;
    /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
    protectedSettings?: any;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The virtual machine extension instance view. */
    instanceView?: VirtualMachineExtensionInstanceView;
    /** Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false. */
    suppressFailures?: boolean;
    /** The extensions protected settings that are passed by reference, and consumed from key vault */
    protectedSettingsFromKeyVault?: KeyVaultSecretReference;
}

/** The instance view of a virtual machine extension handler. */
export declare interface VirtualMachineExtensionHandlerInstanceView {
    /** Specifies the type of the extension; an example is "CustomScriptExtension". */
    type?: string;
    /** Specifies the version of the script handler. */
    typeHandlerVersion?: string;
    /** The extension handler status. */
    status?: InstanceViewStatus;
}

/** Describes a Virtual Machine Extension Image. */
export declare interface VirtualMachineExtensionImage extends Resource {
    /** The operating system this extension supports. */
    operatingSystem?: string;
    /** The type of role (IaaS or PaaS) this extension supports. */
    computeRole?: string;
    /** The schema defined by publisher, where extension consumers should provide settings in a matching schema. */
    handlerSchema?: string;
    /** Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable on scalesets, but there might be cases where a publisher wants to explicitly indicate the extension is only enabled for CRP VMs but not VMSS. */
    vmScaleSetEnabled?: boolean;
    /** Whether the handler can support multiple extensions. */
    supportsMultipleExtensions?: boolean;
}

/** Interface representing a VirtualMachineExtensionImages. */
export declare interface VirtualMachineExtensionImages {
    /**
     * Gets a virtual machine extension image.
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param version
     * @param typeParam
     * @param options The options parameters.
     */
    get(location: string, publisherName: string, version: string, typeParam: string, options?: VirtualMachineExtensionImagesGetOptionalParams): Promise<VirtualMachineExtensionImagesGetResponse>;
    /**
     * Gets a list of virtual machine extension image types.
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param options The options parameters.
     */
    listTypes(location: string, publisherName: string, options?: VirtualMachineExtensionImagesListTypesOptionalParams): Promise<VirtualMachineExtensionImagesListTypesResponse>;
    /**
     * Gets a list of virtual machine extension image versions.
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param typeParam
     * @param options The options parameters.
     */
    listVersions(location: string, publisherName: string, typeParam: string, options?: VirtualMachineExtensionImagesListVersionsOptionalParams): Promise<VirtualMachineExtensionImagesListVersionsResponse>;
}

/** Optional parameters. */
export declare interface VirtualMachineExtensionImagesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VirtualMachineExtensionImagesGetResponse = VirtualMachineExtensionImage;

/** Optional parameters. */
export declare interface VirtualMachineExtensionImagesListTypesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listTypes operation. */
export declare type VirtualMachineExtensionImagesListTypesResponse = VirtualMachineExtensionImage[];

/** Optional parameters. */
export declare interface VirtualMachineExtensionImagesListVersionsOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. */
    filter?: string;
    top?: number;
    orderby?: string;
}

/** Contains response data for the listVersions operation. */
export declare type VirtualMachineExtensionImagesListVersionsResponse = VirtualMachineExtensionImage[];

/** The instance view of a virtual machine extension. */
export declare interface VirtualMachineExtensionInstanceView {
    /** The virtual machine extension name. */
    name?: string;
    /** Specifies the type of the extension; an example is "CustomScriptExtension". */
    type?: string;
    /** Specifies the version of the script handler. */
    typeHandlerVersion?: string;
    /** The resource status information. */
    substatuses?: InstanceViewStatus[];
    /** The resource status information. */
    statuses?: InstanceViewStatus[];
}

/** Interface representing a VirtualMachineExtensions. */
export declare interface VirtualMachineExtensions {
    /**
     * The operation to create or update the extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine where the extension should be created or updated.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, vmName: string, vmExtensionName: string, extensionParameters: VirtualMachineExtension, options?: VirtualMachineExtensionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineExtensionsCreateOrUpdateResponse>, VirtualMachineExtensionsCreateOrUpdateResponse>>;
    /**
     * The operation to create or update the extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine where the extension should be created or updated.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, vmName: string, vmExtensionName: string, extensionParameters: VirtualMachineExtension, options?: VirtualMachineExtensionsCreateOrUpdateOptionalParams): Promise<VirtualMachineExtensionsCreateOrUpdateResponse>;
    /**
     * The operation to update the extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine where the extension should be updated.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, vmName: string, vmExtensionName: string, extensionParameters: VirtualMachineExtensionUpdate, options?: VirtualMachineExtensionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineExtensionsUpdateResponse>, VirtualMachineExtensionsUpdateResponse>>;
    /**
     * The operation to update the extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine where the extension should be updated.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, vmName: string, vmExtensionName: string, extensionParameters: VirtualMachineExtensionUpdate, options?: VirtualMachineExtensionsUpdateOptionalParams): Promise<VirtualMachineExtensionsUpdateResponse>;
    /**
     * The operation to delete the extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine where the extension should be deleted.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, vmName: string, vmExtensionName: string, options?: VirtualMachineExtensionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to delete the extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine where the extension should be deleted.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, vmName: string, vmExtensionName: string, options?: VirtualMachineExtensionsDeleteOptionalParams): Promise<void>;
    /**
     * The operation to get the extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine containing the extension.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vmName: string, vmExtensionName: string, options?: VirtualMachineExtensionsGetOptionalParams): Promise<VirtualMachineExtensionsGetResponse>;
    /**
     * The operation to get all extensions of a Virtual Machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine containing the extension.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, vmName: string, options?: VirtualMachineExtensionsListOptionalParams): Promise<VirtualMachineExtensionsListResponse>;
}

/** Optional parameters. */
export declare interface VirtualMachineExtensionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualMachineExtensionsCreateOrUpdateResponse = VirtualMachineExtension;

/** Optional parameters. */
export declare interface VirtualMachineExtensionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineExtensionsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type VirtualMachineExtensionsGetResponse = VirtualMachineExtension;

/** Optional parameters. */
export declare interface VirtualMachineExtensionsListOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
}

/** Contains response data for the list operation. */
export declare type VirtualMachineExtensionsListResponse = VirtualMachineExtensionsListResult;

/** The List Extension operation response */
export declare interface VirtualMachineExtensionsListResult {
    /** The list of extensions */
    value?: VirtualMachineExtension[];
}

/** Optional parameters. */
export declare interface VirtualMachineExtensionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VirtualMachineExtensionsUpdateResponse = VirtualMachineExtension;

/** Describes a Virtual Machine Extension. */
export declare interface VirtualMachineExtensionUpdate extends UpdateResource {
    /** How the extension handler should be forced to update even if the extension configuration has not changed. */
    forceUpdateTag?: string;
    /** The name of the extension handler publisher. */
    publisher?: string;
    /** Specifies the type of the extension; an example is "CustomScriptExtension". */
    type?: string;
    /** Specifies the version of the script handler. */
    typeHandlerVersion?: string;
    /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
    autoUpgradeMinorVersion?: boolean;
    /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. */
    enableAutomaticUpgrade?: boolean;
    /** Json formatted public settings for the extension. */
    settings?: any;
    /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
    protectedSettings?: any;
    /** Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false. */
    suppressFailures?: boolean;
    /** The extensions protected settings that are passed by reference, and consumed from key vault */
    protectedSettingsFromKeyVault?: KeyVaultSecretReference;
}

/** The health status of the VM. */
export declare interface VirtualMachineHealthStatus {
    /**
     * The health status information for the VM.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: InstanceViewStatus;
}

/** Identity for the virtual machine. */
export declare interface VirtualMachineIdentity {
    /**
     * The principal id of virtual machine identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant id associated with the virtual machine. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine. */
    type?: ResourceIdentityType;
    /** The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentitiesValue;
    };
}

/** Describes a Virtual Machine Image. */
export declare interface VirtualMachineImage extends VirtualMachineImageResource {
    /** Used for establishing the purchase context of any 3rd Party artifact through MarketPlace. */
    plan?: PurchasePlan;
    /** Contains the os disk image information. */
    osDiskImage?: OSDiskImage;
    dataDiskImages?: DataDiskImage[];
    /** Describes automatic OS upgrade properties on the image. */
    automaticOSUpgradeProperties?: AutomaticOSUpgradeProperties;
    /** Specifies the HyperVGeneration Type */
    hyperVGeneration?: HyperVGenerationTypes;
    /** Specifies disallowed configuration for the VirtualMachine created from the image */
    disallowed?: DisallowedConfiguration;
    features?: VirtualMachineImageFeature[];
    /** Specifies the Architecture Type */
    architecture?: ArchitectureTypes;
}

/** Specifies additional capabilities supported by the image */
export declare interface VirtualMachineImageFeature {
    /** The name of the feature. */
    name?: string;
    /** The corresponding value for the feature. */
    value?: string;
}

/** Virtual machine image resource information. */
export declare interface VirtualMachineImageResource extends SubResource {
    /** The name of the resource. */
    name: string;
    /** The supported Azure location of the resource. */
    location: string;
    /** Specifies the tags that are assigned to the virtual machine. For more information about using tags, see [Using tags to organize your Azure resources](https://docs.microsoft.com/azure/azure-resource-manager/resource-group-using-tags.md). */
    tags?: {
        [propertyName: string]: string;
    };
    /** The extended location of the Virtual Machine. */
    extendedLocation?: ExtendedLocation;
}

/** Interface representing a VirtualMachineImages. */
export declare interface VirtualMachineImages {
    /**
     * Gets a virtual machine image.
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @param version A valid image SKU version.
     * @param options The options parameters.
     */
    get(location: string, publisherName: string, offer: string, skus: string, version: string, options?: VirtualMachineImagesGetOptionalParams): Promise<VirtualMachineImagesGetResponse>;
    /**
     * Gets a list of all virtual machine image versions for the specified location, publisher, offer, and
     * SKU.
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @param options The options parameters.
     */
    list(location: string, publisherName: string, offer: string, skus: string, options?: VirtualMachineImagesListOptionalParams): Promise<VirtualMachineImagesListResponse>;
    /**
     * Gets a list of virtual machine image offers for the specified location and publisher.
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param options The options parameters.
     */
    listOffers(location: string, publisherName: string, options?: VirtualMachineImagesListOffersOptionalParams): Promise<VirtualMachineImagesListOffersResponse>;
    /**
     * Gets a list of virtual machine image publishers for the specified Azure location.
     * @param location The name of a supported Azure region.
     * @param options The options parameters.
     */
    listPublishers(location: string, options?: VirtualMachineImagesListPublishersOptionalParams): Promise<VirtualMachineImagesListPublishersResponse>;
    /**
     * Gets a list of virtual machine image SKUs for the specified location, publisher, and offer.
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param options The options parameters.
     */
    listSkus(location: string, publisherName: string, offer: string, options?: VirtualMachineImagesListSkusOptionalParams): Promise<VirtualMachineImagesListSkusResponse>;
    /**
     * Gets a list of all virtual machine image versions for the specified edge zone
     * @param location The name of a supported Azure region.
     * @param edgeZone The name of the edge zone.
     * @param options The options parameters.
     */
    listByEdgeZone(location: string, edgeZone: string, options?: VirtualMachineImagesListByEdgeZoneOptionalParams): Promise<VirtualMachineImagesListByEdgeZoneResponse>;
}

/** Interface representing a VirtualMachineImagesEdgeZone. */
export declare interface VirtualMachineImagesEdgeZone {
    /**
     * Gets a virtual machine image in an edge zone.
     * @param location The name of a supported Azure region.
     * @param edgeZone The name of the edge zone.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @param version A valid image SKU version.
     * @param options The options parameters.
     */
    get(location: string, edgeZone: string, publisherName: string, offer: string, skus: string, version: string, options?: VirtualMachineImagesEdgeZoneGetOptionalParams): Promise<VirtualMachineImagesEdgeZoneGetResponse>;
    /**
     * Gets a list of all virtual machine image versions for the specified location, edge zone, publisher,
     * offer, and SKU.
     * @param location The name of a supported Azure region.
     * @param edgeZone The name of the edge zone.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @param options The options parameters.
     */
    list(location: string, edgeZone: string, publisherName: string, offer: string, skus: string, options?: VirtualMachineImagesEdgeZoneListOptionalParams): Promise<VirtualMachineImagesEdgeZoneListResponse>;
    /**
     * Gets a list of virtual machine image offers for the specified location, edge zone and publisher.
     * @param location The name of a supported Azure region.
     * @param edgeZone The name of the edge zone.
     * @param publisherName A valid image publisher.
     * @param options The options parameters.
     */
    listOffers(location: string, edgeZone: string, publisherName: string, options?: VirtualMachineImagesEdgeZoneListOffersOptionalParams): Promise<VirtualMachineImagesEdgeZoneListOffersResponse>;
    /**
     * Gets a list of virtual machine image publishers for the specified Azure location and edge zone.
     * @param location The name of a supported Azure region.
     * @param edgeZone The name of the edge zone.
     * @param options The options parameters.
     */
    listPublishers(location: string, edgeZone: string, options?: VirtualMachineImagesEdgeZoneListPublishersOptionalParams): Promise<VirtualMachineImagesEdgeZoneListPublishersResponse>;
    /**
     * Gets a list of virtual machine image SKUs for the specified location, edge zone, publisher, and
     * offer.
     * @param location The name of a supported Azure region.
     * @param edgeZone The name of the edge zone.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param options The options parameters.
     */
    listSkus(location: string, edgeZone: string, publisherName: string, offer: string, options?: VirtualMachineImagesEdgeZoneListSkusOptionalParams): Promise<VirtualMachineImagesEdgeZoneListSkusResponse>;
}

/** Optional parameters. */
export declare interface VirtualMachineImagesEdgeZoneGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VirtualMachineImagesEdgeZoneGetResponse = VirtualMachineImage;

/** Optional parameters. */
export declare interface VirtualMachineImagesEdgeZoneListOffersOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOffers operation. */
export declare type VirtualMachineImagesEdgeZoneListOffersResponse = VirtualMachineImageResource[];

/** Optional parameters. */
export declare interface VirtualMachineImagesEdgeZoneListOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
    /** An integer value specifying the number of images to return that matches supplied values. */
    top?: number;
    /** Specifies the order of the results returned. Formatted as an OData query. */
    orderby?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineImagesEdgeZoneListPublishersOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPublishers operation. */
export declare type VirtualMachineImagesEdgeZoneListPublishersResponse = VirtualMachineImageResource[];

/** Contains response data for the list operation. */
export declare type VirtualMachineImagesEdgeZoneListResponse = VirtualMachineImageResource[];

/** Optional parameters. */
export declare interface VirtualMachineImagesEdgeZoneListSkusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSkus operation. */
export declare type VirtualMachineImagesEdgeZoneListSkusResponse = VirtualMachineImageResource[];

/** Optional parameters. */
export declare interface VirtualMachineImagesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VirtualMachineImagesGetResponse = VirtualMachineImage;

/** Optional parameters. */
export declare interface VirtualMachineImagesListByEdgeZoneOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByEdgeZone operation. */
export declare type VirtualMachineImagesListByEdgeZoneResponse = VmImagesInEdgeZoneListResult;

/** Optional parameters. */
export declare interface VirtualMachineImagesListOffersOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOffers operation. */
export declare type VirtualMachineImagesListOffersResponse = VirtualMachineImageResource[];

/** Optional parameters. */
export declare interface VirtualMachineImagesListOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
    top?: number;
    orderby?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineImagesListPublishersOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPublishers operation. */
export declare type VirtualMachineImagesListPublishersResponse = VirtualMachineImageResource[];

/** Contains response data for the list operation. */
export declare type VirtualMachineImagesListResponse = VirtualMachineImageResource[];

/** Optional parameters. */
export declare interface VirtualMachineImagesListSkusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSkus operation. */
export declare type VirtualMachineImagesListSkusResponse = VirtualMachineImageResource[];

/** Input for InstallPatches as directly received by the API */
export declare interface VirtualMachineInstallPatchesParameters {
    /** Specifies the maximum amount of time that the operation will run. It must be an ISO 8601-compliant duration string such as PT4H (4 hours) */
    maximumDuration?: string;
    /** Defines when it is acceptable to reboot a VM during a software update operation. */
    rebootSetting: VMGuestPatchRebootSetting;
    /** Input for InstallPatches on a Windows VM, as directly received by the API */
    windowsParameters?: WindowsParameters;
    /** Input for InstallPatches on a Linux VM, as directly received by the API */
    linuxParameters?: LinuxParameters;
}

/** The result summary of an installation operation. */
export declare interface VirtualMachineInstallPatchesResult {
    /**
     * The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Failed", "Succeeded", "Unknown" or "CompletedWithWarnings."
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: PatchOperationStatus;
    /**
     * The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly installationActivityId?: string;
    /**
     * The reboot state of the VM following completion of the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rebootStatus?: VMGuestPatchRebootStatus;
    /**
     * Whether the operation ran out of time before it completed all its intended actions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maintenanceWindowExceeded?: boolean;
    /**
     * The number of patches that were not installed due to the user blocking their installation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly excludedPatchCount?: number;
    /**
     * The number of patches that were detected as available for install, but did not meet the operation's criteria.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly notSelectedPatchCount?: number;
    /**
     * The number of patches that were identified as meeting the installation criteria, but were not able to be installed. Typically this happens when maintenanceWindowExceeded == true.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pendingPatchCount?: number;
    /**
     * The number of patches successfully installed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly installedPatchCount?: number;
    /**
     * The number of patches that could not be installed due to some issue. See errors for details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly failedPatchCount?: number;
    /**
     * The patches that were installed during the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly patches?: PatchInstallationDetail[];
    /**
     * The UTC timestamp when the operation began.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startDateTime?: Date;
    /**
     * The errors that were encountered during execution of the operation. The details array contains the list of them.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ApiError;
}

/** The instance view of a virtual machine. */
export declare interface VirtualMachineInstanceView {
    /** Specifies the update domain of the virtual machine. */
    platformUpdateDomain?: number;
    /** Specifies the fault domain of the virtual machine. */
    platformFaultDomain?: number;
    /** The computer name assigned to the virtual machine. */
    computerName?: string;
    /** The Operating System running on the virtual machine. */
    osName?: string;
    /** The version of Operating System running on the virtual machine. */
    osVersion?: string;
    /** Specifies the HyperVGeneration Type associated with a resource */
    hyperVGeneration?: HyperVGenerationType;
    /** The Remote desktop certificate thumbprint. */
    rdpThumbPrint?: string;
    /** The VM Agent running on the virtual machine. */
    vmAgent?: VirtualMachineAgentInstanceView;
    /** The Maintenance Operation status on the virtual machine. */
    maintenanceRedeployStatus?: MaintenanceRedeployStatus;
    /** The virtual machine disk information. */
    disks?: DiskInstanceView[];
    /** The extensions information. */
    extensions?: VirtualMachineExtensionInstanceView[];
    /**
     * The health status for the VM.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vmHealth?: VirtualMachineHealthStatus;
    /** Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor. */
    bootDiagnostics?: BootDiagnosticsInstanceView;
    /**
     * Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. <br><br>Minimum api-version: 2020-06-01.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly assignedHost?: string;
    /** The resource status information. */
    statuses?: InstanceViewStatus[];
    /** [Preview Feature] The status of virtual machine patch operations. */
    patchStatus?: VirtualMachinePatchStatus;
}

/** Contains the IP tag associated with the public IP address. */
export declare interface VirtualMachineIpTag {
    /** IP tag type. Example: FirstPartyUsage. */
    ipTagType?: string;
    /** IP tag associated with the public IP. Example: SQL, Storage etc. */
    tag?: string;
}

/** The List Virtual Machine operation response. */
export declare interface VirtualMachineListResult {
    /** The list of virtual machines. */
    value: VirtualMachine[];
    /** The URI to fetch the next page of VMs. Call ListNext() with this URI to fetch the next page of Virtual Machines. */
    nextLink?: string;
}

/** Describes a virtual machine network interface configurations. */
export declare interface VirtualMachineNetworkInterfaceConfiguration {
    /** The network interface configuration name. */
    name: string;
    /** Specifies the primary network interface in case the virtual machine has more than 1 network interface. */
    primary?: boolean;
    /** Specify what happens to the network interface when the VM is deleted */
    deleteOption?: DeleteOptions;
    /** Specifies whether the network interface is accelerated networking-enabled. */
    enableAcceleratedNetworking?: boolean;
    /** Specifies whether the network interface is disabled for tcp state tracking. */
    disableTcpStateTracking?: boolean;
    /** Specifies whether the network interface is FPGA networking-enabled. */
    enableFpga?: boolean;
    /** Whether IP forwarding enabled on this NIC. */
    enableIPForwarding?: boolean;
    /** The network security group. */
    networkSecurityGroup?: SubResource;
    /** The dns settings to be applied on the network interfaces. */
    dnsSettings?: VirtualMachineNetworkInterfaceDnsSettingsConfiguration;
    /** Specifies the IP configurations of the network interface. */
    ipConfigurations?: VirtualMachineNetworkInterfaceIPConfiguration[];
    dscpConfiguration?: SubResource;
}

/** Describes a virtual machines network configuration's DNS settings. */
export declare interface VirtualMachineNetworkInterfaceDnsSettingsConfiguration {
    /** List of DNS servers IP addresses */
    dnsServers?: string[];
}

/** Describes a virtual machine network profile's IP configuration. */
export declare interface VirtualMachineNetworkInterfaceIPConfiguration {
    /** The IP configuration name. */
    name: string;
    /** Specifies the identifier of the subnet. */
    subnet?: SubResource;
    /** Specifies the primary network interface in case the virtual machine has more than 1 network interface. */
    primary?: boolean;
    /** The publicIPAddressConfiguration. */
    publicIPAddressConfiguration?: VirtualMachinePublicIPAddressConfiguration;
    /** Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'. */
    privateIPAddressVersion?: IPVersions;
    /** Specifies an array of references to application security group. */
    applicationSecurityGroups?: SubResource[];
    /** Specifies an array of references to backend address pools of application gateways. A virtual machine can reference backend address pools of multiple application gateways. Multiple virtual machines cannot use the same application gateway. */
    applicationGatewayBackendAddressPools?: SubResource[];
    /** Specifies an array of references to backend address pools of load balancers. A virtual machine can reference backend address pools of one public and one internal load balancer. [Multiple virtual machines cannot use the same basic sku load balancer]. */
    loadBalancerBackendAddressPools?: SubResource[];
}

/** The status of virtual machine patch operations. */
export declare interface VirtualMachinePatchStatus {
    /** The available patch summary of the latest assessment operation for the virtual machine. */
    availablePatchSummary?: AvailablePatchSummary;
    /** The installation summary of the latest installation operation for the virtual machine. */
    lastPatchInstallationSummary?: LastPatchInstallationSummary;
    /**
     * The enablement status of the specified patchMode
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly configurationStatuses?: InstanceViewStatus[];
}

/**
 * Defines values for VirtualMachinePriorityTypes. \
 * {@link KnownVirtualMachinePriorityTypes} can be used interchangeably with VirtualMachinePriorityTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Regular** \
 * **Low** \
 * **Spot**
 */
export declare type VirtualMachinePriorityTypes = string;

/** Describes a virtual machines IP Configuration's PublicIPAddress configuration */
export declare interface VirtualMachinePublicIPAddressConfiguration {
    /** The publicIP address configuration name. */
    name: string;
    /** Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible. */
    sku?: PublicIPAddressSku;
    /** The idle timeout of the public IP address. */
    idleTimeoutInMinutes?: number;
    /** Specify what happens to the public IP address when the VM is deleted */
    deleteOption?: DeleteOptions;
    /** The dns settings to be applied on the publicIP addresses . */
    dnsSettings?: VirtualMachinePublicIPAddressDnsSettingsConfiguration;
    /** The list of IP tags associated with the public IP address. */
    ipTags?: VirtualMachineIpTag[];
    /** The PublicIPPrefix from which to allocate publicIP addresses. */
    publicIPPrefix?: SubResource;
    /** Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'. */
    publicIPAddressVersion?: IPVersions;
    /** Specify the public IP allocation type */
    publicIPAllocationMethod?: PublicIPAllocationMethod;
}

/** Describes a virtual machines network configuration's DNS settings. */
export declare interface VirtualMachinePublicIPAddressDnsSettingsConfiguration {
    /** The Domain name label prefix of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the domain name label and vm network profile unique ID. */
    domainNameLabel: string;
}

/** Parameters for Reimaging Virtual Machine. NOTE: Virtual Machine OS disk will always be reimaged */
export declare interface VirtualMachineReimageParameters {
    /** Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage parameter is only supported for VM/VMSS with Ephemeral OS disk. */
    tempDisk?: boolean;
}

/** Describes a Virtual Machine run command. */
export declare interface VirtualMachineRunCommand extends Resource {
    /** The source of the run command script. */
    source?: VirtualMachineRunCommandScriptSource;
    /** The parameters used by the script. */
    parameters?: RunCommandInputParameter[];
    /** The parameters used by the script. */
    protectedParameters?: RunCommandInputParameter[];
    /** Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete. */
    asyncExecution?: boolean;
    /** Specifies the user account on the VM when executing the run command. */
    runAsUser?: string;
    /** Specifies the user account password on the VM when executing the run command. */
    runAsPassword?: string;
    /** The timeout in seconds to execute the run command. */
    timeoutInSeconds?: number;
    /** Specifies the Azure storage blob where script output stream will be uploaded. */
    outputBlobUri?: string;
    /** Specifies the Azure storage blob where script error stream will be uploaded. */
    errorBlobUri?: string;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The virtual machine run command instance view.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: VirtualMachineRunCommandInstanceView;
}

/** The instance view of a virtual machine run command. */
export declare interface VirtualMachineRunCommandInstanceView {
    /** Script execution status. */
    executionState?: ExecutionState;
    /** Communicate script configuration errors or execution messages. */
    executionMessage?: string;
    /** Exit code returned from script execution. */
    exitCode?: number;
    /** Script output stream. */
    output?: string;
    /** Script error stream. */
    error?: string;
    /** Script start time. */
    startTime?: Date;
    /** Script end time. */
    endTime?: Date;
    /** The resource status information. */
    statuses?: InstanceViewStatus[];
}

/** Interface representing a VirtualMachineRunCommands. */
export declare interface VirtualMachineRunCommands {
    /**
     * Lists all available run commands for a subscription in a location.
     * @param location The location upon which run commands is queried.
     * @param options The options parameters.
     */
    list(location: string, options?: VirtualMachineRunCommandsListOptionalParams): PagedAsyncIterableIterator<RunCommandDocumentBase>;
    /**
     * The operation to get all run commands of a Virtual Machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine containing the run command.
     * @param options The options parameters.
     */
    listByVirtualMachine(resourceGroupName: string, vmName: string, options?: VirtualMachineRunCommandsListByVirtualMachineOptionalParams): PagedAsyncIterableIterator<VirtualMachineRunCommand>;
    /**
     * Gets specific run command for a subscription in a location.
     * @param location The location upon which run commands is queried.
     * @param commandId The command id.
     * @param options The options parameters.
     */
    get(location: string, commandId: string, options?: VirtualMachineRunCommandsGetOptionalParams): Promise<VirtualMachineRunCommandsGetResponse>;
    /**
     * The operation to create or update the run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine where the run command should be created or updated.
     * @param runCommandName The name of the virtual machine run command.
     * @param runCommand Parameters supplied to the Create Virtual Machine RunCommand operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, vmName: string, runCommandName: string, runCommand: VirtualMachineRunCommand, options?: VirtualMachineRunCommandsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineRunCommandsCreateOrUpdateResponse>, VirtualMachineRunCommandsCreateOrUpdateResponse>>;
    /**
     * The operation to create or update the run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine where the run command should be created or updated.
     * @param runCommandName The name of the virtual machine run command.
     * @param runCommand Parameters supplied to the Create Virtual Machine RunCommand operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, vmName: string, runCommandName: string, runCommand: VirtualMachineRunCommand, options?: VirtualMachineRunCommandsCreateOrUpdateOptionalParams): Promise<VirtualMachineRunCommandsCreateOrUpdateResponse>;
    /**
     * The operation to update the run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine where the run command should be updated.
     * @param runCommandName The name of the virtual machine run command.
     * @param runCommand Parameters supplied to the Update Virtual Machine RunCommand operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, vmName: string, runCommandName: string, runCommand: VirtualMachineRunCommandUpdate, options?: VirtualMachineRunCommandsUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineRunCommandsUpdateResponse>, VirtualMachineRunCommandsUpdateResponse>>;
    /**
     * The operation to update the run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine where the run command should be updated.
     * @param runCommandName The name of the virtual machine run command.
     * @param runCommand Parameters supplied to the Update Virtual Machine RunCommand operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, vmName: string, runCommandName: string, runCommand: VirtualMachineRunCommandUpdate, options?: VirtualMachineRunCommandsUpdateOptionalParams): Promise<VirtualMachineRunCommandsUpdateResponse>;
    /**
     * The operation to delete the run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine where the run command should be deleted.
     * @param runCommandName The name of the virtual machine run command.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, vmName: string, runCommandName: string, options?: VirtualMachineRunCommandsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to delete the run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine where the run command should be deleted.
     * @param runCommandName The name of the virtual machine run command.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, vmName: string, runCommandName: string, options?: VirtualMachineRunCommandsDeleteOptionalParams): Promise<void>;
    /**
     * The operation to get the run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine containing the run command.
     * @param runCommandName The name of the virtual machine run command.
     * @param options The options parameters.
     */
    getByVirtualMachine(resourceGroupName: string, vmName: string, runCommandName: string, options?: VirtualMachineRunCommandsGetByVirtualMachineOptionalParams): Promise<VirtualMachineRunCommandsGetByVirtualMachineResponse>;
}

/** Optional parameters. */
export declare interface VirtualMachineRunCommandsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualMachineRunCommandsCreateOrUpdateResponse = VirtualMachineRunCommand;

/** Describes the script sources for run command. */
export declare interface VirtualMachineRunCommandScriptSource {
    /** Specifies the script content to be executed on the VM. */
    script?: string;
    /** Specifies the script download location. */
    scriptUri?: string;
    /** Specifies a commandId of predefined built-in script. */
    commandId?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineRunCommandsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineRunCommandsGetByVirtualMachineOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
}

/** Contains response data for the getByVirtualMachine operation. */
export declare type VirtualMachineRunCommandsGetByVirtualMachineResponse = VirtualMachineRunCommand;

/** Optional parameters. */
export declare interface VirtualMachineRunCommandsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VirtualMachineRunCommandsGetResponse = RunCommandDocument;

/** Optional parameters. */
export declare interface VirtualMachineRunCommandsListByVirtualMachineNextOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
}

/** Contains response data for the listByVirtualMachineNext operation. */
export declare type VirtualMachineRunCommandsListByVirtualMachineNextResponse = VirtualMachineRunCommandsListResult;

/** Optional parameters. */
export declare interface VirtualMachineRunCommandsListByVirtualMachineOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
}

/** Contains response data for the listByVirtualMachine operation. */
export declare type VirtualMachineRunCommandsListByVirtualMachineResponse = VirtualMachineRunCommandsListResult;

/** Optional parameters. */
export declare interface VirtualMachineRunCommandsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type VirtualMachineRunCommandsListNextResponse = RunCommandListResult;

/** Optional parameters. */
export declare interface VirtualMachineRunCommandsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type VirtualMachineRunCommandsListResponse = RunCommandListResult;

/** The List run command operation response */
export declare interface VirtualMachineRunCommandsListResult {
    /** The list of run commands */
    value: VirtualMachineRunCommand[];
    /** The uri to fetch the next page of run commands. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineRunCommandsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VirtualMachineRunCommandsUpdateResponse = VirtualMachineRunCommand;

/** Describes a Virtual Machine run command. */
export declare interface VirtualMachineRunCommandUpdate extends UpdateResource {
    /** The source of the run command script. */
    source?: VirtualMachineRunCommandScriptSource;
    /** The parameters used by the script. */
    parameters?: RunCommandInputParameter[];
    /** The parameters used by the script. */
    protectedParameters?: RunCommandInputParameter[];
    /** Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete. */
    asyncExecution?: boolean;
    /** Specifies the user account on the VM when executing the run command. */
    runAsUser?: string;
    /** Specifies the user account password on the VM when executing the run command. */
    runAsPassword?: string;
    /** The timeout in seconds to execute the run command. */
    timeoutInSeconds?: number;
    /** Specifies the Azure storage blob where script output stream will be uploaded. */
    outputBlobUri?: string;
    /** Specifies the Azure storage blob where script error stream will be uploaded. */
    errorBlobUri?: string;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The virtual machine run command instance view.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: VirtualMachineRunCommandInstanceView;
}

/** Interface representing a VirtualMachines. */
export declare interface VirtualMachines {
    /**
     * Gets all the virtual machines under the specified subscription for the specified location.
     * @param location The location for which virtual machines under the subscription are queried.
     * @param options The options parameters.
     */
    listByLocation(location: string, options?: VirtualMachinesListByLocationOptionalParams): PagedAsyncIterableIterator<VirtualMachine>;
    /**
     * Lists all of the virtual machines in the specified resource group. Use the nextLink property in the
     * response to get the next page of virtual machines.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: VirtualMachinesListOptionalParams): PagedAsyncIterableIterator<VirtualMachine>;
    /**
     * Lists all of the virtual machines in the specified subscription. Use the nextLink property in the
     * response to get the next page of virtual machines.
     * @param options The options parameters.
     */
    listAll(options?: VirtualMachinesListAllOptionalParams): PagedAsyncIterableIterator<VirtualMachine>;
    /**
     * Lists all available virtual machine sizes to which the specified virtual machine can be resized.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    listAvailableSizes(resourceGroupName: string, vmName: string, options?: VirtualMachinesListAvailableSizesOptionalParams): PagedAsyncIterableIterator<VirtualMachineSize>;
    /**
     * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used to
     * create similar VMs.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Capture Virtual Machine operation.
     * @param options The options parameters.
     */
    beginCapture(resourceGroupName: string, vmName: string, parameters: VirtualMachineCaptureParameters, options?: VirtualMachinesCaptureOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachinesCaptureResponse>, VirtualMachinesCaptureResponse>>;
    /**
     * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used to
     * create similar VMs.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Capture Virtual Machine operation.
     * @param options The options parameters.
     */
    beginCaptureAndWait(resourceGroupName: string, vmName: string, parameters: VirtualMachineCaptureParameters, options?: VirtualMachinesCaptureOptionalParams): Promise<VirtualMachinesCaptureResponse>;
    /**
     * The operation to create or update a virtual machine. Please note some properties can be set only
     * during virtual machine creation.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Create Virtual Machine operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, vmName: string, parameters: VirtualMachine, options?: VirtualMachinesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachinesCreateOrUpdateResponse>, VirtualMachinesCreateOrUpdateResponse>>;
    /**
     * The operation to create or update a virtual machine. Please note some properties can be set only
     * during virtual machine creation.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Create Virtual Machine operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, vmName: string, parameters: VirtualMachine, options?: VirtualMachinesCreateOrUpdateOptionalParams): Promise<VirtualMachinesCreateOrUpdateResponse>;
    /**
     * The operation to update a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Update Virtual Machine operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, vmName: string, parameters: VirtualMachineUpdate, options?: VirtualMachinesUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachinesUpdateResponse>, VirtualMachinesUpdateResponse>>;
    /**
     * The operation to update a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Update Virtual Machine operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, vmName: string, parameters: VirtualMachineUpdate, options?: VirtualMachinesUpdateOptionalParams): Promise<VirtualMachinesUpdateResponse>;
    /**
     * The operation to delete a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, vmName: string, options?: VirtualMachinesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to delete a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, vmName: string, options?: VirtualMachinesDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves information about the model view or the instance view of a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vmName: string, options?: VirtualMachinesGetOptionalParams): Promise<VirtualMachinesGetResponse>;
    /**
     * Retrieves information about the run-time state of a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    instanceView(resourceGroupName: string, vmName: string, options?: VirtualMachinesInstanceViewOptionalParams): Promise<VirtualMachinesInstanceViewResponse>;
    /**
     * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
     * stop-deallocated before invoking this operation.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginConvertToManagedDisks(resourceGroupName: string, vmName: string, options?: VirtualMachinesConvertToManagedDisksOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
     * stop-deallocated before invoking this operation.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginConvertToManagedDisksAndWait(resourceGroupName: string, vmName: string, options?: VirtualMachinesConvertToManagedDisksOptionalParams): Promise<void>;
    /**
     * Shuts down the virtual machine and releases the compute resources. You are not billed for the
     * compute resources that this virtual machine uses.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginDeallocate(resourceGroupName: string, vmName: string, options?: VirtualMachinesDeallocateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Shuts down the virtual machine and releases the compute resources. You are not billed for the
     * compute resources that this virtual machine uses.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginDeallocateAndWait(resourceGroupName: string, vmName: string, options?: VirtualMachinesDeallocateOptionalParams): Promise<void>;
    /**
     * Sets the OS state of the virtual machine to generalized. It is recommended to sysprep the virtual
     * machine before performing this operation. <br>For Windows, please refer to [Create a managed image
     * of a generalized VM in
     * Azure](https://docs.microsoft.com/azure/virtual-machines/windows/capture-image-resource).<br>For
     * Linux, please refer to [How to create an image of a virtual machine or
     * VHD](https://docs.microsoft.com/azure/virtual-machines/linux/capture-image).
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    generalize(resourceGroupName: string, vmName: string, options?: VirtualMachinesGeneralizeOptionalParams): Promise<void>;
    /**
     * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with the
     * same provisioned resources. You are still charged for this virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginPowerOff(resourceGroupName: string, vmName: string, options?: VirtualMachinesPowerOffOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with the
     * same provisioned resources. You are still charged for this virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginPowerOffAndWait(resourceGroupName: string, vmName: string, options?: VirtualMachinesPowerOffOptionalParams): Promise<void>;
    /**
     * The operation to reapply a virtual machine's state.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginReapply(resourceGroupName: string, vmName: string, options?: VirtualMachinesReapplyOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to reapply a virtual machine's state.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginReapplyAndWait(resourceGroupName: string, vmName: string, options?: VirtualMachinesReapplyOptionalParams): Promise<void>;
    /**
     * The operation to restart a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName: string, vmName: string, options?: VirtualMachinesRestartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to restart a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName: string, vmName: string, options?: VirtualMachinesRestartOptionalParams): Promise<void>;
    /**
     * The operation to start a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, vmName: string, options?: VirtualMachinesStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to start a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, vmName: string, options?: VirtualMachinesStartOptionalParams): Promise<void>;
    /**
     * Shuts down the virtual machine, moves it to a new node, and powers it back on.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginRedeploy(resourceGroupName: string, vmName: string, options?: VirtualMachinesRedeployOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Shuts down the virtual machine, moves it to a new node, and powers it back on.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginRedeployAndWait(resourceGroupName: string, vmName: string, options?: VirtualMachinesRedeployOptionalParams): Promise<void>;
    /**
     * Reimages the virtual machine which has an ephemeral OS disk back to its initial state.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginReimage(resourceGroupName: string, vmName: string, options?: VirtualMachinesReimageOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Reimages the virtual machine which has an ephemeral OS disk back to its initial state.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginReimageAndWait(resourceGroupName: string, vmName: string, options?: VirtualMachinesReimageOptionalParams): Promise<void>;
    /**
     * The operation to retrieve SAS URIs for a virtual machine's boot diagnostic logs.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    retrieveBootDiagnosticsData(resourceGroupName: string, vmName: string, options?: VirtualMachinesRetrieveBootDiagnosticsDataOptionalParams): Promise<VirtualMachinesRetrieveBootDiagnosticsDataResponse>;
    /**
     * The operation to perform maintenance on a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginPerformMaintenance(resourceGroupName: string, vmName: string, options?: VirtualMachinesPerformMaintenanceOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to perform maintenance on a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginPerformMaintenanceAndWait(resourceGroupName: string, vmName: string, options?: VirtualMachinesPerformMaintenanceOptionalParams): Promise<void>;
    /**
     * The operation to simulate the eviction of spot virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    simulateEviction(resourceGroupName: string, vmName: string, options?: VirtualMachinesSimulateEvictionOptionalParams): Promise<void>;
    /**
     * Assess patches on the VM.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginAssessPatches(resourceGroupName: string, vmName: string, options?: VirtualMachinesAssessPatchesOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachinesAssessPatchesResponse>, VirtualMachinesAssessPatchesResponse>>;
    /**
     * Assess patches on the VM.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    beginAssessPatchesAndWait(resourceGroupName: string, vmName: string, options?: VirtualMachinesAssessPatchesOptionalParams): Promise<VirtualMachinesAssessPatchesResponse>;
    /**
     * Installs patches on the VM.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param installPatchesInput Input for InstallPatches as directly received by the API
     * @param options The options parameters.
     */
    beginInstallPatches(resourceGroupName: string, vmName: string, installPatchesInput: VirtualMachineInstallPatchesParameters, options?: VirtualMachinesInstallPatchesOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachinesInstallPatchesResponse>, VirtualMachinesInstallPatchesResponse>>;
    /**
     * Installs patches on the VM.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param installPatchesInput Input for InstallPatches as directly received by the API
     * @param options The options parameters.
     */
    beginInstallPatchesAndWait(resourceGroupName: string, vmName: string, installPatchesInput: VirtualMachineInstallPatchesParameters, options?: VirtualMachinesInstallPatchesOptionalParams): Promise<VirtualMachinesInstallPatchesResponse>;
    /**
     * Run command on the VM.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Run command operation.
     * @param options The options parameters.
     */
    beginRunCommand(resourceGroupName: string, vmName: string, parameters: RunCommandInput, options?: VirtualMachinesRunCommandOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachinesRunCommandResponse>, VirtualMachinesRunCommandResponse>>;
    /**
     * Run command on the VM.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Run command operation.
     * @param options The options parameters.
     */
    beginRunCommandAndWait(resourceGroupName: string, vmName: string, parameters: RunCommandInput, options?: VirtualMachinesRunCommandOptionalParams): Promise<VirtualMachinesRunCommandResponse>;
}

/** Optional parameters. */
export declare interface VirtualMachinesAssessPatchesOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the assessPatches operation. */
export declare type VirtualMachinesAssessPatchesResponse = VirtualMachineAssessPatchesResult;

/** Describes a Virtual Machine Scale Set. */
export declare interface VirtualMachineScaleSet extends Resource {
    /** The virtual machine scale set sku. */
    sku?: Sku;
    /** Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**. */
    plan?: Plan;
    /** The identity of the virtual machine scale set, if configured. */
    identity?: VirtualMachineScaleSetIdentity;
    /** The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set */
    zones?: string[];
    /** The extended location of the Virtual Machine Scale Set. */
    extendedLocation?: ExtendedLocation;
    /** The upgrade policy. */
    upgradePolicy?: UpgradePolicy;
    /** Policy for automatic repairs. */
    automaticRepairsPolicy?: AutomaticRepairsPolicy;
    /** The virtual machine profile. */
    virtualMachineProfile?: VirtualMachineScaleSetVMProfile;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** Specifies whether the Virtual Machine Scale Set should be overprovisioned. */
    overprovision?: boolean;
    /** When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs. */
    doNotRunExtensionsOnOverprovisionedVMs?: boolean;
    /**
     * Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueId?: string;
    /** When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if singlePlacementGroup is false, it may not be modified to true. */
    singlePlacementGroup?: boolean;
    /** Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage. zoneBalance property can only be set if the zones property of the scale set contains more than one zone. If there are no zones or only one zone specified, then zoneBalance property should not be set. */
    zoneBalance?: boolean;
    /** Fault Domain count for each placement group. */
    platformFaultDomainCount?: number;
    /** Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. <br><br>Minimum api-version: 2018-04-01. */
    proximityPlacementGroup?: SubResource;
    /** Specifies information about the dedicated host group that the virtual machine scale set resides in. <br><br>Minimum api-version: 2020-06-01. */
    hostGroup?: SubResource;
    /** Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type. */
    additionalCapabilities?: AdditionalCapabilities;
    /** Specifies the policies applied when scaling in Virtual Machines in the Virtual Machine Scale Set. */
    scaleInPolicy?: ScaleInPolicy;
    /** Specifies the orchestration mode for the virtual machine scale set. */
    orchestrationMode?: OrchestrationMode;
    /** Specifies the Spot Restore properties for the virtual machine scale set. */
    spotRestorePolicy?: SpotRestorePolicy;
    /** Specifies the desired targets for mixing Spot and Regular priority VMs within the same VMSS Flex instance. */
    priorityMixPolicy?: PriorityMixPolicy;
    /**
     * Specifies the time at which the Virtual Machine Scale Set resource was created.<br><br>Minimum api-version: 2021-11-01.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeCreated?: Date;
}

/** Describes a virtual machine scale set data disk. */
export declare interface VirtualMachineScaleSetDataDisk {
    /** The disk name. */
    name?: string;
    /** Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. */
    lun: number;
    /** Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage** */
    caching?: CachingTypes;
    /** Specifies whether writeAccelerator should be enabled or disabled on the disk. */
    writeAcceleratorEnabled?: boolean;
    /** The create option. */
    createOption: DiskCreateOptionTypes;
    /** Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023 */
    diskSizeGB?: number;
    /** The managed disk parameters. */
    managedDisk?: VirtualMachineScaleSetManagedDiskParameters;
    /** Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB. */
    diskIopsReadWrite?: number;
    /** Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB. */
    diskMBpsReadWrite?: number;
    /** Specifies whether data disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only).<br><br> Possible values: <br><br> **Delete** If this value is used, the data disk is deleted when the VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the data disk is retained after VMSS Flex VM is deleted.<br><br> The default value is set to **Delete**. */
    deleteOption?: DiskDeleteOptionTypes;
}

/** Describes a Virtual Machine Scale Set Extension. */
export declare interface VirtualMachineScaleSetExtension extends SubResourceReadOnly {
    /** The name of the extension. */
    name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed. */
    forceUpdateTag?: string;
    /** The name of the extension handler publisher. */
    publisher?: string;
    /** Specifies the type of the extension; an example is "CustomScriptExtension". */
    typePropertiesType?: string;
    /** Specifies the version of the script handler. */
    typeHandlerVersion?: string;
    /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
    autoUpgradeMinorVersion?: boolean;
    /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. */
    enableAutomaticUpgrade?: boolean;
    /** Json formatted public settings for the extension. */
    settings?: any;
    /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
    protectedSettings?: any;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** Collection of extension names after which this extension needs to be provisioned. */
    provisionAfterExtensions?: string[];
    /** Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false. */
    suppressFailures?: boolean;
    /** The extensions protected settings that are passed by reference, and consumed from key vault */
    protectedSettingsFromKeyVault?: KeyVaultSecretReference;
}

/** The List VM scale set extension operation response. */
export declare interface VirtualMachineScaleSetExtensionListResult {
    /** The list of VM scale set extensions. */
    value: VirtualMachineScaleSetExtension[];
    /** The uri to fetch the next page of VM scale set extensions. Call ListNext() with this to fetch the next page of VM scale set extensions. */
    nextLink?: string;
}

/** Describes a virtual machine scale set extension profile. */
export declare interface VirtualMachineScaleSetExtensionProfile {
    /** The virtual machine scale set child extension resources. */
    extensions?: VirtualMachineScaleSetExtension[];
    /** Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). <br><br> Minimum api-version: 2020-06-01 */
    extensionsTimeBudget?: string;
}

/** Interface representing a VirtualMachineScaleSetExtensions. */
export declare interface VirtualMachineScaleSetExtensions {
    /**
     * Gets a list of all extensions in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set containing the extension.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetExtensionsListOptionalParams): PagedAsyncIterableIterator<VirtualMachineScaleSetExtension>;
    /**
     * The operation to create or update an extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set where the extension should be create or updated.
     * @param vmssExtensionName The name of the VM scale set extension.
     * @param extensionParameters Parameters supplied to the Create VM scale set Extension operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, vmScaleSetName: string, vmssExtensionName: string, extensionParameters: VirtualMachineScaleSetExtension, options?: VirtualMachineScaleSetExtensionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineScaleSetExtensionsCreateOrUpdateResponse>, VirtualMachineScaleSetExtensionsCreateOrUpdateResponse>>;
    /**
     * The operation to create or update an extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set where the extension should be create or updated.
     * @param vmssExtensionName The name of the VM scale set extension.
     * @param extensionParameters Parameters supplied to the Create VM scale set Extension operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, vmScaleSetName: string, vmssExtensionName: string, extensionParameters: VirtualMachineScaleSetExtension, options?: VirtualMachineScaleSetExtensionsCreateOrUpdateOptionalParams): Promise<VirtualMachineScaleSetExtensionsCreateOrUpdateResponse>;
    /**
     * The operation to update an extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set where the extension should be updated.
     * @param vmssExtensionName The name of the VM scale set extension.
     * @param extensionParameters Parameters supplied to the Update VM scale set Extension operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, vmScaleSetName: string, vmssExtensionName: string, extensionParameters: VirtualMachineScaleSetExtensionUpdate, options?: VirtualMachineScaleSetExtensionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineScaleSetExtensionsUpdateResponse>, VirtualMachineScaleSetExtensionsUpdateResponse>>;
    /**
     * The operation to update an extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set where the extension should be updated.
     * @param vmssExtensionName The name of the VM scale set extension.
     * @param extensionParameters Parameters supplied to the Update VM scale set Extension operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, vmScaleSetName: string, vmssExtensionName: string, extensionParameters: VirtualMachineScaleSetExtensionUpdate, options?: VirtualMachineScaleSetExtensionsUpdateOptionalParams): Promise<VirtualMachineScaleSetExtensionsUpdateResponse>;
    /**
     * The operation to delete the extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set where the extension should be deleted.
     * @param vmssExtensionName The name of the VM scale set extension.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, vmScaleSetName: string, vmssExtensionName: string, options?: VirtualMachineScaleSetExtensionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to delete the extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set where the extension should be deleted.
     * @param vmssExtensionName The name of the VM scale set extension.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, vmScaleSetName: string, vmssExtensionName: string, options?: VirtualMachineScaleSetExtensionsDeleteOptionalParams): Promise<void>;
    /**
     * The operation to get the extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set containing the extension.
     * @param vmssExtensionName The name of the VM scale set extension.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vmScaleSetName: string, vmssExtensionName: string, options?: VirtualMachineScaleSetExtensionsGetOptionalParams): Promise<VirtualMachineScaleSetExtensionsGetResponse>;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetExtensionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualMachineScaleSetExtensionsCreateOrUpdateResponse = VirtualMachineScaleSetExtension;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetExtensionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetExtensionsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type VirtualMachineScaleSetExtensionsGetResponse = VirtualMachineScaleSetExtension;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetExtensionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type VirtualMachineScaleSetExtensionsListNextResponse = VirtualMachineScaleSetExtensionListResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetExtensionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type VirtualMachineScaleSetExtensionsListResponse = VirtualMachineScaleSetExtensionListResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetExtensionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VirtualMachineScaleSetExtensionsUpdateResponse = VirtualMachineScaleSetExtension;

/** Describes a Virtual Machine Scale Set Extension. */
export declare interface VirtualMachineScaleSetExtensionUpdate extends SubResourceReadOnly {
    /**
     * The name of the extension.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed. */
    forceUpdateTag?: string;
    /** The name of the extension handler publisher. */
    publisher?: string;
    /** Specifies the type of the extension; an example is "CustomScriptExtension". */
    typePropertiesType?: string;
    /** Specifies the version of the script handler. */
    typeHandlerVersion?: string;
    /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
    autoUpgradeMinorVersion?: boolean;
    /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. */
    enableAutomaticUpgrade?: boolean;
    /** Json formatted public settings for the extension. */
    settings?: any;
    /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
    protectedSettings?: any;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** Collection of extension names after which this extension needs to be provisioned. */
    provisionAfterExtensions?: string[];
    /** Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false. */
    suppressFailures?: boolean;
    /** The extensions protected settings that are passed by reference, and consumed from key vault */
    protectedSettingsFromKeyVault?: KeyVaultSecretReference;
}

/** Specifies the hardware settings for the virtual machine scale set. */
export declare interface VirtualMachineScaleSetHardwareProfile {
    /** Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-11-01. <br><br> Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details. */
    vmSizeProperties?: VMSizeProperties;
}

/** Identity for the virtual machine scale set. */
export declare interface VirtualMachineScaleSetIdentity {
    /**
     * The principal id of virtual machine scale set identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant id associated with the virtual machine scale set. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set. */
    type?: ResourceIdentityType;
    /** The list of user identities associated with the virtual machine scale set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentitiesValue;
    };
}

/** The instance view of a virtual machine scale set. */
export declare interface VirtualMachineScaleSetInstanceView {
    /**
     * The instance view status summary for the virtual machine scale set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly virtualMachine?: VirtualMachineScaleSetInstanceViewStatusesSummary;
    /**
     * The extensions information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly extensions?: VirtualMachineScaleSetVMExtensionsSummary[];
    /** The resource status information. */
    statuses?: InstanceViewStatus[];
    /**
     * The orchestration services information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly orchestrationServices?: OrchestrationServiceSummary[];
}

/** Instance view statuses summary for virtual machines of a virtual machine scale set. */
export declare interface VirtualMachineScaleSetInstanceViewStatusesSummary {
    /**
     * The extensions information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statusesSummary?: VirtualMachineStatusCodeCount[];
}

/** Describes a virtual machine scale set network profile's IP configuration. */
export declare interface VirtualMachineScaleSetIPConfiguration extends SubResource {
    /** The IP configuration name. */
    name: string;
    /** Specifies the identifier of the subnet. */
    subnet?: ApiEntityReference;
    /** Specifies the primary network interface in case the virtual machine has more than 1 network interface. */
    primary?: boolean;
    /** The publicIPAddressConfiguration. */
    publicIPAddressConfiguration?: VirtualMachineScaleSetPublicIPAddressConfiguration;
    /** Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'. */
    privateIPAddressVersion?: IPVersion;
    /** Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway. */
    applicationGatewayBackendAddressPools?: SubResource[];
    /** Specifies an array of references to application security group. */
    applicationSecurityGroups?: SubResource[];
    /** Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer. */
    loadBalancerBackendAddressPools?: SubResource[];
    /** Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer. */
    loadBalancerInboundNatPools?: SubResource[];
}

/** Contains the IP tag associated with the public IP address. */
export declare interface VirtualMachineScaleSetIpTag {
    /** IP tag type. Example: FirstPartyUsage. */
    ipTagType?: string;
    /** IP tag associated with the public IP. Example: SQL, Storage etc. */
    tag?: string;
}

/** List of Virtual Machine Scale Set OS Upgrade History operation response. */
export declare interface VirtualMachineScaleSetListOSUpgradeHistory {
    /** The list of OS upgrades performed on the virtual machine scale set. */
    value: UpgradeOperationHistoricalStatusInfo[];
    /** The uri to fetch the next page of OS Upgrade History. Call ListNext() with this to fetch the next page of history of upgrades. */
    nextLink?: string;
}

/** The List Virtual Machine operation response. */
export declare interface VirtualMachineScaleSetListResult {
    /** The list of virtual machine scale sets. */
    value: VirtualMachineScaleSet[];
    /** The uri to fetch the next page of Virtual Machine Scale Sets. Call ListNext() with this to fetch the next page of VMSS. */
    nextLink?: string;
}

/** The Virtual Machine Scale Set List Skus operation response. */
export declare interface VirtualMachineScaleSetListSkusResult {
    /** The list of skus available for the virtual machine scale set. */
    value: VirtualMachineScaleSetSku[];
    /** The uri to fetch the next page of Virtual Machine Scale Set Skus. Call ListNext() with this to fetch the next page of VMSS Skus. */
    nextLink?: string;
}

/** The List Virtual Machine operation response. */
export declare interface VirtualMachineScaleSetListWithLinkResult {
    /** The list of virtual machine scale sets. */
    value: VirtualMachineScaleSet[];
    /** The uri to fetch the next page of Virtual Machine Scale Sets. Call ListNext() with this to fetch the next page of Virtual Machine Scale Sets. */
    nextLink?: string;
}

/** Describes the parameters of a ScaleSet managed disk. */
export declare interface VirtualMachineScaleSetManagedDiskParameters {
    /** Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. */
    storageAccountType?: StorageAccountTypes;
    /** Specifies the customer managed disk encryption set resource id for the managed disk. */
    diskEncryptionSet?: DiskEncryptionSetParameters;
    /** Specifies the security profile for the managed disk. */
    securityProfile?: VMDiskSecurityProfile;
}

/** Describes a virtual machine scale set network profile's network configurations. */
export declare interface VirtualMachineScaleSetNetworkConfiguration extends SubResource {
    /** The network configuration name. */
    name: string;
    /** Specifies the primary network interface in case the virtual machine has more than 1 network interface. */
    primary?: boolean;
    /** Specifies whether the network interface is accelerated networking-enabled. */
    enableAcceleratedNetworking?: boolean;
    /** Specifies whether the network interface is disabled for tcp state tracking. */
    disableTcpStateTracking?: boolean;
    /** Specifies whether the network interface is FPGA networking-enabled. */
    enableFpga?: boolean;
    /** The network security group. */
    networkSecurityGroup?: SubResource;
    /** The dns settings to be applied on the network interfaces. */
    dnsSettings?: VirtualMachineScaleSetNetworkConfigurationDnsSettings;
    /** Specifies the IP configurations of the network interface. */
    ipConfigurations?: VirtualMachineScaleSetIPConfiguration[];
    /** Whether IP forwarding enabled on this NIC. */
    enableIPForwarding?: boolean;
    /** Specify what happens to the network interface when the VM is deleted */
    deleteOption?: DeleteOptions;
}

/** Describes a virtual machines scale sets network configuration's DNS settings. */
export declare interface VirtualMachineScaleSetNetworkConfigurationDnsSettings {
    /** List of DNS servers IP addresses */
    dnsServers?: string[];
}

/** Describes a virtual machine scale set network profile. */
export declare interface VirtualMachineScaleSetNetworkProfile {
    /** A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'. */
    healthProbe?: ApiEntityReference;
    /** The list of network configurations. */
    networkInterfaceConfigurations?: VirtualMachineScaleSetNetworkConfiguration[];
    /** specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations for Virtual Machine Scale Set with orchestration mode 'Flexible' */
    networkApiVersion?: NetworkApiVersion;
}

/** Describes a virtual machine scale set operating system disk. */
export declare interface VirtualMachineScaleSetOSDisk {
    /** The disk name. */
    name?: string;
    /** Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage** */
    caching?: CachingTypes;
    /** Specifies whether writeAccelerator should be enabled or disabled on the disk. */
    writeAcceleratorEnabled?: boolean;
    /** Specifies how the virtual machines in the scale set should be created.<br><br> The only allowed value is: **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described. */
    createOption: DiskCreateOptionTypes;
    /** Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set. */
    diffDiskSettings?: DiffDiskSettings;
    /** Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023 */
    diskSizeGB?: number;
    /** This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux** */
    osType?: OperatingSystemTypes;
    /** Specifies information about the unmanaged user image to base the scale set on. */
    image?: VirtualHardDisk;
    /** Specifies the container urls that are used to store operating system disks for the scale set. */
    vhdContainers?: string[];
    /** The managed disk parameters. */
    managedDisk?: VirtualMachineScaleSetManagedDiskParameters;
    /** Specifies whether OS Disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only). <br><br> Possible values: <br><br> **Delete** If this value is used, the OS disk is deleted when VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the OS disk is retained after VMSS Flex VM is deleted. <br><br> The default value is set to **Delete**. For an Ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for Ephemeral OS Disk. */
    deleteOption?: DiskDeleteOptionTypes;
}

/** Describes a virtual machine scale set OS profile. */
export declare interface VirtualMachineScaleSetOSProfile {
    /** Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long. */
    computerNamePrefix?: string;
    /** Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters */
    adminUsername?: string;
    /** Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection) */
    adminPassword?: string;
    /** Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init) */
    customData?: string;
    /** Specifies Windows operating system settings on the virtual machine. */
    windowsConfiguration?: WindowsConfiguration;
    /** Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros). */
    linuxConfiguration?: LinuxConfiguration;
    /** Specifies set of certificates that should be installed onto the virtual machines in the scale set. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows). */
    secrets?: VaultSecretGroup[];
    /** Specifies whether extension operations should be allowed on the virtual machine scale set. <br><br>This may only be set to False when no extensions are present on the virtual machine scale set. */
    allowExtensionOperations?: boolean;
}

/** Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration */
export declare interface VirtualMachineScaleSetPublicIPAddressConfiguration {
    /** The publicIP address configuration name. */
    name: string;
    /** Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible. */
    sku?: PublicIPAddressSku;
    /** The idle timeout of the public IP address. */
    idleTimeoutInMinutes?: number;
    /** The dns settings to be applied on the publicIP addresses . */
    dnsSettings?: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
    /** The list of IP tags associated with the public IP address. */
    ipTags?: VirtualMachineScaleSetIpTag[];
    /** The PublicIPPrefix from which to allocate publicIP addresses. */
    publicIPPrefix?: SubResource;
    /** Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'. */
    publicIPAddressVersion?: IPVersion;
    /** Specify what happens to the public IP when the VM is deleted */
    deleteOption?: DeleteOptions;
}

/** Describes a virtual machines scale sets network configuration's DNS settings. */
export declare interface VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings {
    /** The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created */
    domainNameLabel: string;
}

/** Describes a Virtual Machine Scale Set VM Reimage Parameters. */
export declare interface VirtualMachineScaleSetReimageParameters extends VirtualMachineScaleSetVMReimageParameters {
    /** The virtual machine scale set instance ids. Omitting the virtual machine scale set instance ids will result in the operation being performed on all virtual machines in the virtual machine scale set. */
    instanceIds?: string[];
}

/** Interface representing a VirtualMachineScaleSetRollingUpgrades. */
export declare interface VirtualMachineScaleSetRollingUpgrades {
    /**
     * Cancels the current virtual machine scale set rolling upgrade.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginCancel(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetRollingUpgradesCancelOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Cancels the current virtual machine scale set rolling upgrade.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginCancelAndWait(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetRollingUpgradesCancelOptionalParams): Promise<void>;
    /**
     * Starts a rolling upgrade to move all virtual machine scale set instances to the latest available
     * Platform Image OS version. Instances which are already running the latest available OS version are
     * not affected.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginStartOSUpgrade(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetRollingUpgradesStartOSUpgradeOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Starts a rolling upgrade to move all virtual machine scale set instances to the latest available
     * Platform Image OS version. Instances which are already running the latest available OS version are
     * not affected.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginStartOSUpgradeAndWait(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetRollingUpgradesStartOSUpgradeOptionalParams): Promise<void>;
    /**
     * Starts a rolling upgrade to move all extensions for all virtual machine scale set instances to the
     * latest available extension version. Instances which are already running the latest extension
     * versions are not affected.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginStartExtensionUpgrade(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetRollingUpgradesStartExtensionUpgradeOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Starts a rolling upgrade to move all extensions for all virtual machine scale set instances to the
     * latest available extension version. Instances which are already running the latest extension
     * versions are not affected.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginStartExtensionUpgradeAndWait(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetRollingUpgradesStartExtensionUpgradeOptionalParams): Promise<void>;
    /**
     * Gets the status of the latest virtual machine scale set rolling upgrade.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    getLatest(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetRollingUpgradesGetLatestOptionalParams): Promise<VirtualMachineScaleSetRollingUpgradesGetLatestResponse>;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetRollingUpgradesCancelOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetRollingUpgradesGetLatestOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getLatest operation. */
export declare type VirtualMachineScaleSetRollingUpgradesGetLatestResponse = RollingUpgradeStatusInfo;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetRollingUpgradesStartExtensionUpgradeOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetRollingUpgradesStartOSUpgradeOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Interface representing a VirtualMachineScaleSets. */
export declare interface VirtualMachineScaleSets {
    /**
     * Gets all the VM scale sets under the specified subscription for the specified location.
     * @param location The location for which VM scale sets under the subscription are queried.
     * @param options The options parameters.
     */
    listByLocation(location: string, options?: VirtualMachineScaleSetsListByLocationOptionalParams): PagedAsyncIterableIterator<VirtualMachineScaleSet>;
    /**
     * Gets a list of all VM scale sets under a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: VirtualMachineScaleSetsListOptionalParams): PagedAsyncIterableIterator<VirtualMachineScaleSet>;
    /**
     * Gets a list of all VM Scale Sets in the subscription, regardless of the associated resource group.
     * Use nextLink property in the response to get the next page of VM Scale Sets. Do this till nextLink
     * is null to fetch all the VM Scale Sets.
     * @param options The options parameters.
     */
    listAll(options?: VirtualMachineScaleSetsListAllOptionalParams): PagedAsyncIterableIterator<VirtualMachineScaleSet>;
    /**
     * Gets a list of SKUs available for your VM scale set, including the minimum and maximum VM instances
     * allowed for each SKU.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    listSkus(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsListSkusOptionalParams): PagedAsyncIterableIterator<VirtualMachineScaleSetSku>;
    /**
     * Gets list of OS upgrades on a VM scale set instance.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    listOSUpgradeHistory(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsGetOSUpgradeHistoryOptionalParams): PagedAsyncIterableIterator<UpgradeOperationHistoricalStatusInfo>;
    /**
     * Create or update a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set to create or update.
     * @param parameters The scale set object.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, vmScaleSetName: string, parameters: VirtualMachineScaleSet, options?: VirtualMachineScaleSetsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineScaleSetsCreateOrUpdateResponse>, VirtualMachineScaleSetsCreateOrUpdateResponse>>;
    /**
     * Create or update a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set to create or update.
     * @param parameters The scale set object.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, vmScaleSetName: string, parameters: VirtualMachineScaleSet, options?: VirtualMachineScaleSetsCreateOrUpdateOptionalParams): Promise<VirtualMachineScaleSetsCreateOrUpdateResponse>;
    /**
     * Update a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set to create or update.
     * @param parameters The scale set object.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, vmScaleSetName: string, parameters: VirtualMachineScaleSetUpdate, options?: VirtualMachineScaleSetsUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineScaleSetsUpdateResponse>, VirtualMachineScaleSetsUpdateResponse>>;
    /**
     * Update a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set to create or update.
     * @param parameters The scale set object.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, vmScaleSetName: string, parameters: VirtualMachineScaleSetUpdate, options?: VirtualMachineScaleSetsUpdateOptionalParams): Promise<VirtualMachineScaleSetsUpdateResponse>;
    /**
     * Deletes a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsDeleteOptionalParams): Promise<void>;
    /**
     * Display information about a virtual machine scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsGetOptionalParams): Promise<VirtualMachineScaleSetsGetResponse>;
    /**
     * Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and
     * releases the compute resources. You are not billed for the compute resources that this virtual
     * machine scale set deallocates.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginDeallocate(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsDeallocateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and
     * releases the compute resources. You are not billed for the compute resources that this virtual
     * machine scale set deallocates.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginDeallocateAndWait(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsDeallocateOptionalParams): Promise<void>;
    /**
     * Deletes virtual machines in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
     * @param options The options parameters.
     */
    beginDeleteInstances(resourceGroupName: string, vmScaleSetName: string, vmInstanceIDs: VirtualMachineScaleSetVMInstanceRequiredIDs, options?: VirtualMachineScaleSetsDeleteInstancesOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes virtual machines in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
     * @param options The options parameters.
     */
    beginDeleteInstancesAndWait(resourceGroupName: string, vmScaleSetName: string, vmInstanceIDs: VirtualMachineScaleSetVMInstanceRequiredIDs, options?: VirtualMachineScaleSetsDeleteInstancesOptionalParams): Promise<void>;
    /**
     * Gets the status of a VM scale set instance.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    getInstanceView(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsGetInstanceViewOptionalParams): Promise<VirtualMachineScaleSetsGetInstanceViewResponse>;
    /**
     * Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still
     * attached and you are getting charged for the resources. Instead, use deallocate to release resources
     * and avoid charges.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginPowerOff(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsPowerOffOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still
     * attached and you are getting charged for the resources. Instead, use deallocate to release resources
     * and avoid charges.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginPowerOffAndWait(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsPowerOffOptionalParams): Promise<void>;
    /**
     * Restarts one or more virtual machines in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsRestartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Restarts one or more virtual machines in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsRestartOptionalParams): Promise<void>;
    /**
     * Starts one or more virtual machines in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Starts one or more virtual machines in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsStartOptionalParams): Promise<void>;
    /**
     * Shuts down all the virtual machines in the virtual machine scale set, moves them to a new node, and
     * powers them back on.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginRedeploy(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsRedeployOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Shuts down all the virtual machines in the virtual machine scale set, moves them to a new node, and
     * powers them back on.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginRedeployAndWait(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsRedeployOptionalParams): Promise<void>;
    /**
     * Perform maintenance on one or more virtual machines in a VM scale set. Operation on instances which
     * are not eligible for perform maintenance will be failed. Please refer to best practices for more
     * details:
     * https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-maintenance-notifications
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginPerformMaintenance(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsPerformMaintenanceOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Perform maintenance on one or more virtual machines in a VM scale set. Operation on instances which
     * are not eligible for perform maintenance will be failed. Please refer to best practices for more
     * details:
     * https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-maintenance-notifications
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginPerformMaintenanceAndWait(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsPerformMaintenanceOptionalParams): Promise<void>;
    /**
     * Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
     * @param options The options parameters.
     */
    beginUpdateInstances(resourceGroupName: string, vmScaleSetName: string, vmInstanceIDs: VirtualMachineScaleSetVMInstanceRequiredIDs, options?: VirtualMachineScaleSetsUpdateInstancesOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
     * @param options The options parameters.
     */
    beginUpdateInstancesAndWait(resourceGroupName: string, vmScaleSetName: string, vmInstanceIDs: VirtualMachineScaleSetVMInstanceRequiredIDs, options?: VirtualMachineScaleSetsUpdateInstancesOptionalParams): Promise<void>;
    /**
     * Reimages (upgrade the operating system) one or more virtual machines in a VM scale set which don't
     * have a ephemeral OS disk, for virtual machines who have a ephemeral OS disk the virtual machine is
     * reset to initial state.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginReimage(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsReimageOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Reimages (upgrade the operating system) one or more virtual machines in a VM scale set which don't
     * have a ephemeral OS disk, for virtual machines who have a ephemeral OS disk the virtual machine is
     * reset to initial state.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginReimageAndWait(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsReimageOptionalParams): Promise<void>;
    /**
     * Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This
     * operation is only supported for managed disks.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginReimageAll(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsReimageAllOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This
     * operation is only supported for managed disks.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    beginReimageAllAndWait(resourceGroupName: string, vmScaleSetName: string, options?: VirtualMachineScaleSetsReimageAllOptionalParams): Promise<void>;
    /**
     * Manual platform update domain walk to update virtual machines in a service fabric virtual machine
     * scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param platformUpdateDomain The platform update domain for which a manual recovery walk is requested
     * @param options The options parameters.
     */
    forceRecoveryServiceFabricPlatformUpdateDomainWalk(resourceGroupName: string, vmScaleSetName: string, platformUpdateDomain: number, options?: VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkOptionalParams): Promise<VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse>;
    /**
     * Converts SinglePlacementGroup property to false for a existing virtual machine scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the virtual machine scale set to create or update.
     * @param parameters The input object for ConvertToSinglePlacementGroup API.
     * @param options The options parameters.
     */
    convertToSinglePlacementGroup(resourceGroupName: string, vmScaleSetName: string, parameters: VMScaleSetConvertToSinglePlacementGroupInput, options?: VirtualMachineScaleSetsConvertToSinglePlacementGroupOptionalParams): Promise<void>;
    /**
     * Changes ServiceState property for a given service
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the virtual machine scale set to create or update.
     * @param parameters The input object for SetOrchestrationServiceState API.
     * @param options The options parameters.
     */
    beginSetOrchestrationServiceState(resourceGroupName: string, vmScaleSetName: string, parameters: OrchestrationServiceStateInput, options?: VirtualMachineScaleSetsSetOrchestrationServiceStateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Changes ServiceState property for a given service
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the virtual machine scale set to create or update.
     * @param parameters The input object for SetOrchestrationServiceState API.
     * @param options The options parameters.
     */
    beginSetOrchestrationServiceStateAndWait(resourceGroupName: string, vmScaleSetName: string, parameters: OrchestrationServiceStateInput, options?: VirtualMachineScaleSetsSetOrchestrationServiceStateOptionalParams): Promise<void>;
}

/**
 * Defines values for VirtualMachineScaleSetScaleInRules. \
 * {@link KnownVirtualMachineScaleSetScaleInRules} can be used interchangeably with VirtualMachineScaleSetScaleInRules,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **OldestVM** \
 * **NewestVM**
 */
export declare type VirtualMachineScaleSetScaleInRules = string;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsConvertToSinglePlacementGroupOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualMachineScaleSetsCreateOrUpdateResponse = VirtualMachineScaleSet;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsDeallocateOptionalParams extends coreClient.OperationOptions {
    /** A list of virtual machine instance IDs from the VM scale set. */
    vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsDeleteInstancesOptionalParams extends coreClient.OperationOptions {
    /** Optional parameter to force delete virtual machines from the VM scale set. (Feature in Preview) */
    forceDeletion?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Optional parameter to force delete a VM scale set. (Feature in Preview) */
    forceDeletion?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkOptionalParams extends coreClient.OperationOptions {
    /** The zone in which the manual recovery walk is requested for cross zone virtual machine scale set */
    zone?: string;
    /** The placement group id for which the manual recovery walk is requested. */
    placementGroupId?: string;
}

/** Contains response data for the forceRecoveryServiceFabricPlatformUpdateDomainWalk operation. */
export declare type VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse = RecoveryWalkResponse;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsGetInstanceViewOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getInstanceView operation. */
export declare type VirtualMachineScaleSetsGetInstanceViewResponse = VirtualMachineScaleSetInstanceView;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. 'UserData' retrieves the UserData property of the VM scale set that was provided by the user during the VM scale set Create/Update operation */
    expand?: ExpandTypesForGetVMScaleSets;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsGetOSUpgradeHistoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getOSUpgradeHistoryNext operation. */
export declare type VirtualMachineScaleSetsGetOSUpgradeHistoryNextResponse = VirtualMachineScaleSetListOSUpgradeHistory;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsGetOSUpgradeHistoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getOSUpgradeHistory operation. */
export declare type VirtualMachineScaleSetsGetOSUpgradeHistoryResponse = VirtualMachineScaleSetListOSUpgradeHistory;

/** Contains response data for the get operation. */
export declare type VirtualMachineScaleSetsGetResponse = VirtualMachineScaleSet;

/** Describes an available virtual machine scale set sku. */
export declare interface VirtualMachineScaleSetSku {
    /**
     * The type of resource the sku applies to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceType?: string;
    /**
     * The Sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sku?: Sku;
    /**
     * Specifies the number of virtual machines in the scale set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capacity?: VirtualMachineScaleSetSkuCapacity;
}

/** Describes scaling information of a sku. */
export declare interface VirtualMachineScaleSetSkuCapacity {
    /**
     * The minimum capacity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly minimum?: number;
    /**
     * The maximum capacity that can be set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maximum?: number;
    /**
     * The default capacity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultCapacity?: number;
    /**
     * The scale type applicable to the sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scaleType?: VirtualMachineScaleSetSkuScaleType;
}

/** Defines values for VirtualMachineScaleSetSkuScaleType. */
export declare type VirtualMachineScaleSetSkuScaleType = "Automatic" | "None";

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsListAllNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAllNext operation. */
export declare type VirtualMachineScaleSetsListAllNextResponse = VirtualMachineScaleSetListWithLinkResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsListAllOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAll operation. */
export declare type VirtualMachineScaleSetsListAllResponse = VirtualMachineScaleSetListWithLinkResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsListByLocationNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByLocationNext operation. */
export declare type VirtualMachineScaleSetsListByLocationNextResponse = VirtualMachineScaleSetListResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsListByLocationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByLocation operation. */
export declare type VirtualMachineScaleSetsListByLocationResponse = VirtualMachineScaleSetListResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type VirtualMachineScaleSetsListNextResponse = VirtualMachineScaleSetListResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type VirtualMachineScaleSetsListResponse = VirtualMachineScaleSetListResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsListSkusNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSkusNext operation. */
export declare type VirtualMachineScaleSetsListSkusNextResponse = VirtualMachineScaleSetListSkusResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsListSkusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSkus operation. */
export declare type VirtualMachineScaleSetsListSkusResponse = VirtualMachineScaleSetListSkusResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsPerformMaintenanceOptionalParams extends coreClient.OperationOptions {
    /** A list of virtual machine instance IDs from the VM scale set. */
    vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsPowerOffOptionalParams extends coreClient.OperationOptions {
    /** A list of virtual machine instance IDs from the VM scale set. */
    vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
    /** The parameter to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Default value for this flag is false if not specified */
    skipShutdown?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsRedeployOptionalParams extends coreClient.OperationOptions {
    /** A list of virtual machine instance IDs from the VM scale set. */
    vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsReimageAllOptionalParams extends coreClient.OperationOptions {
    /** A list of virtual machine instance IDs from the VM scale set. */
    vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsReimageOptionalParams extends coreClient.OperationOptions {
    /** Parameters for Reimaging VM ScaleSet. */
    vmScaleSetReimageInput?: VirtualMachineScaleSetReimageParameters;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsRestartOptionalParams extends coreClient.OperationOptions {
    /** A list of virtual machine instance IDs from the VM scale set. */
    vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsSetOrchestrationServiceStateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsStartOptionalParams extends coreClient.OperationOptions {
    /** A list of virtual machine instance IDs from the VM scale set. */
    vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Describes a virtual machine scale set storage profile. */
export declare interface VirtualMachineScaleSetStorageProfile {
    /** Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. */
    imageReference?: ImageReference;
    /** Specifies information about the operating system disk used by the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). */
    osDisk?: VirtualMachineScaleSetOSDisk;
    /** Specifies the parameters that are used to add data disks to the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). */
    dataDisks?: VirtualMachineScaleSetDataDisk[];
    diskControllerType?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsUpdateInstancesOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VirtualMachineScaleSetsUpdateResponse = VirtualMachineScaleSet;

/** Describes a Virtual Machine Scale Set. */
export declare interface VirtualMachineScaleSetUpdate extends UpdateResource {
    /** The virtual machine scale set sku. */
    sku?: Sku;
    /** The purchase plan when deploying a virtual machine scale set from VM Marketplace images. */
    plan?: Plan;
    /** The identity of the virtual machine scale set, if configured. */
    identity?: VirtualMachineScaleSetIdentity;
    /** The upgrade policy. */
    upgradePolicy?: UpgradePolicy;
    /** Policy for automatic repairs. */
    automaticRepairsPolicy?: AutomaticRepairsPolicy;
    /** The virtual machine profile. */
    virtualMachineProfile?: VirtualMachineScaleSetUpdateVMProfile;
    /** Specifies whether the Virtual Machine Scale Set should be overprovisioned. */
    overprovision?: boolean;
    /** When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs. */
    doNotRunExtensionsOnOverprovisionedVMs?: boolean;
    /** When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if singlePlacementGroup is false, it may not be modified to true. */
    singlePlacementGroup?: boolean;
    /** Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type. */
    additionalCapabilities?: AdditionalCapabilities;
    /** Specifies the policies applied when scaling in Virtual Machines in the Virtual Machine Scale Set. */
    scaleInPolicy?: ScaleInPolicy;
    /** Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. <br><br>Minimum api-version: 2018-04-01. */
    proximityPlacementGroup?: SubResource;
}

/** Describes a virtual machine scale set network profile's IP configuration. NOTE: The subnet of a scale set may be modified as long as the original subnet and the new subnet are in the same virtual network */
export declare interface VirtualMachineScaleSetUpdateIPConfiguration extends SubResource {
    /** The IP configuration name. */
    name?: string;
    /** The subnet. */
    subnet?: ApiEntityReference;
    /** Specifies the primary IP Configuration in case the network interface has more than one IP Configuration. */
    primary?: boolean;
    /** The publicIPAddressConfiguration. */
    publicIPAddressConfiguration?: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration;
    /** Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'. */
    privateIPAddressVersion?: IPVersion;
    /** The application gateway backend address pools. */
    applicationGatewayBackendAddressPools?: SubResource[];
    /** Specifies an array of references to application security group. */
    applicationSecurityGroups?: SubResource[];
    /** The load balancer backend address pools. */
    loadBalancerBackendAddressPools?: SubResource[];
    /** The load balancer inbound nat pools. */
    loadBalancerInboundNatPools?: SubResource[];
}

/** Describes a virtual machine scale set network profile's network configurations. */
export declare interface VirtualMachineScaleSetUpdateNetworkConfiguration extends SubResource {
    /** The network configuration name. */
    name?: string;
    /** Whether this is a primary NIC on a virtual machine. */
    primary?: boolean;
    /** Specifies whether the network interface is accelerated networking-enabled. */
    enableAcceleratedNetworking?: boolean;
    /** Specifies whether the network interface is disabled for tcp state tracking. */
    disableTcpStateTracking?: boolean;
    /** Specifies whether the network interface is FPGA networking-enabled. */
    enableFpga?: boolean;
    /** The network security group. */
    networkSecurityGroup?: SubResource;
    /** The dns settings to be applied on the network interfaces. */
    dnsSettings?: VirtualMachineScaleSetNetworkConfigurationDnsSettings;
    /** The virtual machine scale set IP Configuration. */
    ipConfigurations?: VirtualMachineScaleSetUpdateIPConfiguration[];
    /** Whether IP forwarding enabled on this NIC. */
    enableIPForwarding?: boolean;
    /** Specify what happens to the network interface when the VM is deleted */
    deleteOption?: DeleteOptions;
}

/** Describes a virtual machine scale set network profile. */
export declare interface VirtualMachineScaleSetUpdateNetworkProfile {
    /** A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'. */
    healthProbe?: ApiEntityReference;
    /** The list of network configurations. */
    networkInterfaceConfigurations?: VirtualMachineScaleSetUpdateNetworkConfiguration[];
    /** specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations for Virtual Machine Scale Set with orchestration mode 'Flexible' */
    networkApiVersion?: NetworkApiVersion;
}

/** Describes virtual machine scale set operating system disk Update Object. This should be used for Updating VMSS OS Disk. */
export declare interface VirtualMachineScaleSetUpdateOSDisk {
    /** The caching type. */
    caching?: CachingTypes;
    /** Specifies whether writeAccelerator should be enabled or disabled on the disk. */
    writeAcceleratorEnabled?: boolean;
    /** Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023 */
    diskSizeGB?: number;
    /** The Source User Image VirtualHardDisk. This VirtualHardDisk will be copied before using it to attach to the Virtual Machine. If SourceImage is provided, the destination VirtualHardDisk should not exist. */
    image?: VirtualHardDisk;
    /** The list of virtual hard disk container uris. */
    vhdContainers?: string[];
    /** The managed disk parameters. */
    managedDisk?: VirtualMachineScaleSetManagedDiskParameters;
    /** Specifies whether OS Disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only). <br><br> Possible values: <br><br> **Delete** If this value is used, the OS disk is deleted when VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the OS disk is retained after VMSS Flex VM is deleted. <br><br> The default value is set to **Delete**. For an Ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for Ephemeral OS Disk. */
    deleteOption?: DiskDeleteOptionTypes;
}

/** Describes a virtual machine scale set OS profile. */
export declare interface VirtualMachineScaleSetUpdateOSProfile {
    /** A base-64 encoded string of custom data. */
    customData?: string;
    /** The Windows Configuration of the OS profile. */
    windowsConfiguration?: WindowsConfiguration;
    /** The Linux Configuration of the OS profile. */
    linuxConfiguration?: LinuxConfiguration;
    /** The List of certificates for addition to the VM. */
    secrets?: VaultSecretGroup[];
}

/** Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration */
export declare interface VirtualMachineScaleSetUpdatePublicIPAddressConfiguration {
    /** The publicIP address configuration name. */
    name?: string;
    /** The idle timeout of the public IP address. */
    idleTimeoutInMinutes?: number;
    /** The dns settings to be applied on the publicIP addresses . */
    dnsSettings?: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
    /** The PublicIPPrefix from which to allocate publicIP addresses. */
    publicIPPrefix?: SubResource;
    /** Specify what happens to the public IP when the VM is deleted */
    deleteOption?: DeleteOptions;
}

/** Describes a virtual machine scale set storage profile. */
export declare interface VirtualMachineScaleSetUpdateStorageProfile {
    /** The image reference. */
    imageReference?: ImageReference;
    /** The OS disk. */
    osDisk?: VirtualMachineScaleSetUpdateOSDisk;
    /** The data disks. */
    dataDisks?: VirtualMachineScaleSetDataDisk[];
    diskControllerType?: string;
}

/** Describes a virtual machine scale set virtual machine profile. */
export declare interface VirtualMachineScaleSetUpdateVMProfile {
    /** The virtual machine scale set OS profile. */
    osProfile?: VirtualMachineScaleSetUpdateOSProfile;
    /** The virtual machine scale set storage profile. */
    storageProfile?: VirtualMachineScaleSetUpdateStorageProfile;
    /** The virtual machine scale set network profile. */
    networkProfile?: VirtualMachineScaleSetUpdateNetworkProfile;
    /** The virtual machine scale set Security profile */
    securityProfile?: SecurityProfile;
    /** The virtual machine scale set diagnostics profile. */
    diagnosticsProfile?: DiagnosticsProfile;
    /** The virtual machine scale set extension profile. */
    extensionProfile?: VirtualMachineScaleSetExtensionProfile;
    /** The license type, which is for bring your own license scenario. */
    licenseType?: string;
    /** Specifies the billing related details of a Azure Spot VMSS. <br><br>Minimum api-version: 2019-03-01. */
    billingProfile?: BillingProfile;
    /** Specifies Scheduled Event related configurations. */
    scheduledEventsProfile?: ScheduledEventsProfile;
    /** UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. <br><br>Minimum api-version: 2021-03-01 */
    userData?: string;
    /** Specifies the hardware profile related details of a scale set. <br><br>Minimum api-version: 2021-11-01. */
    hardwareProfile?: VirtualMachineScaleSetHardwareProfile;
}

/** Describes a virtual machine scale set virtual machine. */
export declare interface VirtualMachineScaleSetVM extends Resource {
    /**
     * The virtual machine instance ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceId?: string;
    /**
     * The virtual machine SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sku?: Sku;
    /** Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**. */
    plan?: Plan;
    /**
     * The virtual machine child extension resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resources?: VirtualMachineExtension[];
    /**
     * The virtual machine zones.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zones?: string[];
    /** The identity of the virtual machine, if configured. */
    identity?: VirtualMachineIdentity;
    /**
     * Specifies whether the latest model has been applied to the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly latestModelApplied?: boolean;
    /**
     * Azure VM unique ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vmId?: string;
    /**
     * The virtual machine instance view.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: VirtualMachineScaleSetVMInstanceView;
    /** Specifies the hardware settings for the virtual machine. */
    hardwareProfile?: HardwareProfile;
    /** Specifies the storage settings for the virtual machine disks. */
    storageProfile?: StorageProfile;
    /** Specifies additional capabilities enabled or disabled on the virtual machine in the scale set. For instance: whether the virtual machine has the capability to support attaching managed data disks with UltraSSD_LRS storage account type. */
    additionalCapabilities?: AdditionalCapabilities;
    /** Specifies the operating system settings for the virtual machine. */
    osProfile?: OSProfile;
    /** Specifies the Security related profile settings for the virtual machine. */
    securityProfile?: SecurityProfile;
    /** Specifies the network interfaces of the virtual machine. */
    networkProfile?: NetworkProfile;
    /** Specifies the network profile configuration of the virtual machine. */
    networkProfileConfiguration?: VirtualMachineScaleSetVMNetworkProfileConfiguration;
    /** Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15. */
    diagnosticsProfile?: DiagnosticsProfile;
    /** Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Availability sets overview](https://docs.microsoft.com/azure/virtual-machines/availability-set-overview). <br><br> For more information on Azure planned maintenance, see [Maintenance and updates for Virtual Machines in Azure](https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates) <br><br> Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set. */
    availabilitySet?: SubResource;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15 */
    licenseType?: string;
    /**
     * Specifies whether the model applied to the virtual machine is the model of the virtual machine scale set or the customized model for the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly modelDefinitionApplied?: string;
    /** Specifies the protection policy of the virtual machine. */
    protectionPolicy?: VirtualMachineScaleSetVMProtectionPolicy;
    /** UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. <br><br>Minimum api-version: 2021-03-01 */
    userData?: string;
}

/** Describes a VMSS VM Extension. */
export declare interface VirtualMachineScaleSetVMExtension extends SubResourceReadOnly {
    /**
     * The name of the extension.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** How the extension handler should be forced to update even if the extension configuration has not changed. */
    forceUpdateTag?: string;
    /** The name of the extension handler publisher. */
    publisher?: string;
    /** Specifies the type of the extension; an example is "CustomScriptExtension". */
    typePropertiesType?: string;
    /** Specifies the version of the script handler. */
    typeHandlerVersion?: string;
    /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
    autoUpgradeMinorVersion?: boolean;
    /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. */
    enableAutomaticUpgrade?: boolean;
    /** Json formatted public settings for the extension. */
    settings?: any;
    /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
    protectedSettings?: any;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The virtual machine extension instance view. */
    instanceView?: VirtualMachineExtensionInstanceView;
    /** Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false. */
    suppressFailures?: boolean;
    /** The extensions protected settings that are passed by reference, and consumed from key vault */
    protectedSettingsFromKeyVault?: KeyVaultSecretReference;
}

/** Interface representing a VirtualMachineScaleSetVMExtensions. */
export declare interface VirtualMachineScaleSetVMExtensions {
    /**
     * The operation to create or update the VMSS VM extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, extensionParameters: VirtualMachineScaleSetVMExtension, options?: VirtualMachineScaleSetVMExtensionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse>, VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse>>;
    /**
     * The operation to create or update the VMSS VM extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, extensionParameters: VirtualMachineScaleSetVMExtension, options?: VirtualMachineScaleSetVMExtensionsCreateOrUpdateOptionalParams): Promise<VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse>;
    /**
     * The operation to update the VMSS VM extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, extensionParameters: VirtualMachineScaleSetVMExtensionUpdate, options?: VirtualMachineScaleSetVMExtensionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineScaleSetVMExtensionsUpdateResponse>, VirtualMachineScaleSetVMExtensionsUpdateResponse>>;
    /**
     * The operation to update the VMSS VM extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, extensionParameters: VirtualMachineScaleSetVMExtensionUpdate, options?: VirtualMachineScaleSetVMExtensionsUpdateOptionalParams): Promise<VirtualMachineScaleSetVMExtensionsUpdateResponse>;
    /**
     * The operation to delete the VMSS VM extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, options?: VirtualMachineScaleSetVMExtensionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to delete the VMSS VM extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, options?: VirtualMachineScaleSetVMExtensionsDeleteOptionalParams): Promise<void>;
    /**
     * The operation to get the VMSS VM extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, options?: VirtualMachineScaleSetVMExtensionsGetOptionalParams): Promise<VirtualMachineScaleSetVMExtensionsGetResponse>;
    /**
     * The operation to get all extensions of an instance in Virtual Machine Scaleset.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMExtensionsListOptionalParams): Promise<VirtualMachineScaleSetVMExtensionsListResponse>;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMExtensionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse = VirtualMachineScaleSetVMExtension;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMExtensionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMExtensionsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type VirtualMachineScaleSetVMExtensionsGetResponse = VirtualMachineScaleSetVMExtension;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMExtensionsListOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
}

/** Contains response data for the list operation. */
export declare type VirtualMachineScaleSetVMExtensionsListResponse = VirtualMachineScaleSetVMExtensionsListResult;

/** The List VMSS VM Extension operation response */
export declare interface VirtualMachineScaleSetVMExtensionsListResult {
    /** The list of VMSS VM extensions */
    value?: VirtualMachineScaleSetVMExtension[];
}

/** Extensions summary for virtual machines of a virtual machine scale set. */
export declare interface VirtualMachineScaleSetVMExtensionsSummary {
    /**
     * The extension name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The extensions information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statusesSummary?: VirtualMachineStatusCodeCount[];
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMExtensionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VirtualMachineScaleSetVMExtensionsUpdateResponse = VirtualMachineScaleSetVMExtension;

/** Describes a VMSS VM Extension. */
export declare interface VirtualMachineScaleSetVMExtensionUpdate extends SubResourceReadOnly {
    /**
     * The name of the extension.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** How the extension handler should be forced to update even if the extension configuration has not changed. */
    forceUpdateTag?: string;
    /** The name of the extension handler publisher. */
    publisher?: string;
    /** Specifies the type of the extension; an example is "CustomScriptExtension". */
    typePropertiesType?: string;
    /** Specifies the version of the script handler. */
    typeHandlerVersion?: string;
    /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
    autoUpgradeMinorVersion?: boolean;
    /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. */
    enableAutomaticUpgrade?: boolean;
    /** Json formatted public settings for the extension. */
    settings?: any;
    /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
    protectedSettings?: any;
    /** Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false. */
    suppressFailures?: boolean;
    /** The extensions protected settings that are passed by reference, and consumed from key vault */
    protectedSettingsFromKeyVault?: KeyVaultSecretReference;
}

/** Specifies a list of virtual machine instance IDs from the VM scale set. */
export declare interface VirtualMachineScaleSetVMInstanceIDs {
    /** The virtual machine scale set instance ids. Omitting the virtual machine scale set instance ids will result in the operation being performed on all virtual machines in the virtual machine scale set. */
    instanceIds?: string[];
}

/** Specifies a list of virtual machine instance IDs from the VM scale set. */
export declare interface VirtualMachineScaleSetVMInstanceRequiredIDs {
    /** The virtual machine scale set instance ids. */
    instanceIds: string[];
}

/** The instance view of a virtual machine scale set VM. */
export declare interface VirtualMachineScaleSetVMInstanceView {
    /** The Update Domain count. */
    platformUpdateDomain?: number;
    /** The Fault Domain count. */
    platformFaultDomain?: number;
    /** The Remote desktop certificate thumbprint. */
    rdpThumbPrint?: string;
    /** The VM Agent running on the virtual machine. */
    vmAgent?: VirtualMachineAgentInstanceView;
    /** The Maintenance Operation status on the virtual machine. */
    maintenanceRedeployStatus?: MaintenanceRedeployStatus;
    /** The disks information. */
    disks?: DiskInstanceView[];
    /** The extensions information. */
    extensions?: VirtualMachineExtensionInstanceView[];
    /**
     * The health status for the VM.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vmHealth?: VirtualMachineHealthStatus;
    /** Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor. */
    bootDiagnostics?: BootDiagnosticsInstanceView;
    /** The resource status information. */
    statuses?: InstanceViewStatus[];
    /**
     * Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. <br><br>Minimum api-version: 2020-06-01.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly assignedHost?: string;
    /** The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId. */
    placementGroupId?: string;
}

/** The List Virtual Machine Scale Set VMs operation response. */
export declare interface VirtualMachineScaleSetVMListResult {
    /** The list of virtual machine scale sets VMs. */
    value: VirtualMachineScaleSetVM[];
    /** The uri to fetch the next page of Virtual Machine Scale Set VMs. Call ListNext() with this to fetch the next page of VMSS VMs */
    nextLink?: string;
}

/** Describes a virtual machine scale set VM network profile. */
export declare interface VirtualMachineScaleSetVMNetworkProfileConfiguration {
    /** The list of network configurations. */
    networkInterfaceConfigurations?: VirtualMachineScaleSetNetworkConfiguration[];
}

/** Describes a virtual machine scale set virtual machine profile. */
export declare interface VirtualMachineScaleSetVMProfile {
    /** Specifies the operating system settings for the virtual machines in the scale set. */
    osProfile?: VirtualMachineScaleSetOSProfile;
    /** Specifies the storage settings for the virtual machine disks. */
    storageProfile?: VirtualMachineScaleSetStorageProfile;
    /** Specifies properties of the network interfaces of the virtual machines in the scale set. */
    networkProfile?: VirtualMachineScaleSetNetworkProfile;
    /** Specifies the Security related profile settings for the virtual machines in the scale set. */
    securityProfile?: SecurityProfile;
    /** Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15. */
    diagnosticsProfile?: DiagnosticsProfile;
    /** Specifies a collection of settings for extensions installed on virtual machines in the scale set. */
    extensionProfile?: VirtualMachineScaleSetExtensionProfile;
    /** Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15 */
    licenseType?: string;
    /** Specifies the priority for the virtual machines in the scale set. <br><br>Minimum api-version: 2017-10-30-preview */
    priority?: VirtualMachinePriorityTypes;
    /** Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview. */
    evictionPolicy?: VirtualMachineEvictionPolicyTypes;
    /** Specifies the billing related details of a Azure Spot VMSS. <br><br>Minimum api-version: 2019-03-01. */
    billingProfile?: BillingProfile;
    /** Specifies Scheduled Event related configurations. */
    scheduledEventsProfile?: ScheduledEventsProfile;
    /** UserData for the virtual machines in the scale set, which must be base-64 encoded. Customer should not pass any secrets in here. <br><br>Minimum api-version: 2021-03-01 */
    userData?: string;
    /** Specifies the capacity reservation related details of a scale set. <br><br>Minimum api-version: 2021-04-01. */
    capacityReservation?: CapacityReservationProfile;
    /** Specifies the gallery applications that should be made available to the VM/VMSS */
    applicationProfile?: ApplicationProfile;
    /** Specifies the hardware profile related details of a scale set. <br><br>Minimum api-version: 2021-11-01. */
    hardwareProfile?: VirtualMachineScaleSetHardwareProfile;
}

/** The protection policy of a virtual machine scale set VM. */
export declare interface VirtualMachineScaleSetVMProtectionPolicy {
    /** Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation. */
    protectFromScaleIn?: boolean;
    /** Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM. */
    protectFromScaleSetActions?: boolean;
}

/** Describes a Virtual Machine Scale Set VM Reimage Parameters. */
export declare interface VirtualMachineScaleSetVMReimageParameters extends VirtualMachineReimageParameters {
}

/** Interface representing a VirtualMachineScaleSetVMRunCommands. */
export declare interface VirtualMachineScaleSetVMRunCommands {
    /**
     * The operation to get all run commands of an instance in Virtual Machine Scaleset.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMRunCommandsListOptionalParams): PagedAsyncIterableIterator<VirtualMachineRunCommand>;
    /**
     * The operation to create or update the VMSS VM run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param runCommandName The name of the virtual machine run command.
     * @param runCommand Parameters supplied to the Create Virtual Machine RunCommand operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, vmScaleSetName: string, instanceId: string, runCommandName: string, runCommand: VirtualMachineRunCommand, options?: VirtualMachineScaleSetVMRunCommandsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineScaleSetVMRunCommandsCreateOrUpdateResponse>, VirtualMachineScaleSetVMRunCommandsCreateOrUpdateResponse>>;
    /**
     * The operation to create or update the VMSS VM run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param runCommandName The name of the virtual machine run command.
     * @param runCommand Parameters supplied to the Create Virtual Machine RunCommand operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, runCommandName: string, runCommand: VirtualMachineRunCommand, options?: VirtualMachineScaleSetVMRunCommandsCreateOrUpdateOptionalParams): Promise<VirtualMachineScaleSetVMRunCommandsCreateOrUpdateResponse>;
    /**
     * The operation to update the VMSS VM run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param runCommandName The name of the virtual machine run command.
     * @param runCommand Parameters supplied to the Update Virtual Machine RunCommand operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, vmScaleSetName: string, instanceId: string, runCommandName: string, runCommand: VirtualMachineRunCommandUpdate, options?: VirtualMachineScaleSetVMRunCommandsUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineScaleSetVMRunCommandsUpdateResponse>, VirtualMachineScaleSetVMRunCommandsUpdateResponse>>;
    /**
     * The operation to update the VMSS VM run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param runCommandName The name of the virtual machine run command.
     * @param runCommand Parameters supplied to the Update Virtual Machine RunCommand operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, runCommandName: string, runCommand: VirtualMachineRunCommandUpdate, options?: VirtualMachineScaleSetVMRunCommandsUpdateOptionalParams): Promise<VirtualMachineScaleSetVMRunCommandsUpdateResponse>;
    /**
     * The operation to delete the VMSS VM run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param runCommandName The name of the virtual machine run command.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, vmScaleSetName: string, instanceId: string, runCommandName: string, options?: VirtualMachineScaleSetVMRunCommandsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The operation to delete the VMSS VM run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param runCommandName The name of the virtual machine run command.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, runCommandName: string, options?: VirtualMachineScaleSetVMRunCommandsDeleteOptionalParams): Promise<void>;
    /**
     * The operation to get the VMSS VM run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param runCommandName The name of the virtual machine run command.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vmScaleSetName: string, instanceId: string, runCommandName: string, options?: VirtualMachineScaleSetVMRunCommandsGetOptionalParams): Promise<VirtualMachineScaleSetVMRunCommandsGetResponse>;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMRunCommandsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualMachineScaleSetVMRunCommandsCreateOrUpdateResponse = VirtualMachineRunCommand;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMRunCommandsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMRunCommandsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type VirtualMachineScaleSetVMRunCommandsGetResponse = VirtualMachineRunCommand;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMRunCommandsListNextOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
}

/** Contains response data for the listNext operation. */
export declare type VirtualMachineScaleSetVMRunCommandsListNextResponse = VirtualMachineRunCommandsListResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMRunCommandsListOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. */
    expand?: string;
}

/** Contains response data for the list operation. */
export declare type VirtualMachineScaleSetVMRunCommandsListResponse = VirtualMachineRunCommandsListResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMRunCommandsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VirtualMachineScaleSetVMRunCommandsUpdateResponse = VirtualMachineRunCommand;

/** Interface representing a VirtualMachineScaleSetVMs. */
export declare interface VirtualMachineScaleSetVMs {
    /**
     * Gets a list of all virtual machines in a VM scale sets.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineScaleSetName The name of the VM scale set.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, virtualMachineScaleSetName: string, options?: VirtualMachineScaleSetVMsListOptionalParams): PagedAsyncIterableIterator<VirtualMachineScaleSetVM>;
    /**
     * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginReimage(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsReimageOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginReimageAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsReimageOptionalParams): Promise<void>;
    /**
     * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This
     * operation is only supported for managed disks.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginReimageAll(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsReimageAllOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This
     * operation is only supported for managed disks.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginReimageAllAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsReimageAllOptionalParams): Promise<void>;
    /**
     * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and
     * releases the compute resources it uses. You are not billed for the compute resources of this virtual
     * machine once it is deallocated.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginDeallocate(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsDeallocateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and
     * releases the compute resources it uses. You are not billed for the compute resources of this virtual
     * machine once it is deallocated.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginDeallocateAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsDeallocateOptionalParams): Promise<void>;
    /**
     * Updates a virtual machine of a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set where the extension should be create or updated.
     * @param instanceId The instance ID of the virtual machine.
     * @param parameters Parameters supplied to the Update Virtual Machine Scale Sets VM operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, vmScaleSetName: string, instanceId: string, parameters: VirtualMachineScaleSetVM, options?: VirtualMachineScaleSetVMsUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineScaleSetVMsUpdateResponse>, VirtualMachineScaleSetVMsUpdateResponse>>;
    /**
     * Updates a virtual machine of a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set where the extension should be create or updated.
     * @param instanceId The instance ID of the virtual machine.
     * @param parameters Parameters supplied to the Update Virtual Machine Scale Sets VM operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, parameters: VirtualMachineScaleSetVM, options?: VirtualMachineScaleSetVMsUpdateOptionalParams): Promise<VirtualMachineScaleSetVMsUpdateResponse>;
    /**
     * Deletes a virtual machine from a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a virtual machine from a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsDeleteOptionalParams): Promise<void>;
    /**
     * Gets a virtual machine from a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsGetOptionalParams): Promise<VirtualMachineScaleSetVMsGetResponse>;
    /**
     * Gets the status of a virtual machine from a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    getInstanceView(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsGetInstanceViewOptionalParams): Promise<VirtualMachineScaleSetVMsGetInstanceViewResponse>;
    /**
     * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you
     * are getting charged for the resources. Instead, use deallocate to release resources and avoid
     * charges.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginPowerOff(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsPowerOffOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you
     * are getting charged for the resources. Instead, use deallocate to release resources and avoid
     * charges.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginPowerOffAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsPowerOffOptionalParams): Promise<void>;
    /**
     * Restarts a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsRestartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Restarts a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsRestartOptionalParams): Promise<void>;
    /**
     * Starts a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Starts a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsStartOptionalParams): Promise<void>;
    /**
     * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers
     * it back on.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginRedeploy(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsRedeployOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers
     * it back on.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginRedeployAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsRedeployOptionalParams): Promise<void>;
    /**
     * The operation to retrieve SAS URIs of boot diagnostic logs for a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    retrieveBootDiagnosticsData(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsRetrieveBootDiagnosticsDataOptionalParams): Promise<VirtualMachineScaleSetVMsRetrieveBootDiagnosticsDataResponse>;
    /**
     * Performs maintenance on a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginPerformMaintenance(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsPerformMaintenanceOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Performs maintenance on a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    beginPerformMaintenanceAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsPerformMaintenanceOptionalParams): Promise<void>;
    /**
     * The operation to simulate the eviction of spot virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param options The options parameters.
     */
    simulateEviction(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: VirtualMachineScaleSetVMsSimulateEvictionOptionalParams): Promise<void>;
    /**
     * Run command on a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param parameters Parameters supplied to the Run command operation.
     * @param options The options parameters.
     */
    beginRunCommand(resourceGroupName: string, vmScaleSetName: string, instanceId: string, parameters: RunCommandInput, options?: VirtualMachineScaleSetVMsRunCommandOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineScaleSetVMsRunCommandResponse>, VirtualMachineScaleSetVMsRunCommandResponse>>;
    /**
     * Run command on a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param parameters Parameters supplied to the Run command operation.
     * @param options The options parameters.
     */
    beginRunCommandAndWait(resourceGroupName: string, vmScaleSetName: string, instanceId: string, parameters: RunCommandInput, options?: VirtualMachineScaleSetVMsRunCommandOptionalParams): Promise<VirtualMachineScaleSetVMsRunCommandResponse>;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsDeallocateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Optional parameter to force delete a virtual machine from a VM scale set. (Feature in Preview) */
    forceDeletion?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsGetInstanceViewOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getInstanceView operation. */
export declare type VirtualMachineScaleSetVMsGetInstanceViewResponse = VirtualMachineScaleSetVMInstanceView;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. 'InstanceView' will retrieve the instance view of the virtual machine. 'UserData' will retrieve the UserData of the virtual machine. */
    expand?: InstanceViewTypes;
}

/** Contains response data for the get operation. */
export declare type VirtualMachineScaleSetVMsGetResponse = VirtualMachineScaleSetVM;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsListNextOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply to the operation. Allowed values are 'instanceView'. */
    expand?: string;
    /** The filter to apply to the operation. Allowed values are 'startswith(instanceView/statuses/code, 'PowerState') eq true', 'properties/latestModelApplied eq true', 'properties/latestModelApplied eq false'. */
    filter?: string;
    /** The list parameters. Allowed values are 'instanceView', 'instanceView/statuses'. */
    select?: string;
}

/** Contains response data for the listNext operation. */
export declare type VirtualMachineScaleSetVMsListNextResponse = VirtualMachineScaleSetVMListResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsListOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply to the operation. Allowed values are 'instanceView'. */
    expand?: string;
    /** The filter to apply to the operation. Allowed values are 'startswith(instanceView/statuses/code, 'PowerState') eq true', 'properties/latestModelApplied eq true', 'properties/latestModelApplied eq false'. */
    filter?: string;
    /** The list parameters. Allowed values are 'instanceView', 'instanceView/statuses'. */
    select?: string;
}

/** Contains response data for the list operation. */
export declare type VirtualMachineScaleSetVMsListResponse = VirtualMachineScaleSetVMListResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsPerformMaintenanceOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsPowerOffOptionalParams extends coreClient.OperationOptions {
    /** The parameter to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Default value for this flag is false if not specified */
    skipShutdown?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsRedeployOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsReimageAllOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsReimageOptionalParams extends coreClient.OperationOptions {
    /** Parameters for the Reimaging Virtual machine in ScaleSet. */
    vmScaleSetVMReimageInput?: VirtualMachineScaleSetVMReimageParameters;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsRestartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsRetrieveBootDiagnosticsDataOptionalParams extends coreClient.OperationOptions {
    /** Expiration duration in minutes for the SAS URIs with a value between 1 to 1440 minutes. <br><br>NOTE: If not specified, SAS URIs will be generated with a default expiration duration of 120 minutes. */
    sasUriExpirationTimeInMinutes?: number;
}

/** Contains response data for the retrieveBootDiagnosticsData operation. */
export declare type VirtualMachineScaleSetVMsRetrieveBootDiagnosticsDataResponse = RetrieveBootDiagnosticsDataResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsRunCommandOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the runCommand operation. */
export declare type VirtualMachineScaleSetVMsRunCommandResponse = RunCommandResult;

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsSimulateEvictionOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineScaleSetVMsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VirtualMachineScaleSetVMsUpdateResponse = VirtualMachineScaleSetVM;

/** Optional parameters. */
export declare interface VirtualMachinesCaptureOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the capture operation. */
export declare type VirtualMachinesCaptureResponse = VirtualMachineCaptureResult;

/** Optional parameters. */
export declare interface VirtualMachinesConvertToManagedDisksOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualMachinesCreateOrUpdateResponse = VirtualMachine;

/** Optional parameters. */
export declare interface VirtualMachinesDeallocateOptionalParams extends coreClient.OperationOptions {
    /** Optional parameter to hibernate a virtual machine. (Feature in Preview) */
    hibernate?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Optional parameter to force delete virtual machines. */
    forceDeletion?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesGeneralizeOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface VirtualMachinesGetOptionalParams extends coreClient.OperationOptions {
    /** The expand expression to apply on the operation. 'InstanceView' retrieves a snapshot of the runtime properties of the virtual machine that is managed by the platform and can change outside of control plane operations. 'UserData' retrieves the UserData property as part of the VM model view that was provided by the user during the VM Create/Update operation. */
    expand?: InstanceViewTypes;
}

/** Contains response data for the get operation. */
export declare type VirtualMachinesGetResponse = VirtualMachine;

/** Optional parameters. */
export declare interface VirtualMachinesInstallPatchesOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the installPatches operation. */
export declare type VirtualMachinesInstallPatchesResponse = VirtualMachineInstallPatchesResult;

/** Optional parameters. */
export declare interface VirtualMachinesInstanceViewOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the instanceView operation. */
export declare type VirtualMachinesInstanceViewResponse = VirtualMachineInstanceView;

/** Describes the properties of a VM size. */
export declare interface VirtualMachineSize {
    /** The name of the virtual machine size. */
    name?: string;
    /** The number of cores supported by the virtual machine size. For Constrained vCPU capable VM sizes, this number represents the total vCPUs of quota that the VM uses. For accurate vCPU count, please refer to https://docs.microsoft.com/azure/virtual-machines/constrained-vcpu or https://docs.microsoft.com/rest/api/compute/resourceskus/list */
    numberOfCores?: number;
    /** The OS disk size, in MB, allowed by the virtual machine size. */
    osDiskSizeInMB?: number;
    /** The resource disk size, in MB, allowed by the virtual machine size. */
    resourceDiskSizeInMB?: number;
    /** The amount of memory, in MB, supported by the virtual machine size. */
    memoryInMB?: number;
    /** The maximum number of data disks that can be attached to the virtual machine size. */
    maxDataDiskCount?: number;
}

/** The List Virtual Machine operation response. */
export declare interface VirtualMachineSizeListResult {
    /** The list of virtual machine sizes. */
    value?: VirtualMachineSize[];
}

/** Interface representing a VirtualMachineSizes. */
export declare interface VirtualMachineSizes {
    /**
     * This API is deprecated. Use [Resources
     * Skus](https://docs.microsoft.com/rest/api/compute/resourceskus/list)
     * @param location The location upon which virtual-machine-sizes is queried.
     * @param options The options parameters.
     */
    list(location: string, options?: VirtualMachineSizesListOptionalParams): PagedAsyncIterableIterator<VirtualMachineSize>;
}

/** Optional parameters. */
export declare interface VirtualMachineSizesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type VirtualMachineSizesListResponse = VirtualMachineSizeListResult;

/**
 * Defines values for VirtualMachineSizeTypes. \
 * {@link KnownVirtualMachineSizeTypes} can be used interchangeably with VirtualMachineSizeTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic_A0** \
 * **Basic_A1** \
 * **Basic_A2** \
 * **Basic_A3** \
 * **Basic_A4** \
 * **Standard_A0** \
 * **Standard_A1** \
 * **Standard_A2** \
 * **Standard_A3** \
 * **Standard_A4** \
 * **Standard_A5** \
 * **Standard_A6** \
 * **Standard_A7** \
 * **Standard_A8** \
 * **Standard_A9** \
 * **Standard_A10** \
 * **Standard_A11** \
 * **Standard_A1_v2** \
 * **Standard_A2_v2** \
 * **Standard_A4_v2** \
 * **Standard_A8_v2** \
 * **Standard_A2m_v2** \
 * **Standard_A4m_v2** \
 * **Standard_A8m_v2** \
 * **Standard_B1s** \
 * **Standard_B1ms** \
 * **Standard_B2s** \
 * **Standard_B2ms** \
 * **Standard_B4ms** \
 * **Standard_B8ms** \
 * **Standard_D1** \
 * **Standard_D2** \
 * **Standard_D3** \
 * **Standard_D4** \
 * **Standard_D11** \
 * **Standard_D12** \
 * **Standard_D13** \
 * **Standard_D14** \
 * **Standard_D1_v2** \
 * **Standard_D2_v2** \
 * **Standard_D3_v2** \
 * **Standard_D4_v2** \
 * **Standard_D5_v2** \
 * **Standard_D2_v3** \
 * **Standard_D4_v3** \
 * **Standard_D8_v3** \
 * **Standard_D16_v3** \
 * **Standard_D32_v3** \
 * **Standard_D64_v3** \
 * **Standard_D2s_v3** \
 * **Standard_D4s_v3** \
 * **Standard_D8s_v3** \
 * **Standard_D16s_v3** \
 * **Standard_D32s_v3** \
 * **Standard_D64s_v3** \
 * **Standard_D11_v2** \
 * **Standard_D12_v2** \
 * **Standard_D13_v2** \
 * **Standard_D14_v2** \
 * **Standard_D15_v2** \
 * **Standard_DS1** \
 * **Standard_DS2** \
 * **Standard_DS3** \
 * **Standard_DS4** \
 * **Standard_DS11** \
 * **Standard_DS12** \
 * **Standard_DS13** \
 * **Standard_DS14** \
 * **Standard_DS1_v2** \
 * **Standard_DS2_v2** \
 * **Standard_DS3_v2** \
 * **Standard_DS4_v2** \
 * **Standard_DS5_v2** \
 * **Standard_DS11_v2** \
 * **Standard_DS12_v2** \
 * **Standard_DS13_v2** \
 * **Standard_DS14_v2** \
 * **Standard_DS15_v2** \
 * **Standard_DS13-4_v2** \
 * **Standard_DS13-2_v2** \
 * **Standard_DS14-8_v2** \
 * **Standard_DS14-4_v2** \
 * **Standard_E2_v3** \
 * **Standard_E4_v3** \
 * **Standard_E8_v3** \
 * **Standard_E16_v3** \
 * **Standard_E32_v3** \
 * **Standard_E64_v3** \
 * **Standard_E2s_v3** \
 * **Standard_E4s_v3** \
 * **Standard_E8s_v3** \
 * **Standard_E16s_v3** \
 * **Standard_E32s_v3** \
 * **Standard_E64s_v3** \
 * **Standard_E32-16_v3** \
 * **Standard_E32-8s_v3** \
 * **Standard_E64-32s_v3** \
 * **Standard_E64-16s_v3** \
 * **Standard_F1** \
 * **Standard_F2** \
 * **Standard_F4** \
 * **Standard_F8** \
 * **Standard_F16** \
 * **Standard_F1s** \
 * **Standard_F2s** \
 * **Standard_F4s** \
 * **Standard_F8s** \
 * **Standard_F16s** \
 * **Standard_F2s_v2** \
 * **Standard_F4s_v2** \
 * **Standard_F8s_v2** \
 * **Standard_F16s_v2** \
 * **Standard_F32s_v2** \
 * **Standard_F64s_v2** \
 * **Standard_F72s_v2** \
 * **Standard_G1** \
 * **Standard_G2** \
 * **Standard_G3** \
 * **Standard_G4** \
 * **Standard_G5** \
 * **Standard_GS1** \
 * **Standard_GS2** \
 * **Standard_GS3** \
 * **Standard_GS4** \
 * **Standard_GS5** \
 * **Standard_GS4-8** \
 * **Standard_GS4-4** \
 * **Standard_GS5-16** \
 * **Standard_GS5-8** \
 * **Standard_H8** \
 * **Standard_H16** \
 * **Standard_H8m** \
 * **Standard_H16m** \
 * **Standard_H16r** \
 * **Standard_H16mr** \
 * **Standard_L4s** \
 * **Standard_L8s** \
 * **Standard_L16s** \
 * **Standard_L32s** \
 * **Standard_M64s** \
 * **Standard_M64ms** \
 * **Standard_M128s** \
 * **Standard_M128ms** \
 * **Standard_M64-32ms** \
 * **Standard_M64-16ms** \
 * **Standard_M128-64ms** \
 * **Standard_M128-32ms** \
 * **Standard_NC6** \
 * **Standard_NC12** \
 * **Standard_NC24** \
 * **Standard_NC24r** \
 * **Standard_NC6s_v2** \
 * **Standard_NC12s_v2** \
 * **Standard_NC24s_v2** \
 * **Standard_NC24rs_v2** \
 * **Standard_NC6s_v3** \
 * **Standard_NC12s_v3** \
 * **Standard_NC24s_v3** \
 * **Standard_NC24rs_v3** \
 * **Standard_ND6s** \
 * **Standard_ND12s** \
 * **Standard_ND24s** \
 * **Standard_ND24rs** \
 * **Standard_NV6** \
 * **Standard_NV12** \
 * **Standard_NV24**
 */
export declare type VirtualMachineSizeTypes = string;

/** Optional parameters. */
export declare interface VirtualMachinesListAllNextOptionalParams extends coreClient.OperationOptions {
    /** The system query option to filter VMs returned in the response. Allowed value is 'virtualMachineScaleSet/id' eq /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}' */
    filter?: string;
    /** statusOnly=true enables fetching run time status of all Virtual Machines in the subscription. */
    statusOnly?: string;
}

/** Contains response data for the listAllNext operation. */
export declare type VirtualMachinesListAllNextResponse = VirtualMachineListResult;

/** Optional parameters. */
export declare interface VirtualMachinesListAllOptionalParams extends coreClient.OperationOptions {
    /** The system query option to filter VMs returned in the response. Allowed value is 'virtualMachineScaleSet/id' eq /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}' */
    filter?: string;
    /** statusOnly=true enables fetching run time status of all Virtual Machines in the subscription. */
    statusOnly?: string;
}

/** Contains response data for the listAll operation. */
export declare type VirtualMachinesListAllResponse = VirtualMachineListResult;

/** Optional parameters. */
export declare interface VirtualMachinesListAvailableSizesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAvailableSizes operation. */
export declare type VirtualMachinesListAvailableSizesResponse = VirtualMachineSizeListResult;

/** Optional parameters. */
export declare interface VirtualMachinesListByLocationNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByLocationNext operation. */
export declare type VirtualMachinesListByLocationNextResponse = VirtualMachineListResult;

/** Optional parameters. */
export declare interface VirtualMachinesListByLocationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByLocation operation. */
export declare type VirtualMachinesListByLocationResponse = VirtualMachineListResult;

/** Optional parameters. */
export declare interface VirtualMachinesListNextOptionalParams extends coreClient.OperationOptions {
    /** The system query option to filter VMs returned in the response. Allowed value is 'virtualMachineScaleSet/id' eq /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}' */
    filter?: string;
}

/** Contains response data for the listNext operation. */
export declare type VirtualMachinesListNextResponse = VirtualMachineListResult;

/** Optional parameters. */
export declare interface VirtualMachinesListOptionalParams extends coreClient.OperationOptions {
    /** The system query option to filter VMs returned in the response. Allowed value is 'virtualMachineScaleSet/id' eq /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}' */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type VirtualMachinesListResponse = VirtualMachineListResult;

/** Describes the properties of a Virtual Machine software patch. */
export declare interface VirtualMachineSoftwarePatchProperties {
    /**
     * A unique identifier for the patch.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly patchId?: string;
    /**
     * The friendly name of the patch.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The version number of the patch. This property applies only to Linux patches.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * The KBID of the patch. Only applies to Windows patches.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kbId?: string;
    /**
     * The classification(s) of the patch as provided by the patch publisher.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly classifications?: string[];
    /**
     * Describes the reboot requirements of the patch.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rebootBehavior?: VMGuestPatchRebootBehavior;
    /**
     * The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activityId?: string;
    /**
     * The UTC timestamp when the repository published this patch.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publishedDate?: Date;
    /**
     * The UTC timestamp of the last update to this patch record.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedDateTime?: Date;
    /**
     * Describes the availability of a given patch.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly assessmentState?: PatchAssessmentState;
}

/** Optional parameters. */
export declare interface VirtualMachinesPerformMaintenanceOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesPowerOffOptionalParams extends coreClient.OperationOptions {
    /** The parameter to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Default value for this flag is false if not specified */
    skipShutdown?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesReapplyOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesRedeployOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesReimageOptionalParams extends coreClient.OperationOptions {
    /** Parameters supplied to the Reimage Virtual Machine operation. */
    parameters?: VirtualMachineReimageParameters;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesRestartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesRetrieveBootDiagnosticsDataOptionalParams extends coreClient.OperationOptions {
    /** Expiration duration in minutes for the SAS URIs with a value between 1 to 1440 minutes. <br><br>NOTE: If not specified, SAS URIs will be generated with a default expiration duration of 120 minutes. */
    sasUriExpirationTimeInMinutes?: number;
}

/** Contains response data for the retrieveBootDiagnosticsData operation. */
export declare type VirtualMachinesRetrieveBootDiagnosticsDataResponse = RetrieveBootDiagnosticsDataResult;

/** Optional parameters. */
export declare interface VirtualMachinesRunCommandOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the runCommand operation. */
export declare type VirtualMachinesRunCommandResponse = RunCommandResult;

/** Optional parameters. */
export declare interface VirtualMachinesSimulateEvictionOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface VirtualMachinesStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** The status code and count of the virtual machine scale set instance view status summary. */
export declare interface VirtualMachineStatusCodeCount {
    /**
     * The instance view status code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The number of instances having a particular status code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly count?: number;
}

/** Optional parameters. */
export declare interface VirtualMachinesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VirtualMachinesUpdateResponse = VirtualMachine;

/** Describes a Virtual Machine Update. */
export declare interface VirtualMachineUpdate extends UpdateResource {
    /** Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**. */
    plan?: Plan;
    /** The identity of the virtual machine, if configured. */
    identity?: VirtualMachineIdentity;
    /** The virtual machine zones. */
    zones?: string[];
    /** Specifies the hardware settings for the virtual machine. */
    hardwareProfile?: HardwareProfile;
    /** Specifies the storage settings for the virtual machine disks. */
    storageProfile?: StorageProfile;
    /** Specifies additional capabilities enabled or disabled on the virtual machine. */
    additionalCapabilities?: AdditionalCapabilities;
    /** Specifies the operating system settings used while creating the virtual machine. Some of the settings cannot be changed once VM is provisioned. */
    osProfile?: OSProfile;
    /** Specifies the network interfaces of the virtual machine. */
    networkProfile?: NetworkProfile;
    /** Specifies the Security related profile settings for the virtual machine. */
    securityProfile?: SecurityProfile;
    /** Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15. */
    diagnosticsProfile?: DiagnosticsProfile;
    /** Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Availability sets overview](https://docs.microsoft.com/azure/virtual-machines/availability-set-overview). <br><br> For more information on Azure planned maintenance, see [Maintenance and updates for Virtual Machines in Azure](https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates) <br><br> Currently, a VM can only be added to availability set at creation time. The availability set to which the VM is being added should be under the same resource group as the availability set resource. An existing VM cannot be added to an availability set. <br><br>This property cannot exist along with a non-null properties.virtualMachineScaleSet reference. */
    availabilitySet?: SubResource;
    /** Specifies information about the virtual machine scale set that the virtual machine should be assigned to. Virtual machines specified in the same virtual machine scale set are allocated to different nodes to maximize availability. Currently, a VM can only be added to virtual machine scale set at creation time. An existing VM cannot be added to a virtual machine scale set. <br><br>This property cannot exist along with a non-null properties.availabilitySet reference. <br><br>Minimum api‐version: 2019‐03‐01 */
    virtualMachineScaleSet?: SubResource;
    /** Specifies information about the proximity placement group that the virtual machine should be assigned to. <br><br>Minimum api-version: 2018-04-01. */
    proximityPlacementGroup?: SubResource;
    /** Specifies the priority for the virtual machine. <br><br>Minimum api-version: 2019-03-01 */
    priority?: VirtualMachinePriorityTypes;
    /** Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview. */
    evictionPolicy?: VirtualMachineEvictionPolicyTypes;
    /** Specifies the billing related details of a Azure Spot virtual machine. <br><br>Minimum api-version: 2019-03-01. */
    billingProfile?: BillingProfile;
    /** Specifies information about the dedicated host that the virtual machine resides in. <br><br>Minimum api-version: 2018-10-01. */
    host?: SubResource;
    /** Specifies information about the dedicated host group that the virtual machine resides in. <br><br>Minimum api-version: 2020-06-01. <br><br>NOTE: User cannot specify both host and hostGroup properties. */
    hostGroup?: SubResource;
    /**
     * The provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The virtual machine instance view.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceView?: VirtualMachineInstanceView;
    /** Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15 */
    licenseType?: string;
    /**
     * Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vmId?: string;
    /** Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). <br><br> Minimum api-version: 2020-06-01 */
    extensionsTimeBudget?: string;
    /** Specifies the scale set logical fault domain into which the Virtual Machine will be created. By default, the Virtual Machine will by automatically assigned to a fault domain that best maintains balance across available fault domains.<br><li>This is applicable only if the 'virtualMachineScaleSet' property of this Virtual Machine is set.<li>The Virtual Machine Scale Set that is referenced, must have 'platformFaultDomainCount' &gt; 1.<li>This property cannot be updated once the Virtual Machine is created.<li>Fault domain assignment can be viewed in the Virtual Machine Instance View.<br><br>Minimum api‐version: 2020‐12‐01 */
    platformFaultDomain?: number;
    /** Specifies Scheduled Event related configurations. */
    scheduledEventsProfile?: ScheduledEventsProfile;
    /** UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. <br><br>Minimum api-version: 2021-03-01 */
    userData?: string;
    /** Specifies information about the capacity reservation that is used to allocate virtual machine. <br><br>Minimum api-version: 2021-04-01. */
    capacityReservation?: CapacityReservationProfile;
    /** Specifies the gallery applications that should be made available to the VM/VMSS */
    applicationProfile?: ApplicationProfile;
    /**
     * Specifies the time at which the Virtual Machine resource was created.<br><br>Minimum api-version: 2021-11-01.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeCreated?: Date;
}

/** Specifies the security profile settings for the managed disk. <br><br> NOTE: It can only be set for Confidential VMs */
export declare interface VMDiskSecurityProfile {
    /** Specifies the EncryptionType of the managed disk. <br> It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, and VMGuestStateOnly for encryption of just the VMGuestState blob. <br><br> NOTE: It can be set for only Confidential VMs. */
    securityEncryptionType?: SecurityEncryptionTypes;
    /** Specifies the customer managed disk encryption set resource id for the managed disk that is used for Customer Managed Key encrypted ConfidentialVM OS Disk and VMGuest blob. */
    diskEncryptionSet?: DiskEncryptionSetParameters;
}

/**
 * Defines values for VmDiskTypes. \
 * {@link KnownVmDiskTypes} can be used interchangeably with VmDiskTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Unmanaged**
 */
export declare type VmDiskTypes = string;

/** Specifies the required information to reference a compute gallery application version */
export declare interface VMGalleryApplication {
    /** Optional, Specifies a passthrough value for more generic context. */
    tags?: string;
    /** Optional, Specifies the order in which the packages have to be installed */
    order?: number;
    /** Specifies the GalleryApplicationVersion resource id on the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version} */
    packageReferenceId: string;
    /** Optional, Specifies the uri to an azure blob that will replace the default configuration for the package if provided */
    configurationReference?: string;
    /** Optional, If true, any failure for any operation in the VmApplication will fail the deployment */
    treatFailureAsDeploymentFailure?: boolean;
    /** If set to true, when a new Gallery Application version is available in PIR/SIG, it will be automatically updated for the VM/VMSS */
    enableAutomaticUpgrade?: boolean;
}

/**
 * Defines values for VMGuestPatchClassificationLinux. \
 * {@link KnownVMGuestPatchClassificationLinux} can be used interchangeably with VMGuestPatchClassificationLinux,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical** \
 * **Security** \
 * **Other**
 */
export declare type VMGuestPatchClassificationLinux = string;

/**
 * Defines values for VMGuestPatchClassificationWindows. \
 * {@link KnownVMGuestPatchClassificationWindows} can be used interchangeably with VMGuestPatchClassificationWindows,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical** \
 * **Security** \
 * **UpdateRollUp** \
 * **FeaturePack** \
 * **ServicePack** \
 * **Definition** \
 * **Tools** \
 * **Updates**
 */
export declare type VMGuestPatchClassificationWindows = string;

/**
 * Defines values for VMGuestPatchRebootBehavior. \
 * {@link KnownVMGuestPatchRebootBehavior} can be used interchangeably with VMGuestPatchRebootBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **NeverReboots** \
 * **AlwaysRequiresReboot** \
 * **CanRequestReboot**
 */
export declare type VMGuestPatchRebootBehavior = string;

/**
 * Defines values for VMGuestPatchRebootSetting. \
 * {@link KnownVMGuestPatchRebootSetting} can be used interchangeably with VMGuestPatchRebootSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IfRequired** \
 * **Never** \
 * **Always**
 */
export declare type VMGuestPatchRebootSetting = string;

/**
 * Defines values for VMGuestPatchRebootStatus. \
 * {@link KnownVMGuestPatchRebootStatus} can be used interchangeably with VMGuestPatchRebootStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **NotNeeded** \
 * **Required** \
 * **Started** \
 * **Failed** \
 * **Completed**
 */
export declare type VMGuestPatchRebootStatus = string;

/** The List VmImages in EdgeZone operation response. */
export declare interface VmImagesInEdgeZoneListResult {
    /** The list of VMImages in EdgeZone */
    value?: VirtualMachineImageResource[];
    /** The URI to fetch the next page of VMImages in EdgeZone. Call ListNext() with this URI to fetch the next page of VmImages. */
    nextLink?: string;
}

export declare interface VMScaleSetConvertToSinglePlacementGroupInput {
    /** Id of the placement group in which you want future virtual machine instances to be placed. To query placement group Id, please use Virtual Machine Scale Set VMs - Get API. If not provided, the platform will choose one with maximum number of virtual machine instances. */
    activePlacementGroupId?: string;
}

/** Specifies VM Size Property settings on the virtual machine. */
export declare interface VMSizeProperties {
    /** Specifies the number of vCPUs available for the VM. <br><br> When this property is not specified in the request body the default behavior is to set it to the value of vCPUs available for that VM size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list) . */
    vCPUsAvailable?: number;
    /** Specifies the vCPU to physical core ratio. <br><br> When this property is not specified in the request body the default behavior is set to the value of vCPUsPerCore for the VM Size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list) <br><br> Setting this property to 1 also means that hyper-threading is disabled. */
    vCPUsPerCore?: number;
}

/** Specifies Windows operating system settings on the virtual machine. */
export declare interface WindowsConfiguration {
    /** Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later. */
    provisionVMAgent?: boolean;
    /** Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. <br><br> For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning. */
    enableAutomaticUpdates?: boolean;
    /** Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". <br><br> Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones). */
    timeZone?: string;
    /** Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. */
    additionalUnattendContent?: AdditionalUnattendContent[];
    /** [Preview Feature] Specifies settings related to VM Guest Patching on Windows. */
    patchSettings?: PatchSettings;
    /** Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. */
    winRM?: WinRMConfiguration;
    /** Indicates whether VMAgent Platform Updates is enabled for the Windows virtual machine. Default value is false. */
    enableVMAgentPlatformUpdates?: boolean;
}

/** Input for InstallPatches on a Windows VM, as directly received by the API */
export declare interface WindowsParameters {
    /** The update classifications to select when installing patches for Windows. */
    classificationsToInclude?: VMGuestPatchClassificationWindows[];
    /** Kbs to include in the patch operation */
    kbNumbersToInclude?: string[];
    /** Kbs to exclude in the patch operation */
    kbNumbersToExclude?: string[];
    /** Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true. */
    excludeKbsRequiringReboot?: boolean;
    /** This is used to install patches that were published on or before this given max published date. */
    maxPatchPublishDate?: Date;
}

/**
 * Defines values for WindowsPatchAssessmentMode. \
 * {@link KnownWindowsPatchAssessmentMode} can be used interchangeably with WindowsPatchAssessmentMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ImageDefault** \
 * **AutomaticByPlatform**
 */
export declare type WindowsPatchAssessmentMode = string;

/**
 * Defines values for WindowsVMGuestPatchAutomaticByPlatformRebootSetting. \
 * {@link KnownWindowsVMGuestPatchAutomaticByPlatformRebootSetting} can be used interchangeably with WindowsVMGuestPatchAutomaticByPlatformRebootSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **IfRequired** \
 * **Never** \
 * **Always**
 */
export declare type WindowsVMGuestPatchAutomaticByPlatformRebootSetting = string;

/** Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Windows patch settings. */
export declare interface WindowsVMGuestPatchAutomaticByPlatformSettings {
    /** Specifies the reboot setting for all AutomaticByPlatform patch installation operations. */
    rebootSetting?: WindowsVMGuestPatchAutomaticByPlatformRebootSetting;
}

/**
 * Defines values for WindowsVMGuestPatchMode. \
 * {@link KnownWindowsVMGuestPatchMode} can be used interchangeably with WindowsVMGuestPatchMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Manual** \
 * **AutomaticByOS** \
 * **AutomaticByPlatform**
 */
export declare type WindowsVMGuestPatchMode = string;

/** Describes Windows Remote Management configuration of the VM */
export declare interface WinRMConfiguration {
    /** The list of Windows Remote Management listeners */
    listeners?: WinRMListener[];
}

/** Describes Protocol and thumbprint of Windows Remote Management listener */
export declare interface WinRMListener {
    /** Specifies the protocol of WinRM listener. <br><br> Possible values are: <br>**http** <br><br> **https** */
    protocol?: ProtocolTypes;
    /** This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows). */
    certificateUrl?: string;
}

export { }
