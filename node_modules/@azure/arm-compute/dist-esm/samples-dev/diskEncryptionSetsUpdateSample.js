/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ComputeManagementClient } from "@azure/arm-compute";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Updates (patches) a disk encryption set.
 *
 * @summary Updates (patches) a disk encryption set.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Update_WithRotationToLatestKeyVersionEnabled.json
 */
function updateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledSetToTrueSucceeded() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskEncryptionSetName = "myDiskEncryptionSet";
        const diskEncryptionSet = {
            activeKey: {
                keyUrl: "https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"
            },
            encryptionType: "EncryptionAtRestWithCustomerKey",
            identity: { type: "SystemAssigned" },
            rotationToLatestKeyVersionEnabled: true
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.diskEncryptionSets.beginUpdateAndWait(resourceGroupName, diskEncryptionSetName, diskEncryptionSet);
        console.log(result);
    });
}
updateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledSetToTrueSucceeded().catch(console.error);
/**
 * This sample demonstrates how to Updates (patches) a disk encryption set.
 *
 * @summary Updates (patches) a disk encryption set.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Update_WithRotationToLatestKeyVersionEnabledInProgress.json
 */
function updateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledSetToTrueUpdating() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskEncryptionSetName = "myDiskEncryptionSet";
        const diskEncryptionSet = {
            activeKey: {
                keyUrl: "https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"
            },
            encryptionType: "EncryptionAtRestWithCustomerKey",
            identity: { type: "SystemAssigned" },
            rotationToLatestKeyVersionEnabled: true
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.diskEncryptionSets.beginUpdateAndWait(resourceGroupName, diskEncryptionSetName, diskEncryptionSet);
        console.log(result);
    });
}
updateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledSetToTrueUpdating().catch(console.error);
/**
 * This sample demonstrates how to Updates (patches) a disk encryption set.
 *
 * @summary Updates (patches) a disk encryption set.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Update.json
 */
function updateADiskEncryptionSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskEncryptionSetName = "myDiskEncryptionSet";
        const diskEncryptionSet = {
            activeKey: {
                keyUrl: "https://myvmvault.vault-int.azure-int.net/keys/keyName/keyVersion",
                sourceVault: {
                    id: "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"
                }
            },
            encryptionType: "EncryptionAtRestWithCustomerKey",
            tags: { department: "Development", project: "Encryption" }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.diskEncryptionSets.beginUpdateAndWait(resourceGroupName, diskEncryptionSetName, diskEncryptionSet);
        console.log(result);
    });
}
updateADiskEncryptionSet().catch(console.error);
//# sourceMappingURL=diskEncryptionSetsUpdateSample.js.map