/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ComputeManagementClient } from "@azure/arm-compute";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Create or update a cloud service. Please note some properties can be set only during cloud service creation.
 *
 * @summary Create or update a cloud service. Please note some properties can be set only during cloud service creation.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-04-04/examples/CloudService_Create_WithMultiRole.json
 */
function createNewCloudServiceWithMultipleRoles() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "ConstosoRG";
        const cloudServiceName = "{cs-name}";
        const parameters = {
            location: "westus",
            properties: {
                configuration: "{ServiceConfiguration}",
                networkProfile: {
                    loadBalancerConfigurations: [
                        {
                            name: "contosolb",
                            properties: {
                                frontendIPConfigurations: [
                                    {
                                        name: "contosofe",
                                        properties: {
                                            publicIPAddress: {
                                                id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                packageUrl: "{PackageUrl}",
                roleProfile: {
                    roles: [
                        {
                            name: "ContosoFrontend",
                            sku: { name: "Standard_D1_v2", capacity: 1, tier: "Standard" }
                        },
                        {
                            name: "ContosoBackend",
                            sku: { name: "Standard_D1_v2", capacity: 1, tier: "Standard" }
                        }
                    ]
                },
                upgradeMode: "Auto"
            }
        };
        const options = { parameters };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.cloudServices.beginCreateOrUpdateAndWait(resourceGroupName, cloudServiceName, options);
        console.log(result);
    });
}
createNewCloudServiceWithMultipleRoles().catch(console.error);
/**
 * This sample demonstrates how to Create or update a cloud service. Please note some properties can be set only during cloud service creation.
 *
 * @summary Create or update a cloud service. Please note some properties can be set only during cloud service creation.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-04-04/examples/CloudService_Create_WithSingleRole.json
 */
function createNewCloudServiceWithSingleRole() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "ConstosoRG";
        const cloudServiceName = "{cs-name}";
        const parameters = {
            location: "westus",
            properties: {
                configuration: "{ServiceConfiguration}",
                networkProfile: {
                    loadBalancerConfigurations: [
                        {
                            name: "myLoadBalancer",
                            properties: {
                                frontendIPConfigurations: [
                                    {
                                        name: "myfe",
                                        properties: {
                                            publicIPAddress: {
                                                id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                packageUrl: "{PackageUrl}",
                roleProfile: {
                    roles: [
                        {
                            name: "ContosoFrontend",
                            sku: { name: "Standard_D1_v2", capacity: 1, tier: "Standard" }
                        }
                    ]
                },
                upgradeMode: "Auto"
            }
        };
        const options = { parameters };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.cloudServices.beginCreateOrUpdateAndWait(resourceGroupName, cloudServiceName, options);
        console.log(result);
    });
}
createNewCloudServiceWithSingleRole().catch(console.error);
/**
 * This sample demonstrates how to Create or update a cloud service. Please note some properties can be set only during cloud service creation.
 *
 * @summary Create or update a cloud service. Please note some properties can be set only during cloud service creation.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-04-04/examples/CloudService_Create_WithSingleRoleAndCertificate.json
 */
function createNewCloudServiceWithSingleRoleAndCertificateFromKeyVault() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "ConstosoRG";
        const cloudServiceName = "{cs-name}";
        const parameters = {
            location: "westus",
            properties: {
                configuration: "{ServiceConfiguration}",
                networkProfile: {
                    loadBalancerConfigurations: [
                        {
                            name: "contosolb",
                            properties: {
                                frontendIPConfigurations: [
                                    {
                                        name: "contosofe",
                                        properties: {
                                            publicIPAddress: {
                                                id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                osProfile: {
                    secrets: [
                        {
                            sourceVault: {
                                id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}"
                            },
                            vaultCertificates: [
                                {
                                    certificateUrl: "https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}"
                                }
                            ]
                        }
                    ]
                },
                packageUrl: "{PackageUrl}",
                roleProfile: {
                    roles: [
                        {
                            name: "ContosoFrontend",
                            sku: { name: "Standard_D1_v2", capacity: 1, tier: "Standard" }
                        }
                    ]
                },
                upgradeMode: "Auto"
            }
        };
        const options = { parameters };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.cloudServices.beginCreateOrUpdateAndWait(resourceGroupName, cloudServiceName, options);
        console.log(result);
    });
}
createNewCloudServiceWithSingleRoleAndCertificateFromKeyVault().catch(console.error);
/**
 * This sample demonstrates how to Create or update a cloud service. Please note some properties can be set only during cloud service creation.
 *
 * @summary Create or update a cloud service. Please note some properties can be set only during cloud service creation.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-04-04/examples/CloudService_Create_WithSingleRoleAndRDP.json
 */
function createNewCloudServiceWithSingleRoleAndRdpExtension() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "ConstosoRG";
        const cloudServiceName = "{cs-name}";
        const parameters = {
            location: "westus",
            properties: {
                configuration: "{ServiceConfiguration}",
                extensionProfile: {
                    extensions: [
                        {
                            name: "RDPExtension",
                            properties: {
                                type: "RDP",
                                autoUpgradeMinorVersion: false,
                                protectedSettings: "<PrivateConfig><Password>{password}</Password></PrivateConfig>",
                                publisher: "Microsoft.Windows.Azure.Extensions",
                                settings: "<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>",
                                typeHandlerVersion: "1.2"
                            }
                        }
                    ]
                },
                networkProfile: {
                    loadBalancerConfigurations: [
                        {
                            name: "contosolb",
                            properties: {
                                frontendIPConfigurations: [
                                    {
                                        name: "contosofe",
                                        properties: {
                                            publicIPAddress: {
                                                id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                packageUrl: "{PackageUrl}",
                roleProfile: {
                    roles: [
                        {
                            name: "ContosoFrontend",
                            sku: { name: "Standard_D1_v2", capacity: 1, tier: "Standard" }
                        }
                    ]
                },
                upgradeMode: "Auto"
            }
        };
        const options = { parameters };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.cloudServices.beginCreateOrUpdateAndWait(resourceGroupName, cloudServiceName, options);
        console.log(result);
    });
}
createNewCloudServiceWithSingleRoleAndRdpExtension().catch(console.error);
//# sourceMappingURL=cloudServicesCreateOrUpdateSample.js.map