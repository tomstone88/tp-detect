/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ComputeManagementClient } from "@azure/arm-compute";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used to create similar VMs.
 *
 * @summary Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used to create similar VMs.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2022-08-01/examples/virtualMachineExamples/VirtualMachines_Capture_MaximumSet_Gen.json
 */
function virtualMachinesCaptureMaximumSetGen() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "rgcompute";
        const vmName = "aaaaaaaaaaaaaaaaaaaa";
        const parameters = {
            destinationContainerName: "aaaaaaa",
            overwriteVhds: true,
            vhdPrefix: "aaaaaaaaa"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.virtualMachines.beginCaptureAndWait(resourceGroupName, vmName, parameters);
        console.log(result);
    });
}
virtualMachinesCaptureMaximumSetGen().catch(console.error);
/**
 * This sample demonstrates how to Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used to create similar VMs.
 *
 * @summary Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used to create similar VMs.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2022-08-01/examples/virtualMachineExamples/VirtualMachines_Capture_MinimumSet_Gen.json
 */
function virtualMachinesCaptureMinimumSetGen() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "rgcompute";
        const vmName = "aaaaaaaaaaaaa";
        const parameters = {
            destinationContainerName: "aaaaaaa",
            overwriteVhds: true,
            vhdPrefix: "aaaaaaaaa"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.virtualMachines.beginCaptureAndWait(resourceGroupName, vmName, parameters);
        console.log(result);
    });
}
virtualMachinesCaptureMinimumSetGen().catch(console.error);
//# sourceMappingURL=virtualMachinesCaptureSample.js.map