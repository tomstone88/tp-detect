/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ComputeManagementClient } from "@azure/arm-compute";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Retrieves information about the model view or the instance view of a virtual machine.
 *
 * @summary Retrieves information about the model view or the instance view of a virtual machine.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2022-08-01/examples/virtualMachineExamples/VirtualMachine_Get.json
 */
function getAVirtualMachine() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const vmName = "myVM";
        const expand = "userData";
        const options = { expand };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.virtualMachines.get(resourceGroupName, vmName, options);
        console.log(result);
    });
}
getAVirtualMachine().catch(console.error);
/**
 * This sample demonstrates how to Retrieves information about the model view or the instance view of a virtual machine.
 *
 * @summary Retrieves information about the model view or the instance view of a virtual machine.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2022-08-01/examples/virtualMachineExamples/VirtualMachine_Get_AutoPlacedOnDedicatedHostGroup.json
 */
function getAVirtualMachinePlacedOnADedicatedHostGroupThroughAutomaticPlacement() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const vmName = "myVM";
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.virtualMachines.get(resourceGroupName, vmName);
        console.log(result);
    });
}
getAVirtualMachinePlacedOnADedicatedHostGroupThroughAutomaticPlacement().catch(console.error);
/**
 * This sample demonstrates how to Retrieves information about the model view or the instance view of a virtual machine.
 *
 * @summary Retrieves information about the model view or the instance view of a virtual machine.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2022-08-01/examples/virtualMachineExamples/VirtualMachine_Get_WithDiskControllerType.json
 */
function getAVirtualMachineWithDiskControllerTypeProperties() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const vmName = "myVM";
        const expand = "userData";
        const options = { expand };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.virtualMachines.get(resourceGroupName, vmName, options);
        console.log(result);
    });
}
getAVirtualMachineWithDiskControllerTypeProperties().catch(console.error);
/**
 * This sample demonstrates how to Retrieves information about the model view or the instance view of a virtual machine.
 *
 * @summary Retrieves information about the model view or the instance view of a virtual machine.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2022-08-01/examples/virtualMachineExamples/VirtualMachine_Get_WithVMSizeProperties.json
 */
function getAVirtualMachineWithVMSizeProperties() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const vmName = "myVM";
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.virtualMachines.get(resourceGroupName, vmName);
        console.log(result);
    });
}
getAVirtualMachineWithVMSizeProperties().catch(console.error);
//# sourceMappingURL=virtualMachinesGetSample.js.map