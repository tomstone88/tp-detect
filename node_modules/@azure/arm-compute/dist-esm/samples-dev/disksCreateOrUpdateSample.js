/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ComputeManagementClient } from "@azure/arm-compute";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_ConfidentialVMSupportedDiskEncryptedWithCMK.json
 */
function createAConfidentialVMSupportedDiskEncryptedWithCustomerManagedKey() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscriptionId}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "FromImage",
                imageReference: {
                    id: "/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"
                }
            },
            location: "West US",
            osType: "Windows",
            securityProfile: {
                secureVMDiskEncryptionSetId: "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}",
                securityType: "ConfidentialVM_DiskEncryptedWithCustomerKey"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAConfidentialVMSupportedDiskEncryptedWithCustomerManagedKey().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_WithDiskAccess.json
 */
function createAManagedDiskAndAssociateWithDiskAccessResource() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty" },
            diskAccessId: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}",
            diskSizeGB: 200,
            location: "West US",
            networkAccessPolicy: "AllowPrivate"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskAndAssociateWithDiskAccessResource().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_WithDiskEncryptionSet.json
 */
function createAManagedDiskAndAssociateWithDiskEncryptionSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty" },
            diskSizeGB: 200,
            encryption: {
                diskEncryptionSetId: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"
            },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskAndAssociateWithDiskEncryptionSet().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_ByCopyingASnapshot.json
 */
function createAManagedDiskByCopyingASnapshot() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "Copy",
                sourceResourceId: "subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"
            },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskByCopyingASnapshot().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_ByImportingBlobFromADifferentSubscription.json
 */
function createAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "Import",
                sourceUri: "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                storageAccountId: "subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"
            },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_ByImportingBlobFromTheSameSubscription.json
 */
function createAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "Import",
                sourceUri: "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"
            },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_FromImportSecure.json
 */
function createAManagedDiskFromImportSecureCreateOption() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "ImportSecure",
                securityDataUri: "https://mystorageaccount.blob.core.windows.net/osimages/vmgs.vhd",
                sourceUri: "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                storageAccountId: "subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"
            },
            location: "West US",
            osType: "Windows",
            securityProfile: {
                securityType: "ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskFromImportSecureCreateOption().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_FromUploadPreparedSecure.json
 */
function createAManagedDiskFromUploadPreparedSecureCreateOption() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "UploadPreparedSecure",
                uploadSizeBytes: 10737418752
            },
            location: "West US",
            osType: "Windows",
            securityProfile: { securityType: "TrustedLaunch" }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskFromUploadPreparedSecureCreateOption().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_FromAPlatformImage.json
 */
function createAManagedDiskFromAPlatformImage() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscriptionId}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "FromImage",
                imageReference: {
                    id: "/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"
                }
            },
            location: "West US",
            osType: "Windows"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskFromAPlatformImage().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_FromAnAzureComputeGalleryCommunityImage.json
 */
function createAManagedDiskFromAnAzureComputeGalleryCommunityImage() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscriptionId}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "FromImage",
                galleryImageReference: {
                    communityGalleryImageId: "/CommunityGalleries/{communityGalleryPublicGalleryName}/Images/{imageName}/Versions/1.0.0"
                }
            },
            location: "West US",
            osType: "Windows"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskFromAnAzureComputeGalleryCommunityImage().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_FromAnAzureComputeGalleryDirectSharedImage.json
 */
function createAManagedDiskFromAnAzureComputeGalleryDirectSharedImage() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscriptionId}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "FromImage",
                galleryImageReference: {
                    sharedGalleryImageId: "/SharedGalleries/{sharedGalleryUniqueName}/Images/{imageName}/Versions/1.0.0"
                }
            },
            location: "West US",
            osType: "Windows"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskFromAnAzureComputeGalleryDirectSharedImage().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_FromAnAzureComputeGalleryImage.json
 */
function createAManagedDiskFromAnAzureComputeGalleryImage() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscriptionId}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "FromImage",
                galleryImageReference: {
                    id: "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Providers/Microsoft.Compute/Galleries/{galleryName}/Images/{imageName}/Versions/1.0.0"
                }
            },
            location: "West US",
            osType: "Windows"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskFromAnAzureComputeGalleryImage().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_FromAnExistingManagedDisk.json
 */
function createAManagedDiskFromAnExistingManagedDiskInTheSameOrDifferentSubscription() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk2";
        const disk = {
            creationData: {
                createOption: "Copy",
                sourceResourceId: "subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk1"
            },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskFromAnExistingManagedDiskInTheSameOrDifferentSubscription().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_WithDataAccessAuthMode.json
 */
function createAManagedDiskWithDataAccessAuthMode() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty" },
            dataAccessAuthMode: "AzureActiveDirectory",
            diskSizeGB: 200,
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskWithDataAccessAuthMode().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_WithOptimizedForFrequentAttach.json
 */
function createAManagedDiskWithOptimizedForFrequentAttach() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty" },
            diskSizeGB: 200,
            location: "West US",
            optimizedForFrequentAttach: true
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskWithOptimizedForFrequentAttach().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_PerformancePlus.json
 */
function createAManagedDiskWithPerformancePlus() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Upload", performancePlus: true },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskWithPerformancePlus().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_WithPremiumV2_LRSAccountType.json
 */
function createAManagedDiskWithPremiumV2AccountType() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myPremiumV2Disk";
        const disk = {
            creationData: { createOption: "Empty" },
            diskIopsReadWrite: 125,
            diskMBpsReadWrite: 3000,
            diskSizeGB: 200,
            location: "West US",
            sku: { name: "PremiumV2_LRS" }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskWithPremiumV2AccountType().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_WithSecurityProfile.json
 */
function createAManagedDiskWithSecurityProfile() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "FromImage",
                imageReference: {
                    id: "/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"
                }
            },
            location: "North Central US",
            osType: "Windows",
            securityProfile: { securityType: "TrustedLaunch" }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskWithSecurityProfile().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_WithSSDZRSAccountType.json
 */
function createAManagedDiskWithSsdZrsAccountType() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty" },
            diskSizeGB: 200,
            location: "West US",
            sku: { name: "Premium_ZRS" }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskWithSsdZrsAccountType().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_WithUltraSSD_ReadOnly.json
 */
function createAManagedDiskWithUltraAccountTypeWithReadOnlyPropertySet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myUltraReadOnlyDisk";
        const disk = {
            creationData: { createOption: "Empty", logicalSectorSize: 4096 },
            diskIopsReadWrite: 125,
            diskMBpsReadWrite: 3000,
            diskSizeGB: 200,
            encryption: { type: "EncryptionAtRestWithPlatformKey" },
            location: "West US",
            sku: { name: "UltraSSD_LRS" }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskWithUltraAccountTypeWithReadOnlyPropertySet().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_UploadDisk.json
 */
function createAManagedUploadDisk() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Upload", uploadSizeBytes: 10737418752 },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedUploadDisk().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_InExtendedLocation.json
 */
function createAnEmptyManagedDiskInExtendedLocation() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty" },
            diskSizeGB: 200,
            extendedLocation: { name: "{edge-zone-id}", type: "EdgeZone" },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAnEmptyManagedDiskInExtendedLocation().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_Empty.json
 */
function createAnEmptyManagedDisk() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty" },
            diskSizeGB: 200,
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAnEmptyManagedDisk().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2022-07-02/examples/diskExamples/Disk_Create_WithLogicalSectorSize.json
 */
function createAnUltraManagedDiskWithLogicalSectorSize512E() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty", logicalSectorSize: 512 },
            diskSizeGB: 200,
            location: "West US",
            sku: { name: "UltraSSD_LRS" }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAnUltraManagedDiskWithLogicalSectorSize512E().catch(console.error);
//# sourceMappingURL=disksCreateOrUpdateSample.js.map