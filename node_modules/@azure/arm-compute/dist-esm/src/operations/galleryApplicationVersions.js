/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing GalleryApplicationVersions operations. */
export class GalleryApplicationVersionsImpl {
    /**
     * Initialize a new instance of the class GalleryApplicationVersions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List gallery Application Versions in a gallery Application Definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the Shared Application Gallery Application Definition from
     *                               which the Application Versions are to be listed.
     * @param options The options parameters.
     */
    listByGalleryApplication(resourceGroupName, galleryName, galleryApplicationName, options) {
        const iter = this.listByGalleryApplicationPagingAll(resourceGroupName, galleryName, galleryApplicationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByGalleryApplicationPagingPage(resourceGroupName, galleryName, galleryApplicationName, options);
            }
        };
    }
    listByGalleryApplicationPagingPage(resourceGroupName, galleryName, galleryApplicationName, options) {
        return __asyncGenerator(this, arguments, function* listByGalleryApplicationPagingPage_1() {
            let result = yield __await(this._listByGalleryApplication(resourceGroupName, galleryName, galleryApplicationName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listByGalleryApplicationNext(resourceGroupName, galleryName, galleryApplicationName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listByGalleryApplicationPagingAll(resourceGroupName, galleryName, galleryApplicationName, options) {
        return __asyncGenerator(this, arguments, function* listByGalleryApplicationPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByGalleryApplicationPagingPage(resourceGroupName, galleryName, galleryApplicationName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Create or update a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version is to be created.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be created.
     *                                      Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits
     *                                      must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param galleryApplicationVersion Parameters supplied to the create or update gallery Application
     *                                  Version operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                galleryName,
                galleryApplicationName,
                galleryApplicationVersionName,
                galleryApplicationVersion,
                options
            }, createOrUpdateOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version is to be created.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be created.
     *                                      Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits
     *                                      must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param galleryApplicationVersion Parameters supplied to the create or update gallery Application
     *                                  Version operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version is to be updated.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be updated.
     *                                      Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits
     *                                      must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param galleryApplicationVersion Parameters supplied to the update gallery Application Version
     *                                  operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                galleryName,
                galleryApplicationName,
                galleryApplicationVersionName,
                galleryApplicationVersion,
                options
            }, updateOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version is to be updated.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be updated.
     *                                      Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits
     *                                      must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param galleryApplicationVersion Parameters supplied to the update gallery Application Version
     *                                  operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Retrieves information about a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version resides.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be retrieved.
     * @param options The options parameters.
     */
    get(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            galleryName,
            galleryApplicationName,
            galleryApplicationVersionName,
            options
        }, getOperationSpec);
    }
    /**
     * Delete a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version resides.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be deleted.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                galleryName,
                galleryApplicationName,
                galleryApplicationVersionName,
                options
            }, deleteOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a gallery Application Version.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the gallery Application Definition in which the
     *                               Application Version resides.
     * @param galleryApplicationVersionName The name of the gallery Application Version to be deleted.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List gallery Application Versions in a gallery Application Definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the Shared Application Gallery Application Definition from
     *                               which the Application Versions are to be listed.
     * @param options The options parameters.
     */
    _listByGalleryApplication(resourceGroupName, galleryName, galleryApplicationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, galleryName, galleryApplicationName, options }, listByGalleryApplicationOperationSpec);
    }
    /**
     * ListByGalleryApplicationNext
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition
     *                    resides.
     * @param galleryApplicationName The name of the Shared Application Gallery Application Definition from
     *                               which the Application Versions are to be listed.
     * @param nextLink The nextLink from the previous successful call to the ListByGalleryApplication
     *                 method.
     * @param options The options parameters.
     */
    _listByGalleryApplicationNext(resourceGroupName, galleryName, galleryApplicationName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            galleryName,
            galleryApplicationName,
            nextLink,
            options
        }, listByGalleryApplicationNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.GalleryApplicationVersion
        },
        201: {
            bodyMapper: Mappers.GalleryApplicationVersion
        },
        202: {
            bodyMapper: Mappers.GalleryApplicationVersion
        },
        204: {
            bodyMapper: Mappers.GalleryApplicationVersion
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.galleryApplicationVersion,
    queryParameters: [Parameters.apiVersion3],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.galleryName,
        Parameters.galleryApplicationName,
        Parameters.galleryApplicationVersionName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.GalleryApplicationVersion
        },
        201: {
            bodyMapper: Mappers.GalleryApplicationVersion
        },
        202: {
            bodyMapper: Mappers.GalleryApplicationVersion
        },
        204: {
            bodyMapper: Mappers.GalleryApplicationVersion
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.galleryApplicationVersion1,
    queryParameters: [Parameters.apiVersion3],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.galleryName,
        Parameters.galleryApplicationName,
        Parameters.galleryApplicationVersionName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GalleryApplicationVersion
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion3, Parameters.expand9],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.galleryName,
        Parameters.galleryApplicationName,
        Parameters.galleryApplicationVersionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion3],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.galleryName,
        Parameters.galleryApplicationName,
        Parameters.galleryApplicationVersionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByGalleryApplicationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GalleryApplicationVersionList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion3],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.galleryName,
        Parameters.galleryApplicationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByGalleryApplicationNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GalleryApplicationVersionList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion3],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.resourceGroupName,
        Parameters.galleryName,
        Parameters.galleryApplicationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=galleryApplicationVersions.js.map