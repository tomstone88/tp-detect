/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing DiskRestorePointOperations operations. */
export class DiskRestorePointOperationsImpl {
    /**
     * Initialize a new instance of the class DiskRestorePointOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists diskRestorePoints under a vmRestorePoint.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param options The options parameters.
     */
    listByRestorePoint(resourceGroupName, restorePointCollectionName, vmRestorePointName, options) {
        const iter = this.listByRestorePointPagingAll(resourceGroupName, restorePointCollectionName, vmRestorePointName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByRestorePointPagingPage(resourceGroupName, restorePointCollectionName, vmRestorePointName, options);
            }
        };
    }
    listByRestorePointPagingPage(resourceGroupName, restorePointCollectionName, vmRestorePointName, options) {
        return __asyncGenerator(this, arguments, function* listByRestorePointPagingPage_1() {
            let result = yield __await(this._listByRestorePoint(resourceGroupName, restorePointCollectionName, vmRestorePointName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listByRestorePointNext(resourceGroupName, restorePointCollectionName, vmRestorePointName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listByRestorePointPagingAll(resourceGroupName, restorePointCollectionName, vmRestorePointName, options) {
        return __asyncGenerator(this, arguments, function* listByRestorePointPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByRestorePointPagingPage(resourceGroupName, restorePointCollectionName, vmRestorePointName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get disk restorePoint resource
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param diskRestorePointName The name of the disk restore point created.
     * @param options The options parameters.
     */
    get(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            restorePointCollectionName,
            vmRestorePointName,
            diskRestorePointName,
            options
        }, getOperationSpec);
    }
    /**
     * Lists diskRestorePoints under a vmRestorePoint.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param options The options parameters.
     */
    _listByRestorePoint(resourceGroupName, restorePointCollectionName, vmRestorePointName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            restorePointCollectionName,
            vmRestorePointName,
            options
        }, listByRestorePointOperationSpec);
    }
    /**
     * Grants access to a diskRestorePoint.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param diskRestorePointName The name of the disk restore point created.
     * @param grantAccessData Access data object supplied in the body of the get disk access operation.
     * @param options The options parameters.
     */
    beginGrantAccess(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, grantAccessData, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                restorePointCollectionName,
                vmRestorePointName,
                diskRestorePointName,
                grantAccessData,
                options
            }, grantAccessOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Grants access to a diskRestorePoint.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param diskRestorePointName The name of the disk restore point created.
     * @param grantAccessData Access data object supplied in the body of the get disk access operation.
     * @param options The options parameters.
     */
    beginGrantAccessAndWait(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, grantAccessData, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginGrantAccess(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, grantAccessData, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Revokes access to a diskRestorePoint.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param diskRestorePointName The name of the disk restore point created.
     * @param options The options parameters.
     */
    beginRevokeAccess(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                restorePointCollectionName,
                vmRestorePointName,
                diskRestorePointName,
                options
            }, revokeAccessOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Revokes access to a diskRestorePoint.
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param diskRestorePointName The name of the disk restore point created.
     * @param options The options parameters.
     */
    beginRevokeAccessAndWait(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRevokeAccess(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByRestorePointNext
     * @param resourceGroupName The name of the resource group.
     * @param restorePointCollectionName The name of the restore point collection that the disk restore
     *                                   point belongs.
     * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.
     * @param nextLink The nextLink from the previous successful call to the ListByRestorePoint method.
     * @param options The options parameters.
     */
    _listByRestorePointNext(resourceGroupName, restorePointCollectionName, vmRestorePointName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            restorePointCollectionName,
            vmRestorePointName,
            nextLink,
            options
        }, listByRestorePointNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{vmRestorePointName}/diskRestorePoints/{diskRestorePointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiskRestorePoint
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.restorePointCollectionName,
        Parameters.vmRestorePointName,
        Parameters.diskRestorePointName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByRestorePointOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{vmRestorePointName}/diskRestorePoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiskRestorePointList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.restorePointCollectionName,
        Parameters.vmRestorePointName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const grantAccessOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{vmRestorePointName}/diskRestorePoints/{diskRestorePointName}/beginGetAccess",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessUri
        },
        201: {
            bodyMapper: Mappers.AccessUri
        },
        202: {
            bodyMapper: Mappers.AccessUri
        },
        204: {
            bodyMapper: Mappers.AccessUri
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.grantAccessData,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.restorePointCollectionName,
        Parameters.vmRestorePointName,
        Parameters.diskRestorePointName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const revokeAccessOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{vmRestorePointName}/diskRestorePoints/{diskRestorePointName}/endGetAccess",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.restorePointCollectionName,
        Parameters.vmRestorePointName,
        Parameters.diskRestorePointName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByRestorePointNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiskRestorePointList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.resourceGroupName,
        Parameters.restorePointCollectionName,
        Parameters.vmRestorePointName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=diskRestorePointOperations.js.map