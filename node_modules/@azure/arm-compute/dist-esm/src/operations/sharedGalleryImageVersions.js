/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing SharedGalleryImageVersions operations. */
export class SharedGalleryImageVersionsImpl {
    /**
     * Initialize a new instance of the class SharedGalleryImageVersions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List shared gallery image versions by subscription id or tenant id.
     * @param location Resource location.
     * @param galleryUniqueName The unique name of the Shared Gallery.
     * @param galleryImageName The name of the Shared Gallery Image Definition from which the Image
     *                         Versions are to be listed.
     * @param options The options parameters.
     */
    list(location, galleryUniqueName, galleryImageName, options) {
        const iter = this.listPagingAll(location, galleryUniqueName, galleryImageName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(location, galleryUniqueName, galleryImageName, options);
            }
        };
    }
    listPagingPage(location, galleryUniqueName, galleryImageName, options) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield __await(this._list(location, galleryUniqueName, galleryImageName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listNext(location, galleryUniqueName, galleryImageName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listPagingAll(location, galleryUniqueName, galleryImageName, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(location, galleryUniqueName, galleryImageName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List shared gallery image versions by subscription id or tenant id.
     * @param location Resource location.
     * @param galleryUniqueName The unique name of the Shared Gallery.
     * @param galleryImageName The name of the Shared Gallery Image Definition from which the Image
     *                         Versions are to be listed.
     * @param options The options parameters.
     */
    _list(location, galleryUniqueName, galleryImageName, options) {
        return this.client.sendOperationRequest({ location, galleryUniqueName, galleryImageName, options }, listOperationSpec);
    }
    /**
     * Get a shared gallery image version by subscription id or tenant id.
     * @param location Resource location.
     * @param galleryUniqueName The unique name of the Shared Gallery.
     * @param galleryImageName The name of the Shared Gallery Image Definition from which the Image
     *                         Versions are to be listed.
     * @param galleryImageVersionName The name of the gallery image version to be created. Needs to follow
     *                                semantic version name pattern: The allowed characters are digit and period. Digits must be within
     *                                the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
     * @param options The options parameters.
     */
    get(location, galleryUniqueName, galleryImageName, galleryImageVersionName, options) {
        return this.client.sendOperationRequest({
            location,
            galleryUniqueName,
            galleryImageName,
            galleryImageVersionName,
            options
        }, getOperationSpec);
    }
    /**
     * ListNext
     * @param location Resource location.
     * @param galleryUniqueName The unique name of the Shared Gallery.
     * @param galleryImageName The name of the Shared Gallery Image Definition from which the Image
     *                         Versions are to be listed.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(location, galleryUniqueName, galleryImageName, nextLink, options) {
        return this.client.sendOperationRequest({ location, galleryUniqueName, galleryImageName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/sharedGalleries/{galleryUniqueName}/images/{galleryImageName}/versions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SharedGalleryImageVersionList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion3, Parameters.sharedTo],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location1,
        Parameters.galleryImageName,
        Parameters.galleryUniqueName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/sharedGalleries/{galleryUniqueName}/images/{galleryImageName}/versions/{galleryImageVersionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SharedGalleryImageVersion
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion3],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location1,
        Parameters.galleryImageName,
        Parameters.galleryImageVersionName,
        Parameters.galleryUniqueName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SharedGalleryImageVersionList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion3, Parameters.sharedTo],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.location1,
        Parameters.galleryImageName,
        Parameters.galleryUniqueName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=sharedGalleryImageVersions.js.map