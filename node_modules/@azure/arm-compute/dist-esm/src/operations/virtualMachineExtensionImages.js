/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing VirtualMachineExtensionImages operations. */
export class VirtualMachineExtensionImagesImpl {
    /**
     * Initialize a new instance of the class VirtualMachineExtensionImages class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a virtual machine extension image.
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param version
     * @param typeParam
     * @param options The options parameters.
     */
    get(location, publisherName, version, typeParam, options) {
        return this.client.sendOperationRequest({ location, publisherName, version, typeParam, options }, getOperationSpec);
    }
    /**
     * Gets a list of virtual machine extension image types.
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param options The options parameters.
     */
    listTypes(location, publisherName, options) {
        return this.client.sendOperationRequest({ location, publisherName, options }, listTypesOperationSpec);
    }
    /**
     * Gets a list of virtual machine extension image versions.
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param typeParam
     * @param options The options parameters.
     */
    listVersions(location, publisherName, typeParam, options) {
        return this.client.sendOperationRequest({ location, publisherName, typeParam, options }, listVersionsOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions/{version}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineExtensionImage
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location1,
        Parameters.publisherName,
        Parameters.version,
        Parameters.typeParam
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listTypesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VirtualMachineExtensionImage"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location1,
        Parameters.publisherName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listVersionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VirtualMachineExtensionImage"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.top,
        Parameters.orderby
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location1,
        Parameters.publisherName,
        Parameters.typeParam
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=virtualMachineExtensionImages.js.map