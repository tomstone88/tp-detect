/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing CloudServiceOperatingSystems operations. */
export class CloudServiceOperatingSystemsImpl {
    /**
     * Initialize a new instance of the class CloudServiceOperatingSystems class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a list of all guest operating system versions available to be specified in the XML service
     * configuration (.cscfg) for a cloud service. Use nextLink property in the response to get the next
     * page of OS versions. Do this till nextLink is null to fetch all the OS versions.
     * @param location Name of the location that the OS versions pertain to.
     * @param options The options parameters.
     */
    listOSVersions(location, options) {
        const iter = this.listOSVersionsPagingAll(location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listOSVersionsPagingPage(location, options);
            }
        };
    }
    listOSVersionsPagingPage(location, options) {
        return __asyncGenerator(this, arguments, function* listOSVersionsPagingPage_1() {
            let result = yield __await(this._listOSVersions(location, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listOSVersionsNext(location, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listOSVersionsPagingAll(location, options) {
        return __asyncGenerator(this, arguments, function* listOSVersionsPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listOSVersionsPagingPage(location, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets a list of all guest operating system families available to be specified in the XML service
     * configuration (.cscfg) for a cloud service. Use nextLink property in the response to get the next
     * page of OS Families. Do this till nextLink is null to fetch all the OS Families.
     * @param location Name of the location that the OS families pertain to.
     * @param options The options parameters.
     */
    listOSFamilies(location, options) {
        const iter = this.listOSFamiliesPagingAll(location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listOSFamiliesPagingPage(location, options);
            }
        };
    }
    listOSFamiliesPagingPage(location, options) {
        return __asyncGenerator(this, arguments, function* listOSFamiliesPagingPage_1() {
            let result = yield __await(this._listOSFamilies(location, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listOSFamiliesNext(location, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listOSFamiliesPagingAll(location, options) {
        return __asyncGenerator(this, arguments, function* listOSFamiliesPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listOSFamiliesPagingPage(location, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets properties of a guest operating system version that can be specified in the XML service
     * configuration (.cscfg) for a cloud service.
     * @param location Name of the location that the OS version pertains to.
     * @param osVersionName Name of the OS version.
     * @param options The options parameters.
     */
    getOSVersion(location, osVersionName, options) {
        return this.client.sendOperationRequest({ location, osVersionName, options }, getOSVersionOperationSpec);
    }
    /**
     * Gets a list of all guest operating system versions available to be specified in the XML service
     * configuration (.cscfg) for a cloud service. Use nextLink property in the response to get the next
     * page of OS versions. Do this till nextLink is null to fetch all the OS versions.
     * @param location Name of the location that the OS versions pertain to.
     * @param options The options parameters.
     */
    _listOSVersions(location, options) {
        return this.client.sendOperationRequest({ location, options }, listOSVersionsOperationSpec);
    }
    /**
     * Gets properties of a guest operating system family that can be specified in the XML service
     * configuration (.cscfg) for a cloud service.
     * @param location Name of the location that the OS family pertains to.
     * @param osFamilyName Name of the OS family.
     * @param options The options parameters.
     */
    getOSFamily(location, osFamilyName, options) {
        return this.client.sendOperationRequest({ location, osFamilyName, options }, getOSFamilyOperationSpec);
    }
    /**
     * Gets a list of all guest operating system families available to be specified in the XML service
     * configuration (.cscfg) for a cloud service. Use nextLink property in the response to get the next
     * page of OS Families. Do this till nextLink is null to fetch all the OS Families.
     * @param location Name of the location that the OS families pertain to.
     * @param options The options parameters.
     */
    _listOSFamilies(location, options) {
        return this.client.sendOperationRequest({ location, options }, listOSFamiliesOperationSpec);
    }
    /**
     * ListOSVersionsNext
     * @param location Name of the location that the OS versions pertain to.
     * @param nextLink The nextLink from the previous successful call to the ListOSVersions method.
     * @param options The options parameters.
     */
    _listOSVersionsNext(location, nextLink, options) {
        return this.client.sendOperationRequest({ location, nextLink, options }, listOSVersionsNextOperationSpec);
    }
    /**
     * ListOSFamiliesNext
     * @param location Name of the location that the OS families pertain to.
     * @param nextLink The nextLink from the previous successful call to the ListOSFamilies method.
     * @param options The options parameters.
     */
    _listOSFamiliesNext(location, nextLink, options) {
        return this.client.sendOperationRequest({ location, nextLink, options }, listOSFamiliesNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOSVersionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/cloudServiceOsVersions/{osVersionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OSVersion
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location1,
        Parameters.osVersionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOSVersionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/cloudServiceOsVersions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OSVersionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOSFamilyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/cloudServiceOsFamilies/{osFamilyName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OSFamily
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location1,
        Parameters.osFamilyName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOSFamiliesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/cloudServiceOsFamilies",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OSFamilyListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOSVersionsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OSVersionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.location1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOSFamiliesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OSFamilyListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.location1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=cloudServiceOperatingSystems.js.map