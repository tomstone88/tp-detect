/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { ComputeManagementClient } from "../src/computeManagementClient";
import { NetworkManagementClient } from "@azure/arm-network";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Compute test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let network_client;
    let location;
    let resourceGroupName;
    let availabilitySetName;
    let network_name;
    let subnet_name;
    let interface_name;
    let virtual_machine_name;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new ComputeManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            network_client = new NetworkManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroupName = "myjstest";
            availabilitySetName = "availabilitySets123";
            network_name = "networknamexx";
            subnet_name = "subnetnamexx";
            interface_name = "interfacex";
            virtual_machine_name = "virtualmachinex";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    //network_client.virtualNetworks.createOrUpdate
    function createVirtualNetwork() {
        return __awaiter(this, void 0, void 0, function* () {
            const parameter = {
                location: location,
                addressSpace: {
                    addressPrefixes: ["10.0.0.0/16"],
                },
            };
            const virtualNetworks_create_info = yield network_client.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroupName, network_name, parameter, testPollingOptions);
            const subnet_parameter = {
                addressPrefix: "10.0.0.0/24",
            };
            const subnet__create_info = yield network_client.subnets.beginCreateOrUpdateAndWait(resourceGroupName, network_name, subnet_name, subnet_parameter, testPollingOptions);
        });
    }
    //network_client.networkInterfaces.createOrUpdate
    function createNetworkInterface(group_name, location, nic_name) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameter = {
                location: location,
                ipConfigurations: [
                    {
                        name: "MyIpConfig",
                        subnet: {
                            id: "/subscriptions/" +
                                subscriptionId +
                                "/resourceGroups/" +
                                resourceGroupName +
                                "/providers/Microsoft.Network/virtualNetworks/" +
                                network_name +
                                "/subnets/" +
                                subnet_name,
                        },
                    },
                ],
            };
            const nic_info = yield network_client.networkInterfaces.beginCreateOrUpdateAndWait(group_name, nic_name, parameter, testPollingOptions);
        });
    }
    it("availabilitySets create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.availabilitySets.createOrUpdate(resourceGroupName, availabilitySetName, {
                platformFaultDomainCount: 2,
                platformUpdateDomainCount: 20,
                location: location,
            });
            assert.equal(res.name, availabilitySetName);
        });
    });
    it("availabilitySets update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.availabilitySets.update(resourceGroupName, availabilitySetName, {
                platformFaultDomainCount: 2,
                platformUpdateDomainCount: 20
            });
            assert.equal(res.type, "Microsoft.Compute/availabilitySets");
        });
    });
    it("availabilitySets get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.availabilitySets.get(resourceGroupName, availabilitySetName);
            assert.equal(res.name, availabilitySetName);
        });
    });
    it("availabilitySets list test", function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.availabilitySets.list(resourceGroupName)), _c; _c = yield _b.next(), !_c.done;) {
                    const item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("availabilitySets delete test", function () {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.availabilitySets.delete(resourceGroupName, availabilitySetName);
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.availabilitySets.list(resourceGroupName)), _c; _c = yield _b.next(), !_c.done;) {
                    const item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("virtualMachines create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield createVirtualNetwork();
            yield createNetworkInterface(resourceGroupName, location, interface_name);
            const res = yield client.virtualMachines.beginCreateOrUpdateAndWait(resourceGroupName, virtual_machine_name, {
                location: location,
                hardwareProfile: {
                    vmSize: "Standard_D2_v2",
                },
                storageProfile: {
                    imageReference: {
                        sku: "2016-Datacenter",
                        publisher: "MicrosoftWindowsServer",
                        version: "latest",
                        offer: "WindowsServer",
                    },
                    osDisk: {
                        caching: "ReadWrite",
                        managedDisk: {
                            storageAccountType: "Standard_LRS",
                        },
                        name: "myVMosdisk",
                        createOption: "FromImage",
                    },
                    dataDisks: [
                        {
                            diskSizeGB: 1023,
                            createOption: "Empty",
                            lun: 0,
                        },
                        {
                            diskSizeGB: 1023,
                            createOption: "Empty",
                            lun: 1,
                        },
                    ],
                },
                osProfile: {
                    adminUsername: "testuser",
                    computerName: "myVM",
                    adminPassword: "SecretPlaceholder123",
                    windowsConfiguration: {
                        enableAutomaticUpdates: true, // need automatic update for reimage
                    },
                },
                networkProfile: {
                    networkInterfaces: [
                        {
                            id: "/subscriptions/" +
                                subscriptionId +
                                "/resourceGroups/" +
                                resourceGroupName +
                                "/providers/Microsoft.Network/networkInterfaces/" +
                                interface_name +
                                "",
                            primary: true,
                        },
                    ],
                }
            }, testPollingOptions);
            assert.equal(res.name, virtual_machine_name);
        });
    });
    it("virtualMachines get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.virtualMachines.get(resourceGroupName, virtual_machine_name);
            assert.equal(res.name, virtual_machine_name);
        });
    });
    it("virtualMachines list test", function () {
        var e_3, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.virtualMachines.list(resourceGroupName)), _c; _c = yield _b.next(), !_c.done;) {
                    const item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("virtualMachines update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.virtualMachines.beginUpdateAndWait(resourceGroupName, virtual_machine_name, {
                networkProfile: {
                    networkInterfaces: [
                        {
                            id: "/subscriptions/" +
                                subscriptionId +
                                "/resourceGroups/" +
                                resourceGroupName +
                                "/providers/Microsoft.Network/networkInterfaces/" +
                                interface_name +
                                "",
                            primary: true,
                        },
                    ],
                }
            }, testPollingOptions);
            assert.equal(res.type, "Microsoft.Compute/virtualMachines");
        });
    });
    it("virtualMachines delete test", function () {
        var e_4, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.virtualMachines.beginDeleteAndWait(resourceGroupName, virtual_machine_name, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.virtualMachines.list(resourceGroupName)), _c; _c = yield _b.next(), !_c.done;) {
                    const item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            assert.equal(resArray.length, 0);
            yield network_client.networkInterfaces.beginDeleteAndWait(resourceGroupName, interface_name);
            yield network_client.subnets.beginDeleteAndWait(resourceGroupName, network_name, subnet_name);
            yield network_client.virtualNetworks.beginDeleteAndWait(resourceGroupName, network_name);
        });
    });
});
//# sourceMappingURL=compute_examples.js.map